1
00:00:01,480 --> 00:00:06,710
Now, just look, we made some convenience functions for the roots, we can do the same thing for handlers.

2
00:00:06,730 --> 00:00:11,860
And actually, they're probably going to be used a lot more than the ones in the routes because you're

3
00:00:11,860 --> 00:00:14,320
working with handlers a lot more than you're working with routes.

4
00:00:14,770 --> 00:00:16,090
But we can use the same approach.

5
00:00:16,300 --> 00:00:20,130
So let's go to the handlers folder in my app and create a new file.

6
00:00:20,200 --> 00:00:21,880
And again, I'll call this one convenience.

7
00:00:22,870 --> 00:00:24,850
Convenience, don't go.

8
00:00:27,300 --> 00:00:32,730
And the package for this, of course, is handlers and will create one one that's really going to get

9
00:00:32,730 --> 00:00:33,480
used a lot.

10
00:00:33,960 --> 00:00:39,870
So in any handler, let's say I go to handlers, don't go any time I'm rendering a page, I wind up

11
00:00:39,870 --> 00:00:42,450
calling H Typekit rendered up page.

12
00:00:42,960 --> 00:00:46,980
And as you might have noticed, even I get that wrong once in a while, and I forget to put the render

13
00:00:46,980 --> 00:00:52,870
before page or something like that, or I just put Dot render and I wrote that software to begin with.

14
00:00:52,890 --> 00:00:56,550
So if I'm making those mistakes, chances are other people will, too.

15
00:00:56,700 --> 00:00:58,110
So let's take care of that one first.

16
00:00:58,170 --> 00:00:59,100
That was really easy.

17
00:00:59,550 --> 00:01:05,370
We'll create a function with the receiver of H Pointer or two handlers, and we'll call this one just

18
00:01:05,370 --> 00:01:05,760
render.

19
00:01:06,390 --> 00:01:08,160
And it will take a response forever

20
00:01:11,310 --> 00:01:12,510
and it will take a request

21
00:01:15,300 --> 00:01:17,970
and it will take the template to render, which is a string.

22
00:01:19,620 --> 00:01:28,110
And it will take variables and data variables and data, both of type interface.

23
00:01:32,420 --> 00:01:34,070
And it returns potentially there.

24
00:01:35,390 --> 00:01:39,270
And really, this is as simple as saying return stock app.

25
00:01:39,780 --> 00:01:41,010
Don't try that again.

26
00:01:41,570 --> 00:01:44,420
App Dot render.

27
00:01:47,310 --> 00:01:55,410
The page and that takes W. an hour and template and variables in there.

28
00:01:58,710 --> 00:02:04,080
And I don't know, I have quotation marks around that that looks better.

29
00:02:04,110 --> 00:02:11,400
So we return that and that means I can go over to my say and I'll go and change this to nothing more

30
00:02:11,400 --> 00:02:12,120
than h.

31
00:02:14,950 --> 00:02:15,490
Not render.

32
00:02:16,780 --> 00:02:17,800
And that's a lot cleaner.

33
00:02:17,980 --> 00:02:23,830
OK, let me do the same thing for print line and everything else, but really, let's take care of some

34
00:02:23,830 --> 00:02:25,290
other things that might be useful.

35
00:02:25,300 --> 00:02:29,110
So back to our convenience, don't go in handlers and make sure you get the right one.

36
00:02:30,370 --> 00:02:31,960
Because the way it is now, we're going to have to.

37
00:02:31,960 --> 00:02:36,520
Every time we want to use the session, we have to start with a short app, not session, got put or

38
00:02:36,520 --> 00:02:38,150
get or whatever it might be.

39
00:02:38,170 --> 00:02:40,270
So let's make some convenience functions for that.

40
00:02:40,720 --> 00:02:48,670
So Func H receiver of H handlers and we'll call this one session put put something into the session

41
00:02:48,820 --> 00:02:54,940
and that requires the context of type, context, context right there.

42
00:02:55,030 --> 00:02:57,070
And hopefully that the important for me, it did.

43
00:02:58,780 --> 00:03:03,850
It also requires the key, which is a string, and it requires the data to put in there, which can

44
00:03:03,850 --> 00:03:04,360
be anything.

45
00:03:04,360 --> 00:03:11,020
So I'll just call it vowel of type interface, and it doesn't return anything.

46
00:03:11,260 --> 00:03:22,000
So all we do is call HQ, app dot session put and we give it the context, the key and the value and

47
00:03:22,000 --> 00:03:23,830
interface has an urn there.

48
00:03:25,630 --> 00:03:29,590
And of course, we need to be able to check to see if something exists in the session.

49
00:03:29,890 --> 00:03:38,200
Func, each receiver of handlers and we'll call this one session has and that takes the context of type,

50
00:03:38,200 --> 00:03:39,700
context, context.

51
00:03:41,770 --> 00:03:45,490
And it also requires the key, which is a string, and it returns Fallujah.

52
00:03:46,720 --> 00:03:57,190
And again, we just return each app, not debug, but session dot exists and we give it our context,

53
00:03:57,190 --> 00:03:57,760
but our key.

54
00:03:58,900 --> 00:04:03,100
That was the same thing for getting values from a session.

55
00:04:03,100 --> 00:04:12,250
Func H handlers one or two handlers session or session get like that, and that requires the context,

56
00:04:13,270 --> 00:04:14,860
context, context.

57
00:04:15,910 --> 00:04:22,780
It requires the key, which is a string, and it returns anything.

58
00:04:22,780 --> 00:04:28,570
So interface interface like that with the two curly brackets.

59
00:04:28,780 --> 00:04:36,970
And we just call each dot app dot session dot get and we give it the context and the key.

60
00:04:37,180 --> 00:04:38,470
And of course, this has to return.

61
00:04:39,580 --> 00:04:40,360
So we return that.

62
00:04:42,670 --> 00:04:44,310
What else do you have to do with Sessions?

63
00:04:44,320 --> 00:04:45,510
What you have to get things out of it?

64
00:04:45,550 --> 00:04:50,110
So func h, I mean, remove something from it, not pull something from it.

65
00:04:50,890 --> 00:04:53,500
H handlers session remove.

66
00:04:55,240 --> 00:04:58,540
And that requires the context of type, context, context.

67
00:05:03,150 --> 00:05:12,450
And it requires the key, and it doesn't return anything, and we just call HQ at the session that remove

68
00:05:13,230 --> 00:05:15,330
and give it the context and the key.

69
00:05:17,130 --> 00:05:18,090
Now what's wrong with this?

70
00:05:20,930 --> 00:05:21,530
He should be a.

71
00:05:23,870 --> 00:05:26,360
I'm very sloppy in my typing today, I apologize for that.

72
00:05:27,590 --> 00:05:29,090
And there's two other things we need to do.

73
00:05:29,120 --> 00:05:34,450
Sometimes you need to renew the token for a session and sometimes you need to destroy a session entirely.

74
00:05:34,460 --> 00:05:41,660
So let's do those func h to handlers, and we'll call this session renew, which reduce the token.

75
00:05:42,380 --> 00:05:47,300
And it just requires the context, ctcs context, context.

76
00:05:49,700 --> 00:05:51,200
And it potentially returns an error.

77
00:05:52,910 --> 00:05:55,400
And would you say, return H2 app

78
00:05:59,060 --> 00:06:01,610
dot session for new token?

79
00:06:01,880 --> 00:06:02,780
And here's the context.

80
00:06:04,040 --> 00:06:05,360
And finally destroyed.

81
00:06:05,360 --> 00:06:07,660
So we'll copy this one because it's very similar.

82
00:06:08,540 --> 00:06:10,910
Taste it here and call it session destroyed.

83
00:06:11,600 --> 00:06:13,790
Remove the session and destroy everything in it.

84
00:06:15,050 --> 00:06:16,580
That just requires the context.

85
00:06:17,060 --> 00:06:18,970
And we call a scrapped session.

86
00:06:18,980 --> 00:06:20,210
Don't destroy.

87
00:06:21,770 --> 00:06:22,130
OK.

88
00:06:22,280 --> 00:06:27,680
So those become very useful and easy to type and easy to remember helper functions.

89
00:06:28,070 --> 00:06:29,930
And that makes working with things much easier.

90
00:06:29,990 --> 00:06:30,710
Now there's a few more.

91
00:06:30,710 --> 00:06:33,020
We can put it in there and we'll add this as time goes on.

92
00:06:33,020 --> 00:06:36,560
But we also had that random string functionality, so let's make that easy.

93
00:06:37,010 --> 00:06:43,850
Func H handlers and if you recall, we created something that generates a random string and I'm going

94
00:06:43,850 --> 00:06:48,110
to call my helper function random string that are split, right?

95
00:06:48,710 --> 00:06:50,030
All it takes is one parameter.

96
00:06:50,060 --> 00:06:51,410
How long should this string be?

97
00:06:51,410 --> 00:06:52,370
And it returns a string.

98
00:06:54,410 --> 00:07:01,790
And here I'll just say return app dot, random string and hand it in.

99
00:07:03,020 --> 00:07:03,350
OK.

100
00:07:03,980 --> 00:07:05,260
Very simple changes.

101
00:07:05,270 --> 00:07:06,470
Very small changes.

102
00:07:06,470 --> 00:07:11,270
But it will make working with this particular package much easier for end users.

103
00:07:11,630 --> 00:07:12,170
Let's move on.
