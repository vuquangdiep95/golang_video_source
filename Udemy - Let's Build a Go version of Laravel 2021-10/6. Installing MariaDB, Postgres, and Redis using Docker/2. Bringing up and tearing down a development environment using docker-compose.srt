1
00:00:00,870 --> 00:00:06,750
So now that we have Docker installed, we can use Docker Compose to set up an easy to use development

2
00:00:06,750 --> 00:00:11,140
environment that has a copy of Postgres and read and read is running.

3
00:00:11,160 --> 00:00:16,350
And of course, if you already have those installed, feel free to use those and just skip this lecture

4
00:00:16,350 --> 00:00:18,000
and use your installed databases.

5
00:00:18,450 --> 00:00:19,800
But I'm going to assume that you don't.

6
00:00:20,670 --> 00:00:23,480
So the very first thing I'll do is I'm in my app.

7
00:00:23,490 --> 00:00:24,570
That's the project admin.

8
00:00:24,690 --> 00:00:29,580
I'm going to create a new folder at the root level of this project, a new folder.

9
00:00:29,910 --> 00:00:36,390
And I'm going to call it VB Dash data, because that is where I'm going to have my Docker images store

10
00:00:36,420 --> 00:00:36,990
their data.

11
00:00:37,290 --> 00:00:41,310
We could just let Docker manage it and put it wherever it wants to, but I'd like to make these things

12
00:00:41,310 --> 00:00:41,910
explicit.

13
00:00:43,000 --> 00:00:49,540
And on the course resources for this lecture, you will find a file you can download called Docker Compose

14
00:00:49,540 --> 00:00:56,800
Dot Wiimote, it's a YAML file and just copy that contents of that and create a new file at the root

15
00:00:56,800 --> 00:01:03,550
level of your Maya project called Docker Dash, composed y and built, and make sure it's exactly that

16
00:01:03,550 --> 00:01:04,000
name.

17
00:01:04,010 --> 00:01:05,740
No uppercase letters, nothing like that.

18
00:01:06,820 --> 00:01:10,540
Now I have a copy of this on my clipboard, so let me paste it in and we'll go through it.

19
00:01:11,350 --> 00:01:18,670
This is a really simple Docker compose file, and it allows me to go get a copy of Postgres to specify

20
00:01:18,670 --> 00:01:19,900
on my local machine.

21
00:01:19,910 --> 00:01:25,390
I'm going to listen to Port five four three two, which is the default Postgres port, and on the Docker

22
00:01:25,390 --> 00:01:28,210
network, it's going to port five four three two as well.

23
00:01:28,780 --> 00:01:36,220
And I'm specifying a Postgres user named Postgres a password of password and a database called celebrities.

24
00:01:36,250 --> 00:01:42,100
And the nice thing about this is that the first time I run this, if that database doesn't exist, it

25
00:01:42,100 --> 00:01:42,880
will be created.

26
00:01:43,150 --> 00:01:48,730
And I'm also telling it Use this for your volume store in the current directory.

27
00:01:48,760 --> 00:01:55,330
Gabe Dash data create a folder called Postgres and link that to this directory on the container.

28
00:01:55,780 --> 00:01:58,880
And we do the same thing with Redis and the same thing with MariaDB.

29
00:01:59,800 --> 00:02:05,140
So now that I have that there and I just installed Docker, I uninstalled it and then reinstalled it

30
00:02:05,140 --> 00:02:06,730
so we'd be able to start from scratch.

31
00:02:07,690 --> 00:02:15,040
I just type Docker Dash compose up and away it goes.

32
00:02:15,040 --> 00:02:18,310
It begins pulling all these things at the very first time you do it.

33
00:02:18,310 --> 00:02:21,730
Of course, it has to pull these images down and it will take a while to start up.

34
00:02:26,320 --> 00:02:29,920
I have a relatively fast internet connection, so it's not taking me very long.

35
00:02:30,370 --> 00:02:32,050
It might take you a bit longer.

36
00:02:34,230 --> 00:02:35,220
But only the first time.

37
00:02:41,060 --> 00:02:47,750
And I got an error because apparently I need to go into my debrief dash data and create a new folder

38
00:02:48,740 --> 00:02:53,480
called Postgres and what are the other two named?

39
00:02:53,900 --> 00:02:59,480
It's a good thing I did this from scratch, so post-cruise Redis and MariaDB.

40
00:02:59,540 --> 00:03:08,720
So I'll create another folder inside of DB data a new folder, Redis and a third folder new folder.

41
00:03:09,530 --> 00:03:09,740
Where?

42
00:03:09,740 --> 00:03:10,340
Yeah, DV.

43
00:03:11,060 --> 00:03:11,420
OK.

44
00:03:11,690 --> 00:03:17,810
So let's bring this back up and clear that screen and type Docker compose up again.

45
00:03:20,720 --> 00:03:21,320
And there it goes.

46
00:03:21,350 --> 00:03:26,360
Starting up databases, starting at MariaDB and of course, the very first time they start, it takes

47
00:03:26,360 --> 00:03:29,720
a while to initialize this and you'll see warnings and things in the log file.

48
00:03:29,720 --> 00:03:30,590
But just ignore those.

49
00:03:30,890 --> 00:03:35,630
OK, I need to make sure everything gets started up before I try to connect to any.

50
00:03:44,980 --> 00:03:46,030
Server started.

51
00:03:46,240 --> 00:03:48,250
Let's try this, and it's still doing its thing.

52
00:03:48,880 --> 00:03:50,470
And now it's ready to accept connections.

53
00:03:50,500 --> 00:03:55,810
OK, so now I'm going to start up my favorite Postgres client and I'm back and on the Mac that happens

54
00:03:55,810 --> 00:03:57,490
to be post code, which I have to pay for.

55
00:03:57,490 --> 00:04:00,390
But it's not very expensive, and the free version works really well.

56
00:04:00,400 --> 00:04:02,980
You just can't open that many databases at the same time.

57
00:04:03,580 --> 00:04:12,700
So I'll create a new favorite and I'm going to call this celebrity's Dash Docker.

58
00:04:13,600 --> 00:04:15,010
The host is local host.

59
00:04:16,060 --> 00:04:18,040
The port is five four three two.

60
00:04:19,150 --> 00:04:20,830
The user is Postgres.

61
00:04:22,240 --> 00:04:28,240
The password is just password, which I specified in my Docker Dash composed, don't worry email and

62
00:04:28,240 --> 00:04:31,720
I'll say, save it and I'll make the database celebrities.

63
00:04:32,410 --> 00:04:34,270
So let's connect and see if this works.

64
00:04:35,530 --> 00:04:36,040
There it is.

65
00:04:36,040 --> 00:04:36,740
I'm connected.

66
00:04:36,790 --> 00:04:37,700
No problem.

67
00:04:37,720 --> 00:04:42,400
And you can do the same thing with Redis from the command line if you want to, or the same thing using

68
00:04:42,400 --> 00:04:45,850
your favorite MySchool client to connect to MariaDB.

69
00:04:46,240 --> 00:04:47,230
Now that's up and running.

70
00:04:47,380 --> 00:04:51,010
So let's close it by hitting control C to stop it.

71
00:04:51,670 --> 00:04:52,090
OK.

72
00:04:52,570 --> 00:04:57,970
I can run this in the background by typing Docker Dash compose

73
00:05:01,180 --> 00:05:01,410
up.

74
00:05:01,930 --> 00:05:05,920
Dash D to send it to the background and it will run in the background.

75
00:05:05,920 --> 00:05:10,780
So starting them all up and there it goes, and it always takes a few seconds after you start it, before

76
00:05:10,780 --> 00:05:14,200
you can actually connect to the database, but not a terribly long time.

77
00:05:14,560 --> 00:05:17,620
And to bring it down now it's Docker Dash compose.

78
00:05:17,780 --> 00:05:19,900
Now what?

79
00:05:19,900 --> 00:05:26,440
So whatever Makefile over here, my file and I'll close the terminal window and let's add a couple of

80
00:05:26,440 --> 00:05:26,920
things here.

81
00:05:27,070 --> 00:05:29,050
I'll put it right before the test.

82
00:05:29,170 --> 00:05:31,690
OK, I want to make this easy for myself.

83
00:05:31,930 --> 00:05:37,960
I'm going to add one called start, underscore, compose or whatever you want to call it, colon.

84
00:05:38,560 --> 00:05:45,640
And it has one command Docker Dash compose, which I better to spell right up dashti throughout the

85
00:05:45,640 --> 00:05:55,200
background and not surprisingly, start compose Docker Dash compose down.

86
00:05:56,230 --> 00:06:03,460
So now if I save that and open my terminal window and clear the screen and type, make start, compose

87
00:06:04,600 --> 00:06:06,160
and actually starts my network for me.

88
00:06:06,610 --> 00:06:10,930
And then we go, and that will keep running until you actually tell it to come down.

89
00:06:11,590 --> 00:06:14,020
And of course, while you're working in the project, you can start it up.

90
00:06:14,020 --> 00:06:16,620
And while you're not working in the project, you can tear it down.

91
00:06:16,630 --> 00:06:21,280
And the great thing about this, of course, is in lots of situations when you're working for a particular

92
00:06:21,280 --> 00:06:23,350
employer or for a particular client.

93
00:06:23,350 --> 00:06:28,630
If you happen to be a freelancer, they're going to want specific database versions in a lot of cases.

94
00:06:28,780 --> 00:06:33,370
And Docker makes it trivial to install specific versions of whatever software you want.

95
00:06:34,060 --> 00:06:39,610
OK, now that we have this setup and we have our database running, we can start writing the code necessary

96
00:06:39,610 --> 00:06:44,740
to make our Celerity House package support different databases and we'll start with Postgres.
