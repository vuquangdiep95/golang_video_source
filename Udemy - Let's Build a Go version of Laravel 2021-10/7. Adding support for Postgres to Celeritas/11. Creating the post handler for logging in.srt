1
00:00:00,970 --> 00:00:06,010
So we have our login page displaying more or less correctly, and now we want to actually try to log

2
00:00:06,010 --> 00:00:06,750
a user in.

3
00:00:06,790 --> 00:00:12,920
But before we do that, you might have noticed that I had a typo here in Log Inkjet in a couple of places.

4
00:00:12,940 --> 00:00:14,820
It's auto complete.

5
00:00:14,920 --> 00:00:22,000
Let's put the letter O in there and copy that and paste it down here and down here.

6
00:00:22,330 --> 00:00:22,930
That's better.

7
00:00:23,500 --> 00:00:26,500
Now let's go back to our roots file, which is.

8
00:00:28,340 --> 00:00:31,580
Right here and uncomment this route.

9
00:00:33,170 --> 00:00:38,480
So we have a post user log in handler that we have to define now, so let's go over to our auth handlers

10
00:00:39,440 --> 00:00:40,070
and to that.

11
00:00:41,030 --> 00:00:49,910
So func h pointer to handlers and I need to call this post user login and it needs to take the response

12
00:00:49,910 --> 00:00:55,070
writer because it's a handler and a pointer to a request.

13
00:00:57,800 --> 00:01:04,640
Now, at this point, we need to figure out, do we have enough information to actually log a user in?

14
00:01:04,850 --> 00:01:07,400
In other words, the functions in user account.

15
00:01:07,910 --> 00:01:12,510
So in order to do that, we're going to need to grab the information from the post request.

16
00:01:12,530 --> 00:01:13,130
So let's do that.

17
00:01:13,130 --> 00:01:21,500
First error is assign the value of from the request we call personal right, and we check for an error

18
00:01:22,490 --> 00:01:24,230
if error is not equal to no.

19
00:01:28,760 --> 00:01:34,430
We're not building a full web application, so I'll just write to the screen w dot, right?

20
00:01:35,930 --> 00:01:37,970
And I'll write as a slice of bites.

21
00:01:41,430 --> 00:01:42,450
Aired on air.

22
00:01:43,050 --> 00:01:44,640
OK, and we'll return.

23
00:01:44,850 --> 00:01:45,600
Don't go any further.

24
00:01:46,200 --> 00:01:50,520
And of course, in a real web application, you would do something more here, but we're just making

25
00:01:50,520 --> 00:01:51,740
sure functionality works.

26
00:01:51,750 --> 00:01:53,580
We're not actually building a web application.

27
00:01:54,510 --> 00:01:57,990
We're building an application that makes building web applications much easier.

28
00:01:58,590 --> 00:02:03,750
Now we'll grab our email from the request form.

29
00:02:04,120 --> 00:02:05,610
Not yet.

30
00:02:05,930 --> 00:02:10,810
We're looking for email and we'll get the password password is assigned.

31
00:02:10,810 --> 00:02:18,000
The value of ERDA form don't get password, so we have our email on our password.

32
00:02:18,420 --> 00:02:24,960
How do we get a user in order to compare the password that was entered with the password that is in

33
00:02:24,960 --> 00:02:25,590
the database?

34
00:02:25,890 --> 00:02:30,600
Well, let's go back to our handler's file right here.

35
00:02:30,750 --> 00:02:31,170
OK.

36
00:02:31,950 --> 00:02:34,180
And let's look at the very top what we have in here.

37
00:02:34,200 --> 00:02:36,930
We have ACT-Accelerator start celebrities.

38
00:02:37,590 --> 00:02:43,720
Let's just add the type models because by the time we create our handlers, we actually have our models.

39
00:02:43,740 --> 00:02:45,390
And that's a type data models.

40
00:02:45,870 --> 00:02:53,760
OK, so now if we go back to our its celebrity know file and find the part where we create our handlers.

41
00:02:54,540 --> 00:02:59,460
We can't add the models here because we don't have them yet, but we have them down here at all models.

42
00:02:59,820 --> 00:03:01,830
So after this, we can just say.

43
00:03:03,440 --> 00:03:09,890
My handlers don't models equals Abdul models.

44
00:03:11,330 --> 00:03:14,690
And at that point, we now have access back in our handlers.

45
00:03:15,410 --> 00:03:20,780
We have access to the necessary functions so we can now say user.

46
00:03:21,470 --> 00:03:25,520
And potentially there are assigned the value of H2 models.

47
00:03:26,450 --> 00:03:28,460
Don't users don't get by email.

48
00:03:28,640 --> 00:03:36,140
And then what's available to us and we'll pass in and we check for an error if error is not equal to

49
00:03:36,140 --> 00:03:36,470
no.

50
00:03:38,480 --> 00:03:45,170
And I'll do exactly the same thing I did up here, just right the error, which is sufficient for our

51
00:03:45,170 --> 00:03:48,380
purposes now that we have the user.

52
00:03:48,650 --> 00:03:53,260
We just need to see if the password they've supplied actually matches the hash that we have in the database.

53
00:03:53,270 --> 00:03:57,810
So also create a variable called matches and potentially in error are equal to.

54
00:03:58,010 --> 00:04:02,120
And it's as simple as calling user dot password matches.

55
00:04:03,710 --> 00:04:05,330
And handing that password.

56
00:04:08,780 --> 00:04:10,100
And again, we'll check for an error.

57
00:04:10,240 --> 00:04:12,590
I'll just say if error is not equal to no.

58
00:04:13,580 --> 00:04:19,400
This time, I'll put a little more meaningful message in there w dot right as a slice of bite.

59
00:04:22,490 --> 00:04:29,810
You're validating password and matches is actually a Boolean.

60
00:04:29,960 --> 00:04:36,110
OK, so same thing here, if not matches, then.

61
00:04:36,770 --> 00:04:39,770
And if we want to return after that here, of course return.

62
00:04:41,180 --> 00:04:42,230
I'll just copy this

63
00:04:45,410 --> 00:04:50,180
and I'll change this to invalid password.

64
00:04:51,920 --> 00:04:58,520
Now, if we get past this, then we have a valid user and that valid user's password matches the password

65
00:04:58,520 --> 00:05:00,310
that was typed in to the form.

66
00:05:00,320 --> 00:05:08,480
So at this point, we can actually log the user in by simply saying each dot app dot session Dot put.

67
00:05:11,580 --> 00:05:13,150
I'll want to put it in there, is there user ID.

68
00:05:13,960 --> 00:05:21,980
So our context, which is the first parameter and the key will be user ID and the value is user I.D..

69
00:05:23,680 --> 00:05:24,040
OK.

70
00:05:24,850 --> 00:05:27,220
And I'll say it should be done.

71
00:05:27,280 --> 00:05:32,530
Redirect and I'll take the user back to the home page w.

72
00:05:33,360 --> 00:05:41,440
Our route is slash and HD Typekit status see other, which is fine and that should be sufficient.

73
00:05:41,770 --> 00:05:43,200
So let's try this out.

74
00:05:43,210 --> 00:05:44,390
Let's see if we get everything right.

75
00:05:44,410 --> 00:05:48,610
Let's open our terminal window and take make restart.

76
00:05:54,400 --> 00:05:55,840
So it built that's a good sign.

77
00:05:55,870 --> 00:06:01,360
Now let's go look at our database and see what we have in there, because at this point, I can't actually

78
00:06:01,360 --> 00:06:02,710
remember what we have.

79
00:06:02,740 --> 00:06:09,310
So let's connect to celebrities darker all connect and we'll look under users.

80
00:06:10,600 --> 00:06:15,550
And what I have in there is Trevor with a last name that I changed me out here dot com.

81
00:06:15,550 --> 00:06:18,550
And I believe that this hash is actually for password.

82
00:06:18,760 --> 00:06:20,680
So let's go back to our web browser.

83
00:06:22,090 --> 00:06:29,080
Let's reload this page, and first of all, I'll put in you at their dot com with some password.

84
00:06:29,110 --> 00:06:31,160
It doesn't matter because this user doesn't exist.

85
00:06:31,180 --> 00:06:37,810
And I'll try logging in and it says no more rows in this result set, so couldn't find that user perfect.

86
00:06:38,500 --> 00:06:46,690
Now let's go in here and type in me at here dot com, which does exist in the database.

87
00:06:46,690 --> 00:06:52,180
But let's give it the wrong password one two three four five six Log in.

88
00:06:54,210 --> 00:06:55,860
And it says invalid password.

89
00:06:56,190 --> 00:07:03,000
Let's go back and let's put in me at here rt.com and password and log in.

90
00:07:05,340 --> 00:07:10,170
And we redirect it now, let's go change this homepage to put a link to the log in.

91
00:07:10,230 --> 00:07:16,890
OK, so back over here and we'll find Holmgren right there.

92
00:07:18,570 --> 00:07:24,620
And at this point, I'll duplicate this line and change that to users.

93
00:07:24,630 --> 00:07:38,100
Log in and change this to log in a user and I go back here and refresh this and we have log in to user

94
00:07:38,370 --> 00:07:39,060
and back.

95
00:07:39,450 --> 00:07:40,440
And that's much cleaner.

96
00:07:41,520 --> 00:07:46,950
Now we can also, if we want to actually logging user out, which is an important route to have and

97
00:07:46,950 --> 00:07:49,260
we should have some indication that a user is logged in.

98
00:07:49,890 --> 00:07:51,600
So let's go back to our.

99
00:07:52,680 --> 00:08:00,600
Code and let's switch to the celebrities project, and let's look at our render function, which is

100
00:08:00,600 --> 00:08:01,140
right here.

101
00:08:05,070 --> 00:08:05,970
So at the very top.

102
00:08:07,410 --> 00:08:12,900
We have this value in our template data, and ultimately this is data that's shared with every template

103
00:08:12,900 --> 00:08:13,500
in the system.

104
00:08:13,980 --> 00:08:19,140
And the first one is is authenticated, which is a Boolean seems to me that's a value I could actually

105
00:08:19,140 --> 00:08:19,680
use.

106
00:08:20,810 --> 00:08:26,060
So let's go down to where we're rendering a page which is right here.

107
00:08:27,010 --> 00:08:29,960
So online, 54 in my code, that's the go page.

108
00:08:29,980 --> 00:08:30,910
Let's try the jet page.

109
00:08:32,460 --> 00:08:36,100
So in line 77, in my code, I declare a variable.

110
00:08:36,120 --> 00:08:37,380
That's an empty template.

111
00:08:37,680 --> 00:08:38,940
That's the type that it is.

112
00:08:39,360 --> 00:08:42,120
And if data is not equal to nil, then I populate that.

113
00:08:42,600 --> 00:08:47,190
But I want to add all of that default data that's in the title template data.

114
00:08:48,120 --> 00:08:50,490
To every request, if at all possible.

115
00:08:51,000 --> 00:08:53,760
So what I can do is go up here.

116
00:08:55,560 --> 00:09:00,780
And just after this function, I'll create a new function funk with the receiver.

117
00:09:00,810 --> 00:09:02,910
I've been calling the receiver C for some reason.

118
00:09:04,050 --> 00:09:11,250
A pointer to render and I'll create a function called default data, and it will take as parameters

119
00:09:11,430 --> 00:09:14,670
TD, which is a reference or a pointer to template data.

120
00:09:16,530 --> 00:09:25,050
And the request, which is a pointer to HTTP request and it returns a pointer to template data.

121
00:09:26,130 --> 00:09:28,980
And here's where I can add default data to every request.

122
00:09:29,430 --> 00:09:34,740
Now what I want to do here for my case right now is determine is to determine whether or not there's

123
00:09:34,740 --> 00:09:39,930
a value called user ID with a capital I and a Capital D in the session.

124
00:09:40,530 --> 00:09:41,350
Now can I do that?

125
00:09:41,430 --> 00:09:43,830
Let's see if we have access to the session from our receiver.

126
00:09:43,830 --> 00:09:47,950
See if C Dot session doesn't look like it's there.

127
00:09:47,970 --> 00:09:50,610
So let's go add session to our render package.

128
00:09:51,060 --> 00:09:59,460
So we'll scroll back up at the top and we'll add right in here session, which will be a pointer to

129
00:09:59,860 --> 00:10:03,420
us session manager right there and actually do the import for me.

130
00:10:03,420 --> 00:10:04,110
And it does.

131
00:10:06,420 --> 00:10:11,610
So now let's go back to Celebrity Stop, Go and populate this field session with our session.

132
00:10:11,850 --> 00:10:15,780
So first of all, save this to format it, then I'll go back to celebrities.

133
00:10:15,780 --> 00:10:16,440
Don't go.

134
00:10:16,920 --> 00:10:19,530
And I'll find the part where I create my ringer.

135
00:10:24,240 --> 00:10:27,590
Right here, create rent or create rent versus jump to that.

136
00:10:31,550 --> 00:10:37,490
And in there, let's put session and make that Seedat session.

137
00:10:38,090 --> 00:10:40,370
And that should be enough, so let's save this.

138
00:10:41,450 --> 00:10:43,130
Let's go back to render ago.

139
00:10:44,780 --> 00:10:49,730
And now that I have access to the session in my render package, I can do something as simple as this.

140
00:10:51,680 --> 00:11:02,720
If see, that session don't exists and we have to pass it the context, so it's our context and we're

141
00:11:02,720 --> 00:11:05,670
looking for user ID exactly like that.

142
00:11:05,690 --> 00:11:10,100
If that exists, then by default this user must be authenticated.

143
00:11:10,610 --> 00:11:15,110
So T dot is authenticated as equal to true.

144
00:11:17,090 --> 00:11:23,020
And now we just return to see now this function exists.

145
00:11:23,030 --> 00:11:30,740
If we go back down to our jet page after we have access to a TD variable, we can just do this.

146
00:11:32,200 --> 00:11:38,410
TD equals C Dot default data, and we handed it's two required functions or parameters TD.

147
00:11:38,830 --> 00:11:39,490
And a request.

148
00:11:42,460 --> 00:11:44,800
And presumably this should work.

149
00:11:45,070 --> 00:11:49,780
So before we leave this, is there anything else I can add up here in my default data?

150
00:11:49,810 --> 00:11:51,460
Well, we wanted it map.

151
00:11:53,280 --> 00:11:56,340
What else do we want in our default data, secure?

152
00:11:56,370 --> 00:11:57,240
Let's put that in there.

153
00:11:57,450 --> 00:12:04,770
So in order for secure or not to secure is equal, to see that secure, we can have that one.

154
00:12:06,970 --> 00:12:12,850
And say, Ted ServerName, we're going to need that at some point is equal to seat on ServerName.

155
00:12:12,940 --> 00:12:13,870
You may as well get it now.

156
00:12:15,130 --> 00:12:18,610
And the port to the port is equal to SeaTac Port.

157
00:12:21,010 --> 00:12:21,920
So this is done.

158
00:12:21,940 --> 00:12:28,870
Let's go back to our other code and go to our terminal and type go mud vendor.

159
00:12:28,990 --> 00:12:34,250
Make sure you're in the My App directory, of course, just to get the latest build of the celebrity

160
00:12:34,450 --> 00:12:34,840
code.

161
00:12:34,850 --> 00:12:37,810
So we have access to it and I'll hide my terminal window.

162
00:12:38,620 --> 00:12:44,080
And now right here where it says, go, build something awesome after that, I'll put it listed.

163
00:12:44,560 --> 00:12:45,010
If.

164
00:12:46,230 --> 00:12:48,090
Dot is authenticated.

165
00:12:50,550 --> 00:12:53,430
Make sure you spell it right and an end.

166
00:12:55,170 --> 00:13:06,240
So if someone is actually authenticated, let's do this small day trip equals slash user slash log out

167
00:13:06,840 --> 00:13:12,480
a route that doesn't exist yet, but we'll add it in a minute longer, and that will tell me that you're

168
00:13:12,480 --> 00:13:13,290
actually authenticated.

169
00:13:13,440 --> 00:13:18,150
And if you want to make it even clearer, we can do it like this authenticated

170
00:13:21,960 --> 00:13:26,880
and put a period after log out just so it looks a little bit better and close our small time.

171
00:13:28,260 --> 00:13:31,260
So let's restart our application and make restart.

172
00:13:35,850 --> 00:13:38,210
I'm sure it all compiles and it does.

173
00:13:38,850 --> 00:13:41,040
And let's go back to our web browser.

174
00:13:41,950 --> 00:13:43,050
Let's reload this page.

175
00:13:43,920 --> 00:13:47,580
OK, so I'm not a syndicated, which is not surprising because we're using cookie sessions.

176
00:13:47,820 --> 00:13:48,860
Let's log user in.

177
00:13:50,420 --> 00:13:51,480
And it is me.

178
00:13:51,480 --> 00:13:54,030
Add here dot com with the password password.

179
00:13:54,390 --> 00:13:55,320
Let's see if we got it right.

180
00:13:55,500 --> 00:13:55,950
Log in.

181
00:13:58,240 --> 00:14:03,100
And it says authenticated log out, so I'll try logging it, and it should give me a four or four file

182
00:14:03,100 --> 00:14:03,730
not found.

183
00:14:04,450 --> 00:14:05,830
And it does page not found.

184
00:14:06,040 --> 00:14:09,130
So let's go analog route, which is actually pretty trivial.

185
00:14:10,820 --> 00:14:20,150
So back to our code and let's hydrate terminal window and let's find our roots file, and let's add

186
00:14:20,150 --> 00:14:22,430
a logger, so I'll duplicate this.

187
00:14:23,360 --> 00:14:28,670
It will be a get request and we'll make this logo

188
00:14:32,000 --> 00:14:36,250
that doesn't exist yet and its users love it.

189
00:14:37,040 --> 00:14:39,500
So let's go create a logo, grid or handle.

190
00:14:40,310 --> 00:14:52,760
So here func with the receiver of H Pointer to handlers, and she's called Lugger with W HTP Dot Response

191
00:14:52,760 --> 00:14:57,740
Writer and her pointer to request.

192
00:15:00,830 --> 00:15:01,670
And this is trivial.

193
00:15:02,180 --> 00:15:03,620
It's always good practice.

194
00:15:04,360 --> 00:15:12,920
Anytime you're logging a user in or logging user to do something like this short app, not Session Dot

195
00:15:12,920 --> 00:15:13,610
Renew token.

196
00:15:16,520 --> 00:15:19,430
And that requires just the context and context.

197
00:15:20,300 --> 00:15:26,660
So we renew our token and then each dot app dot session dot remove.

198
00:15:26,990 --> 00:15:30,970
We remove panning at the context or context.

199
00:15:31,490 --> 00:15:35,780
And we want to remove user ID, which is what we put in when the user logged in.

200
00:15:35,990 --> 00:15:36,380
OK.

201
00:15:36,950 --> 00:15:39,890
And then we'll do a redirect back to the homepage or to the login page.

202
00:15:40,400 --> 00:15:41,160
Should be done.

203
00:15:41,210 --> 00:15:41,780
Redirect.

204
00:15:44,710 --> 00:15:50,770
And Redirect requires you and our response writer and request, and we'll take them to users, log in

205
00:15:52,150 --> 00:15:56,590
with the status HTP Dot status, see other, which is fine for our purposes.

206
00:15:57,280 --> 00:15:58,090
So let's try this out.

207
00:15:58,810 --> 00:16:01,360
Let's restart our application.

208
00:16:01,630 --> 00:16:02,380
Make restart.

209
00:16:07,910 --> 00:16:14,060
And let's go back to your Web browser and go back one screen and refresh this, and we should be logged

210
00:16:14,060 --> 00:16:17,900
out at this point because we're defaulting to cookie sessions and we'll take care of that before too

211
00:16:17,900 --> 00:16:18,200
long.

212
00:16:18,980 --> 00:16:19,730
So we're not logged in.

213
00:16:20,240 --> 00:16:31,280
Let's log in to user me here account password, log in and now try logging out, and it takes us back

214
00:16:31,280 --> 00:16:32,270
to the login screen.

215
00:16:32,450 --> 00:16:36,890
And if we go to the home screen, we shouldn't have that authenticated message and we don't.

216
00:16:37,130 --> 00:16:37,670
Perfect.

217
00:16:38,750 --> 00:16:41,780
So there now we can log your user in, we can log a user.

218
00:16:41,780 --> 00:16:46,190
And at this point, a lot of people, particularly people who haven't been developing for very long,

219
00:16:46,190 --> 00:16:48,500
would say, great, let's move on to the next step.

220
00:16:49,070 --> 00:16:58,490
The problem is that we've not actually verified that any of this code over here in users doggo user

221
00:16:58,490 --> 00:16:59,030
dgo.

222
00:16:59,480 --> 00:17:03,170
We haven't actually verified that any of this works or much of this works.

223
00:17:03,530 --> 00:17:08,660
We have managed to get a user by email so were relatively certain that that works and we've managed

224
00:17:08,660 --> 00:17:10,870
to actually compare a password.

225
00:17:10,880 --> 00:17:16,970
So we've done this one down here, password matches, but we've done very few of the other ones.

226
00:17:17,000 --> 00:17:22,280
And what I want to do now is to actually add some additional methods to this, to take care of tokens,

227
00:17:22,280 --> 00:17:23,120
for example.

228
00:17:23,780 --> 00:17:29,270
And then I want to write some tests and writing the tests for these functions because they're written

229
00:17:29,270 --> 00:17:30,820
using Upper Io.

230
00:17:31,340 --> 00:17:35,300
It's going to require that we do both unit tests, which are relatively straightforward, and we can

231
00:17:35,300 --> 00:17:37,970
do that using pretty much just the standard library.

232
00:17:38,570 --> 00:17:43,990
But we're also going to have to do integration tests because one of the disadvantages of upward slash

233
00:17:44,000 --> 00:17:51,680
db, the package we're using when we do things like this, creating a collection right here, creating

234
00:17:51,680 --> 00:17:56,860
collection, getting a result set, it actually doesn't handle a mock database connection.

235
00:17:56,870 --> 00:17:59,150
So we're going to need a live database connection.

236
00:17:59,210 --> 00:18:04,730
Now we could if we wanted to use the database that we're using for development, but I think a better

237
00:18:04,730 --> 00:18:05,330
approach.

238
00:18:05,570 --> 00:18:11,030
And actually, I'm sure it's a better approach is actually to write an integration test that spins up

239
00:18:11,030 --> 00:18:16,880
a Docker image with an empty Postgres database creates the necessary tables and so forth.

240
00:18:17,270 --> 00:18:20,930
And then we use that test database to run our integration tests.

241
00:18:21,050 --> 00:18:25,580
And if everything passes when we finish, we just get rid of that Docker image.

242
00:18:26,240 --> 00:18:31,390
Now, integration tests are a little bit more work, but they're actually fairly critical in our case,

243
00:18:31,400 --> 00:18:36,380
just to make sure that these functions we've written actually do what we think they do, and we'll get

244
00:18:36,380 --> 00:18:38,720
started on that in the next lecture or two.
