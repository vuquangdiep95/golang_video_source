1
00:00:01,090 --> 00:00:05,890
So let's try using the database connection we built in the last lecture.

2
00:00:06,070 --> 00:00:10,960
And right now I'm looking at celebrities don't go, and one thing we didn't do last time was populate

3
00:00:10,960 --> 00:00:17,620
this config struct with the database, a field of Typekit database config, and we probably should do

4
00:00:17,620 --> 00:00:17,820
that.

5
00:00:17,830 --> 00:00:19,180
It's pretty straightforward.

6
00:00:19,690 --> 00:00:25,600
So we'll just come down here in, we're in the file celebrities not go looking at the new function and

7
00:00:25,600 --> 00:00:28,270
down where we actually populate see dot config.

8
00:00:28,360 --> 00:00:29,350
We can do that really easily.

9
00:00:29,470 --> 00:00:32,020
We just put in here database.

10
00:00:32,980 --> 00:00:34,480
And of course, that's a type.

11
00:00:35,750 --> 00:00:39,260
Database config and we just populate its two two fields.

12
00:00:39,710 --> 00:00:42,760
So the first one is database.

13
00:00:43,250 --> 00:00:44,450
And of course, that's okay.

14
00:00:44,470 --> 00:00:46,490
Don't get on database type.

15
00:00:47,600 --> 00:00:54,860
And we want database and we may never need this, but it's nice to have the configuration values available

16
00:00:54,860 --> 00:00:55,670
if you need them.

17
00:00:56,360 --> 00:01:01,820
And the DSM, this is not the most efficient code in the world, but we can just call Cedar Bill DSM

18
00:01:01,970 --> 00:01:02,420
again.

19
00:01:02,600 --> 00:01:07,100
And I don't mind doing that because this will only fire once when the application starts up.

20
00:01:07,100 --> 00:01:09,410
So we'll just build a string again and stick it in there.

21
00:01:10,370 --> 00:01:12,940
OK, so that takes care of the changes in celebrities.

22
00:01:12,950 --> 00:01:13,610
Don't go.

23
00:01:13,640 --> 00:01:17,990
Let's switch over to my app and we'll do something right in the roots file.

24
00:01:18,080 --> 00:01:25,850
OK, so right here after our test sessions, let's put a temporary root in their Ader app.

25
00:01:25,850 --> 00:01:33,620
Dog roots don't get and we'll call it test database like that, and we'll have an inline function,

26
00:01:33,800 --> 00:01:37,280
which is bunk with the first parameter being our response.

27
00:01:37,280 --> 00:01:43,320
Writer W.H. Typekit, response writer Because we're just doing it in line handler here and our which

28
00:01:43,340 --> 00:01:45,320
a pointer to a beat up request.

29
00:01:46,850 --> 00:01:49,970
OK, so let's make this dead simple.

30
00:01:50,400 --> 00:01:55,370
And what we'll do is we'll query a table that doesn't exist yet, and we'll go and build that table

31
00:01:55,370 --> 00:01:57,200
manually in a couple of minutes.

32
00:01:57,410 --> 00:01:58,430
But let's do this right now.

33
00:01:58,430 --> 00:02:06,230
So we'll write a query and we'll say select ID and first name from users where ID equals one.

34
00:02:06,690 --> 00:02:10,430
OK, so that's a pretty good sample, and I got to put an assignment operator there.

35
00:02:12,440 --> 00:02:12,920
That's better.

36
00:02:14,870 --> 00:02:18,570
And now we'll simply get a row from the database.

37
00:02:18,590 --> 00:02:24,380
So we're going to use query row context, which is straight out of the sequel package built into the

38
00:02:24,380 --> 00:02:25,250
standard library.

39
00:02:26,270 --> 00:02:29,840
So we'll say row and check for error or assign the value of.

40
00:02:29,960 --> 00:02:32,650
And now we need to get access to our database pool.

41
00:02:32,660 --> 00:02:33,890
And of course, that's trivial now.

42
00:02:33,990 --> 00:02:40,370
Hey, which is from a receiver for application Typekit app and we don't want to open DB now that's the

43
00:02:40,370 --> 00:02:41,510
celebrities type.

44
00:02:42,110 --> 00:02:45,500
And now we want DB and we want pool.

45
00:02:46,160 --> 00:02:49,970
And from that, we just call query context, query row context.

46
00:02:50,690 --> 00:02:51,020
OK.

47
00:02:52,220 --> 00:02:52,970
So from that?

48
00:02:54,390 --> 00:02:57,090
I think there's only one return value from that, but we'll check in a minute.

49
00:02:57,120 --> 00:03:00,480
We it the context, correct context, and we had a query.

50
00:03:01,770 --> 00:03:04,800
And of course, this only gives one value back.

51
00:03:05,040 --> 00:03:08,060
OK, so we look at query row context.

52
00:03:08,070 --> 00:03:10,260
It's return value is a sequel row.

53
00:03:11,280 --> 00:03:17,100
And now we say error is a sign, the value of road scan and we'll scan into two variables.

54
00:03:17,190 --> 00:03:18,240
So let's create those variables.

55
00:03:18,240 --> 00:03:23,820
Just a place to hold these things very ID of Typekit and very name of type string.

56
00:03:24,750 --> 00:03:31,230
And we'll scan from that row into I.D. and name and we'll check for an error.

57
00:03:32,070 --> 00:03:41,430
And we'll say if error is not equal to nil, then we'll just say a Dot app dot error log dot print line.

58
00:03:42,750 --> 00:03:44,970
The error will return.

59
00:03:45,900 --> 00:03:48,910
Otherwise, let's just write this information to the screen, to the browser window.

60
00:03:48,930 --> 00:03:55,890
It won't be pretty, but it will show us that it works format dot f print f and we'll give it the response

61
00:03:55,890 --> 00:04:02,340
writer and a format string that holds an integer and a string and put in it the next.

62
00:04:03,660 --> 00:04:08,950
OK, now this will work as soon as we go and create a file or a value in our database.

63
00:04:08,970 --> 00:04:10,600
So let me make sure I have that running.

64
00:04:10,620 --> 00:04:11,670
I don't think that I do.

65
00:04:11,670 --> 00:04:12,540
I'm not sure.

66
00:04:14,340 --> 00:04:17,610
So let's try make start compose.

67
00:04:20,290 --> 00:04:21,250
They're already running, I guess.

68
00:04:21,760 --> 00:04:22,690
Sounds like it, anyway.

69
00:04:22,720 --> 00:04:29,980
Let's go connect, so I'll go to my favorite database client, which happens to be this one, and I'm

70
00:04:29,980 --> 00:04:34,020
connected to celebrities Docker and there's the database.

71
00:04:34,060 --> 00:04:40,210
So let's create a template or create a table, which I'll call users if that's what I specified in my

72
00:04:40,360 --> 00:04:41,500
my query.

73
00:04:42,040 --> 00:04:48,670
It'll have one column ID there, and then we'll add another column and I called it first name

74
00:04:52,480 --> 00:04:54,100
and text is fine for our purposes.

75
00:04:54,130 --> 00:05:00,820
OK, so let's save this and let's go to the content for this and put a row in there.

76
00:05:02,020 --> 00:05:05,710
And the first name is Trevor, and I'll let the database handle setting the ID.

77
00:05:06,220 --> 00:05:07,090
Let's save this.

78
00:05:07,750 --> 00:05:13,240
Now I have one room, so I should be able to come here and say, make start.

79
00:05:13,600 --> 00:05:15,700
And if we didn't have any typos, you should start out.

80
00:05:18,200 --> 00:05:19,910
It's already starting, so it's mixed up.

81
00:05:21,930 --> 00:05:22,710
And make start.

82
00:05:25,500 --> 00:05:26,070
It's listening.

83
00:05:26,100 --> 00:05:32,580
Let's go to our web browser and try going to the URL slash test dash database and see if we got it right.

84
00:05:34,170 --> 00:05:42,300
So create a new browser window and go to localhost 4000 slash test database and one and Trevor.

85
00:05:42,330 --> 00:05:43,290
So that worked really well.

86
00:05:43,410 --> 00:05:49,620
OK, now the last thing I want to do in this lecture before we make this a little bit better is to go

87
00:05:49,620 --> 00:05:55,680
back to celebrities and make sure we explicitly close the database connections.

88
00:05:56,250 --> 00:06:02,370
So of course, we're going to do that in the celebrity start go file and we can do it right here on

89
00:06:02,370 --> 00:06:04,020
listen and serve.

90
00:06:04,680 --> 00:06:09,040
So this is a function listen and serve that actually starts the the web server.

91
00:06:09,510 --> 00:06:12,180
And of course, we're listening here and we're checking for an error.

92
00:06:12,220 --> 00:06:12,970
Something goes wrong.

93
00:06:13,260 --> 00:06:22,850
But right here, after we declare this serve variable of type HDTV server, let's just say defer c db

94
00:06:23,010 --> 00:06:25,740
dot pool and we'll call close.

95
00:06:26,880 --> 00:06:31,050
So there, when we stop our application, this function will stop.

96
00:06:31,050 --> 00:06:34,380
And as soon as that function stops, we've deferred closing of the database.

97
00:06:34,800 --> 00:06:36,510
And that makes things ever so much cleaner.

98
00:06:37,470 --> 00:06:45,990
Now, obviously, if we go back to my app and we look at that inline route here, this works really

99
00:06:45,990 --> 00:06:46,230
well.

100
00:06:46,410 --> 00:06:51,330
And I love writing Ross sequel, and I love having absolute control over the way that I interact with

101
00:06:51,330 --> 00:06:51,960
my database.

102
00:06:52,290 --> 00:06:56,310
But of course, we're trying to write rewrite a version of Laravel in Go.

103
00:06:57,000 --> 00:07:04,590
And one of the big attractions of Laravel to be developers is the fact that it has an object relational

104
00:07:04,590 --> 00:07:09,240
mapper, an aura that makes interacting with the database ever so much easier.

105
00:07:09,810 --> 00:07:14,130
Well, don't worry, we're going to support sequel like this for people who understand people really

106
00:07:14,130 --> 00:07:18,720
well and are comfortable using it and have want to have, like I do, complete control.

107
00:07:19,470 --> 00:07:25,620
But we will implement something that makes interacting with databases a lot easier, that it removes

108
00:07:25,620 --> 00:07:28,530
your abstract shoo away from writing sequel by hand.

109
00:07:28,560 --> 00:07:31,520
So we'll support both approaches just like Laravel does.

110
00:07:31,530 --> 00:07:37,470
They permit RON database queries and transactions as well and will do precisely the same thing.

111
00:07:37,890 --> 00:07:38,820
All right, let's move on.
