1
00:00:01,440 --> 00:00:07,230
So we're almost ready to start working on this function in the mail, don't go file in the mail or folder

2
00:00:07,230 --> 00:00:08,700
in the celebrities project.

3
00:00:08,700 --> 00:00:11,580
And the function, of course, is send a strong message.

4
00:00:12,450 --> 00:00:16,860
And in order to make that as easy as possible, I'm going to install a few packages.

5
00:00:17,100 --> 00:00:19,950
So let me go to my web browser and show you the packages I'm on solo.

6
00:00:20,850 --> 00:00:22,410
So over we go to Firefox.

7
00:00:22,560 --> 00:00:27,390
The first one is go simple mail, and this is an easy way to send mail.

8
00:00:27,660 --> 00:00:33,150
OK, so we're going to install that and that basically creates a mail client, allows us to send mail

9
00:00:33,150 --> 00:00:35,250
at attachments and do all the nice things.

10
00:00:35,250 --> 00:00:38,770
It's very, very well written and it's very easy to use.

11
00:00:38,790 --> 00:00:43,380
So we'll install that and we're also going to install this go.

12
00:00:43,380 --> 00:00:51,840
Primarily what that does is it takes any styling that exists in a HTML email message and enlightens

13
00:00:51,840 --> 00:00:52,670
the CSX.

14
00:00:52,680 --> 00:00:57,480
And that makes it ever so much more readable on a wide variety of email clients.

15
00:00:57,840 --> 00:01:03,210
And a third one is a package that just came out earlier this year, and it's a very good package.

16
00:01:03,600 --> 00:01:11,370
It's actually called Go Mail, and it allows us to send email using mail, gun and Spark Post and one

17
00:01:11,370 --> 00:01:14,220
other third party email client or email API.

18
00:01:14,700 --> 00:01:16,400
So we're going to install these three packages.

19
00:01:16,440 --> 00:01:18,660
So let's go get the first one right down here.

20
00:01:19,260 --> 00:01:21,540
This is go mail and to install it.

21
00:01:22,620 --> 00:01:23,640
We use this.

22
00:01:23,820 --> 00:01:25,680
And again, I'm using version two.

23
00:01:25,950 --> 00:01:28,510
So use version to version three is out.

24
00:01:28,530 --> 00:01:30,660
Wait until the course is over and then upgrade it.

25
00:01:31,890 --> 00:01:39,730
So back to my ID and I'm in the silver tax package, so I'll open my terminal and go get simple mail.

26
00:01:39,750 --> 00:01:40,440
Version two.

27
00:01:43,080 --> 00:01:44,070
So that's available to me.

28
00:01:44,340 --> 00:01:46,500
Let's go back to our web browser and get the inline.

29
00:01:47,670 --> 00:01:52,980
So we're going to get the Go Pre mailer package and here's the code necessary to go get it or the command

30
00:01:52,980 --> 00:01:53,970
necessary to go get it.

31
00:01:53,970 --> 00:01:54,970
So a copy that.

32
00:01:55,920 --> 00:01:58,530
And go back to my idea and paste it in the terminal.

33
00:02:03,670 --> 00:02:08,440
And that gets that, and we may as well install the API one, we will be using it for a little while,

34
00:02:08,450 --> 00:02:09,670
but let's get it anyway.

35
00:02:10,180 --> 00:02:17,590
So down here he must have there's the command to install it, so I'll copy this and paste it in.

36
00:02:29,950 --> 00:02:31,790
They're all the packages are installed.

37
00:02:31,810 --> 00:02:32,950
So let's start using them.

38
00:02:33,190 --> 00:02:38,610
And of course, we're going to be working initially in this send SMTP message bit.

39
00:02:39,520 --> 00:02:45,280
So the very first thing I'm going to do in this function is generate the plaintext and formatted versions

40
00:02:45,280 --> 00:02:45,880
of our message.

41
00:02:46,090 --> 00:02:52,150
So I'll create a variable formatted message and potentially an error.

42
00:02:52,480 --> 00:02:57,420
They're assigned the values given by Dot Build email message.

43
00:02:57,430 --> 00:03:00,190
And I just understand that message and I check for an error.

44
00:03:00,460 --> 00:03:02,080
If error is not equal to nil.

45
00:03:02,320 --> 00:03:07,350
Then I'll return the error and we do the same thing for plain text.

46
00:03:07,360 --> 00:03:16,660
So I'll call this one plain message and error, or assign values from M Dot and build plain text message

47
00:03:16,660 --> 00:03:17,710
and hand it message.

48
00:03:19,180 --> 00:03:21,850
And again, I'll copy and paste my error check.

49
00:03:24,530 --> 00:03:30,290
So now I have the necessary HTML version of my message and the plain text version of my message.

50
00:03:31,040 --> 00:03:34,760
And here's where we start using our mailer package.

51
00:03:35,450 --> 00:03:39,320
So to do that, the first thing I'm going to do is create a mail server.

52
00:03:39,530 --> 00:03:47,630
Server is assigned the value of mail, and I'm going to get it from make sure you get the right package

53
00:03:47,630 --> 00:03:47,930
here.

54
00:03:50,190 --> 00:03:54,330
Well, let's actually go over and look at the documentation and see how it's supposed to be initialized

55
00:03:54,330 --> 00:03:55,020
or used.

56
00:03:55,890 --> 00:04:00,000
So back to simple male analyst, look at the usage down here.

57
00:04:01,080 --> 00:04:08,160
So they're importing ghosts, simple male and they create that by using male SMTP client.

58
00:04:08,550 --> 00:04:09,460
Now that's interesting.

59
00:04:09,480 --> 00:04:14,010
Go simple mail is the import and mail is what we're using down here.

60
00:04:14,070 --> 00:04:15,540
Well, let's just try it and see what happens.

61
00:04:16,710 --> 00:04:21,240
So mail dart and what I'm supposed to be calling here.

62
00:04:22,490 --> 00:04:27,800
Is new SMTP client assume top client and there it is right there.

63
00:04:27,890 --> 00:04:29,630
OK, so new A.P. Client.

64
00:04:33,870 --> 00:04:36,630
And now we set its values and we need to set what?

65
00:04:36,660 --> 00:04:44,160
Host, we're going to use a server to host will be equal to AMD or host from our receiver.

66
00:04:44,960 --> 00:04:46,410
We scroll up a little bit here.

67
00:04:47,040 --> 00:04:53,040
We want to set the port server port will be equal to the port.

68
00:04:55,020 --> 00:05:01,920
In the area I'm getting is that port is of type string as an invaluable.

69
00:05:03,420 --> 00:05:04,650
So let's go back up here.

70
00:05:06,450 --> 00:05:08,130
And change court to an aunt.

71
00:05:12,920 --> 00:05:15,740
And then we go back down to our S&amp;P looks better.

72
00:05:16,850 --> 00:05:24,830
So any of the username and password server dot username is equal to M Dot username and server password

73
00:05:27,950 --> 00:05:29,750
is equal to AMD password.

74
00:05:31,670 --> 00:05:37,580
We'll also need the encryption server encryption is equal to DOT encryption.

75
00:05:38,630 --> 00:05:45,140
Now it's giving us an error here, and the error is cannot use Imdad encryption of type string as.

76
00:05:45,140 --> 00:05:49,180
And then it looks like this mail package wants its own encryption type.

77
00:05:49,190 --> 00:05:53,420
So we'll comment that out right now and come back to it and we'll write a function that converts our

78
00:05:53,420 --> 00:05:56,090
encryption of type string into the appropriate type.

79
00:05:57,560 --> 00:06:01,700
And I'll just specify, specify some other default server, don't keep alive.

80
00:06:01,820 --> 00:06:09,500
It's possible to keep this server alive, and I'm going to say false because you can read about that

81
00:06:09,500 --> 00:06:10,810
and said it true if you want to.

82
00:06:10,820 --> 00:06:15,850
But I don't see any value in keeping a connection to the mail server alive at all times.

83
00:06:17,270 --> 00:06:22,820
We'll put it give it some timeouts, server connect timeout, then I'll make that equal to say 10 seconds,

84
00:06:22,820 --> 00:06:24,740
ten times timed at second.

85
00:06:27,260 --> 00:06:31,280
And we also want to send timeout server to send timeout.

86
00:06:31,530 --> 00:06:35,480
We'll make that equal to say 10 seconds as well, 10 times time dot second.

87
00:06:36,170 --> 00:06:37,580
Those seem like reasonable values.

88
00:06:38,480 --> 00:06:40,730
OK, let's go back and look at this encryption.

89
00:06:42,230 --> 00:06:49,420
Well, uncomment this, and what I'll do is call a function that I'm going to write in a moment, indeed.

90
00:06:49,970 --> 00:06:51,920
Get encryption

91
00:06:56,270 --> 00:06:59,060
and I'll pass my encryption string as a parameter.

92
00:06:59,240 --> 00:07:01,610
OK, so I'll come down here.

93
00:07:01,710 --> 00:07:09,620
We'll just put it right after this function, funk with the receiver of M Pointer to mail and I'll call

94
00:07:09,620 --> 00:07:16,640
it, get encryption and it's not exported and it takes a string as a parameter and it will return the

95
00:07:16,640 --> 00:07:18,200
type mail dot encryption.

96
00:07:20,150 --> 00:07:22,020
And this is something that's easy to look it up.

97
00:07:22,100 --> 00:07:29,480
Basically, there are some constants in the mail package one for start TELUS, one for SSL, one for

98
00:07:29,480 --> 00:07:31,190
no encryption, so on and so forth.

99
00:07:31,640 --> 00:07:33,410
So we'll just put a simple switch statement here.

100
00:07:33,590 --> 00:07:33,950
OK.

101
00:07:34,640 --> 00:07:36,920
And of course, it's going to take one argument.

102
00:07:37,100 --> 00:07:42,770
I'll call it e for a string need to give a parameters, and I'll just put a switch statement and switch

103
00:07:42,770 --> 00:07:43,400
on E

104
00:07:46,730 --> 00:07:48,050
and we'll give the various cases.

105
00:07:48,050 --> 00:07:53,180
And the cases will be the sorts of things that people enter into the mail configuration in the data

106
00:07:53,180 --> 00:07:53,690
on file.

107
00:07:53,700 --> 00:07:58,590
So first one case Telus and the vast majority of cases in production.

108
00:07:58,610 --> 00:08:00,410
This is the one they're probably going to use.

109
00:08:00,730 --> 00:08:04,670
All we have to do is return mail dot encryption.

110
00:08:04,670 --> 00:08:06,800
Start Telus right there.

111
00:08:07,340 --> 00:08:11,490
OK, then we'll have a case for a second option SSL.

112
00:08:11,720 --> 00:08:19,370
Some people use that we'll return mail, dot encryption, SSL and other cases.

113
00:08:19,370 --> 00:08:21,610
No encryption case.

114
00:08:21,620 --> 00:08:22,070
None.

115
00:08:22,250 --> 00:08:28,080
We use that in development all the time and we'll return mail dot encryption.

116
00:08:28,080 --> 00:08:28,430
None.

117
00:08:31,550 --> 00:08:35,390
And the default, we need to have a default case.

118
00:08:35,390 --> 00:08:36,440
They don't specify anything.

119
00:08:36,470 --> 00:08:42,860
I'm going to assume that if they're not using not specifying it, the chances are they want Telus.

120
00:08:42,860 --> 00:08:50,110
So I'll return mail dot encryption start Telus right there.

121
00:08:50,480 --> 00:08:53,060
And you can use whatever you want there, but this should do the trick.

122
00:08:53,810 --> 00:09:01,550
So now we have all the basic parameters set on our server, so now we need to create a client to connect

123
00:09:01,550 --> 00:09:02,240
to that server.

124
00:09:02,450 --> 00:09:08,750
We described the server with the server variable and we'll create a client called SMTP client and check

125
00:09:08,750 --> 00:09:15,200
for an error by calling Server Connect, and we check for an error.

126
00:09:15,860 --> 00:09:18,890
If error is not equal to nil, just return the error.

127
00:09:21,830 --> 00:09:25,380
Otherwise, we can start using this client to send a message.

128
00:09:25,400 --> 00:09:31,820
So let's build a mail message that we're going to send using that client by connecting to that server.

129
00:09:32,060 --> 00:09:32,390
OK.

130
00:09:32,900 --> 00:09:34,970
So I'll create an email message called email

131
00:09:37,760 --> 00:09:41,180
and that will be assigned the value of mail, the package.

132
00:09:41,180 --> 00:09:48,590
We just imported new message, which takes no parameters and a better spell email, right?

133
00:09:48,620 --> 00:09:49,970
Otherwise, I'm going to have problems.

134
00:09:53,360 --> 00:09:58,730
So let's set some values in this email dot set from.

135
00:09:59,600 --> 00:10:02,750
And that, of course, will be mzgee from.

136
00:10:03,980 --> 00:10:06,830
And this is using a chain of all methods.

137
00:10:07,370 --> 00:10:10,490
So I'll put a dot there, and just to make it readable, I'll go in the next line.

138
00:10:12,880 --> 00:10:16,900
And two to whom does the message go?

139
00:10:17,470 --> 00:10:18,550
Message two?

140
00:10:19,600 --> 00:10:23,890
And then a dot and then on the next line set subject.

141
00:10:24,670 --> 00:10:26,620
And of course, that's message dark subject.

142
00:10:28,680 --> 00:10:33,450
So that's the basic information we know who it's from, who it's going to and what the subject is.

143
00:10:33,480 --> 00:10:34,470
Now let's add the body.

144
00:10:35,730 --> 00:10:42,390
So of course, we have two bodies to add emailed set Marty and the first one will be of type and this

145
00:10:42,390 --> 00:10:49,260
is a constant for the male package mailed out text html and we're going to put in formatted message.

146
00:10:52,240 --> 00:10:57,010
And the second one is an alternative body emailed and alternative.

147
00:10:58,120 --> 00:11:02,530
And this is of type mail dot text plain right there.

148
00:11:03,190 --> 00:11:04,570
And of course, that's plain message.

149
00:11:09,250 --> 00:11:12,460
Now the next thing we need to do is to check to see if there are any attachments.

150
00:11:12,460 --> 00:11:16,000
And of course, we're getting our attachment as a slice of strings.

151
00:11:16,120 --> 00:11:22,480
And what those the contents of that slice of strings would be, if any, is the full path name to the

152
00:11:22,480 --> 00:11:24,700
file we want to attach to the email message.

153
00:11:24,730 --> 00:11:36,400
So all we have to do is say, if the length of message dot attachments is greater than zero, then we'll

154
00:11:36,400 --> 00:11:41,380
go for ignore the index but pay attention to the individual attachment.

155
00:11:41,830 --> 00:11:47,410
Those are assigned the values of arranging through message board attachments

156
00:11:50,080 --> 00:11:56,050
and for each iteration through all we do is, say, email dot at attachment right there.

157
00:11:56,620 --> 00:12:03,280
X is all it requires is the full path name to the attachment, and I have my parentheses in the wrong

158
00:12:03,280 --> 00:12:04,720
spot here, which I often do.

159
00:12:08,790 --> 00:12:13,770
That's better, so once we've got all that done, it's actually time to try sending the message.

160
00:12:14,310 --> 00:12:18,800
So we'll say error is equal to the email out send.

161
00:12:19,410 --> 00:12:20,490
And we want to send.

162
00:12:21,440 --> 00:12:22,670
Using our S.m.

163
00:12:23,390 --> 00:12:24,110
T.P. client.

164
00:12:25,630 --> 00:12:28,510
And we'll check for an error if the error is not equal to nil.

165
00:12:29,620 --> 00:12:30,580
Then we'll return the error.

166
00:12:33,230 --> 00:12:40,370
Otherwise we return nil, so that should be if we get everything right, all of the logic necessary

167
00:12:40,370 --> 00:12:44,000
to actually send a message using an SMTP server.

168
00:12:44,930 --> 00:12:46,820
So let's go up here and see how this all works.

169
00:12:48,050 --> 00:12:53,870
So something comes into the channel or we call send SMTP message directly and we can do it either way,

170
00:12:54,350 --> 00:12:56,550
but we're going to assume that something comes into the channel.

171
00:12:56,570 --> 00:12:57,740
We try to send it.

172
00:12:58,070 --> 00:13:00,480
If we get no error, then we send back result.

173
00:13:00,500 --> 00:13:01,660
True and nil.

174
00:13:01,670 --> 00:13:04,460
Otherwise we send result, false and error.

175
00:13:04,730 --> 00:13:07,990
OK, so we're going have two ways of sending messages.

176
00:13:08,000 --> 00:13:08,660
We can use it.

177
00:13:09,020 --> 00:13:14,540
Do it by sending something right to the listener for mail function or sending it to the jobs channel,

178
00:13:14,540 --> 00:13:18,020
which is part of our overall mail type.

179
00:13:18,230 --> 00:13:21,050
Or we can call send SMTP message directly.

180
00:13:21,350 --> 00:13:21,740
All right.

181
00:13:22,430 --> 00:13:28,490
Now one last thing I want to do here since we installed the package already is when we're building that

182
00:13:28,760 --> 00:13:32,810
HTML message down here, we want to.

183
00:13:33,020 --> 00:13:39,620
After we get this string, we want to use that csv inline that we had imported at the beginning of this

184
00:13:39,620 --> 00:13:40,070
lecture.

185
00:13:40,190 --> 00:13:43,130
So what we'll do is create a function that does that for us.

186
00:13:43,220 --> 00:13:43,610
OK.

187
00:13:44,000 --> 00:13:47,270
So I'll just put it down at the bottom here or at the bottom.

188
00:13:48,920 --> 00:13:51,610
Create a function with the receiver of imported email.

189
00:13:52,350 --> 00:13:53,910
I will not export it.

190
00:13:53,930 --> 00:13:55,910
I'll just call it inline CC.

191
00:13:56,480 --> 00:14:02,870
And that's going to take string, which I'll call as it's going to return potentially a string and potentially

192
00:14:02,870 --> 00:14:03,230
an error.

193
00:14:04,160 --> 00:14:05,750
And it's really easy to use this package.

194
00:14:06,230 --> 00:14:10,880
So the first thing we do is need to set up some options for our pre mailer because that's what the package

195
00:14:10,880 --> 00:14:12,230
is called so options.

196
00:14:12,350 --> 00:14:14,900
And you can read about this in the documentation, but it's pretty simple.

197
00:14:15,380 --> 00:14:18,590
It's pre mailer dot options.

198
00:14:19,790 --> 00:14:21,050
We just populate its fields.

199
00:14:21,320 --> 00:14:25,100
So I'm going to say that I want to remove classes.

200
00:14:25,100 --> 00:14:28,540
If there are any CSS classes in there, I'll say that's got them in there.

201
00:14:28,550 --> 00:14:29,390
It's not going to hear anything.

202
00:14:30,140 --> 00:14:32,900
And I'm going to say CIUSSS two attributes.

203
00:14:33,320 --> 00:14:34,940
I'll make that false as well.

204
00:14:35,180 --> 00:14:35,540
OK.

205
00:14:37,250 --> 00:14:44,720
And finally, I'm going to say keep Bhengu important, the exclamation that says, use this regardless

206
00:14:44,720 --> 00:14:48,680
as to what any other CSC directive it happens to be, and I'll make that true.

207
00:14:51,120 --> 00:14:52,600
OK, so I have my options.

208
00:14:52,620 --> 00:15:00,360
I'm going to call those options plural, and I will say Primm for pre mailer and check for an error.

209
00:15:00,540 --> 00:15:06,810
They come from pre mailer, new pre miller from string right there.

210
00:15:06,810 --> 00:15:08,790
Because we're receiving our parameter is a string.

211
00:15:09,180 --> 00:15:10,440
And we handed our string.

212
00:15:10,440 --> 00:15:18,420
We want a format or process and a reference to options, and we check for an error if error is not equal

213
00:15:18,420 --> 00:15:18,870
to no.

214
00:15:19,710 --> 00:15:22,650
And we return an empty string and the error.

215
00:15:24,720 --> 00:15:28,830
And now we'll create some HTML new HTML.

216
00:15:28,860 --> 00:15:33,630
I'm just going to call it HTML, and we'll check for an error and we call KREM that variable, which

217
00:15:33,630 --> 00:15:36,460
is declared on line 174 transform.

218
00:15:37,800 --> 00:15:39,990
And again, we check for an error, so I'll copy and paste.

219
00:15:44,190 --> 00:15:51,300
But if we get past that, then everything is good will return HTML and nil.

220
00:15:52,350 --> 00:15:53,820
So now I'm going to have this function.

221
00:15:53,910 --> 00:16:03,990
I can go back up here where I'm building my HTML message and just say formatted message and potentially

222
00:16:03,990 --> 00:16:08,070
an error are now equal to from a receiver.

223
00:16:08,070 --> 00:16:14,640
M will inline the CC and hand it formatted message and we'll check for an error.

224
00:16:14,790 --> 00:16:22,440
So if error is not equal to nil, then we'll return nothing and the error.

225
00:16:23,190 --> 00:16:29,010
Otherwise, we've inclined our CC, which will make the mail much more readable on a wider variety of

226
00:16:29,010 --> 00:16:29,880
email clients.

227
00:16:30,960 --> 00:16:32,550
OK, that's enough for this time around.

228
00:16:32,730 --> 00:16:39,570
In the next lecture, we'll start looking at how we actually use third party APIs like Spark Post or

229
00:16:39,570 --> 00:16:42,600
Mail Gun or SendGrid, and those are the three we're going to support.

230
00:16:43,290 --> 00:16:45,300
So we'll get started on that in the next lecture.
