1
00:00:01,040 --> 00:00:04,620
So we have our usual cider package complete, and now it's time to use it.

2
00:00:04,700 --> 00:00:08,660
So let's think about what we're going to have to do here in our stash.

3
00:00:08,660 --> 00:00:15,230
Handlers don't go in with my AMP project in the post for Forgot Handler, which is just currently an

4
00:00:15,230 --> 00:00:15,860
empty handler.

5
00:00:16,730 --> 00:00:20,490
So the first thing we're going to have to do is write some comments so we can think it through here.

6
00:00:20,630 --> 00:00:26,060
We're going to have to pass the form which you always should do any time you receive a post requesting

7
00:00:26,060 --> 00:00:26,540
a handler.

8
00:00:26,630 --> 00:00:28,160
So we're obviously going to have to do that.

9
00:00:28,640 --> 00:00:36,740
Then we're going to have to verify that supplied email exists because if it's not in our system, then

10
00:00:36,740 --> 00:00:37,730
we don't want to go any further.

11
00:00:38,000 --> 00:00:38,390
OK.

12
00:00:39,530 --> 00:00:45,520
And then we need to create a link, create a link to password reset form.

13
00:00:45,800 --> 00:00:52,160
OK, and that's going to have to start with a ship or a GPS and then our server name and then some URL.

14
00:00:52,280 --> 00:00:57,120
It'll probably be something like slash users slash reset dash password.

15
00:00:57,140 --> 00:00:57,410
Right?

16
00:00:58,340 --> 00:01:02,600
And then we're going to have to sign each sign the link, sign the link.

17
00:01:04,580 --> 00:01:11,690
And finally, we're going to want to email the message and redirect the user.

18
00:01:13,310 --> 00:01:16,670
So those are the steps we're going to have to follow in this handler.

19
00:01:17,630 --> 00:01:24,050
Now, the one that's troubling me right now is the one where we have to create a link to password reset

20
00:01:24,050 --> 00:01:28,100
form because we actually don't have the address for our server.

21
00:01:28,310 --> 00:01:34,100
It's nowhere in our configuration whatsoever if we open our own file, so you open up and look inside

22
00:01:34,100 --> 00:01:34,610
of here.

23
00:01:35,330 --> 00:01:42,170
We have a server name, but there's no HDP anywhere except down here for the Maler URL, so we're going

24
00:01:42,170 --> 00:01:43,370
to have to supply that.

25
00:01:43,430 --> 00:01:49,970
So let's put a value right here at the top of our applications on file and I'll call it app underscore

26
00:01:49,980 --> 00:01:57,800
URL and that will be equal to, in my case, HTP colon slash slash local host park four thousand like

27
00:01:57,800 --> 00:01:58,100
that.

28
00:01:58,460 --> 00:01:59,960
So we have that anywhere.

29
00:02:00,500 --> 00:02:05,550
Now, of course, we need to put that somewhere in our app variable for our handlers.

30
00:02:05,570 --> 00:02:07,370
In other words, these celebrities type.

31
00:02:07,490 --> 00:02:09,920
So let's switch over to our celebrities project.

32
00:02:10,430 --> 00:02:18,050
And in here, I'll open up, say celebrities that go wherever that is there is, and I'm going to create

33
00:02:18,050 --> 00:02:25,490
another type here or call it type server and make it a struct, and I'll give it some fields.

34
00:02:26,240 --> 00:02:30,590
So we'll have, for example, server name and that will be a string.

35
00:02:31,970 --> 00:02:38,210
And we may also keep track of the pork, which will also be a string.

36
00:02:39,380 --> 00:02:41,210
And are we using a GPS?

37
00:02:41,270 --> 00:02:42,680
So is it secure or not?

38
00:02:42,840 --> 00:02:44,450
And that, of course, will be a Boolean.

39
00:02:46,050 --> 00:02:48,010
And finally, what's the URL to our server?

40
00:02:48,020 --> 00:02:49,430
And that's the one we need right now.

41
00:02:49,580 --> 00:02:50,330
That'll be a string.

42
00:02:50,690 --> 00:02:51,050
OK.

43
00:02:52,070 --> 00:02:59,330
So let me save that, and then I'll add the server type, which I'll call server of type server right

44
00:02:59,330 --> 00:03:01,220
to sell our TOS, and I'll save that.

45
00:03:02,750 --> 00:03:04,040
Now, of course, I want to populate it.

46
00:03:05,180 --> 00:03:07,640
So let's go down to where we're populating our variable.

47
00:03:09,200 --> 00:03:14,870
And right here, after I do the config part, let me set secure equals true.

48
00:03:14,900 --> 00:03:17,280
I'll just create a variable local variable called secure.

49
00:03:17,300 --> 00:03:23,600
It will default to true, and then I'll check in the dot on the file to see if secure is false.

50
00:03:23,900 --> 00:03:26,960
So I'll say if strings start to load.

51
00:03:29,290 --> 00:03:34,450
And I'll call Oast don't get arms and they'll look for secure.

52
00:03:34,540 --> 00:03:36,430
If you check your dot on file, that's in there.

53
00:03:37,630 --> 00:03:39,640
If that is equal to false.

54
00:03:39,670 --> 00:03:40,450
Exactly.

55
00:03:40,840 --> 00:03:42,520
So it can be uppercase or lowercase.

56
00:03:42,520 --> 00:03:46,000
But as long as it's the word false, then I'll set secure equal to false.

57
00:03:49,240 --> 00:03:53,250
Now that I have that value, I can say C2 server.

58
00:03:53,260 --> 00:03:59,530
The type we just added to celebrities is equal to the type server and we just fill in its fields.

59
00:04:00,220 --> 00:04:09,760
So we have server name and that's going to be asked get ons and we're looking for server underscore

60
00:04:09,760 --> 00:04:10,150
name.

61
00:04:13,580 --> 00:04:17,190
And we want the port to be equal to us.

62
00:04:17,210 --> 00:04:17,780
Don't get on.

63
00:04:19,670 --> 00:04:20,390
Try that again.

64
00:04:22,790 --> 00:04:25,020
Get on hard.

65
00:04:27,750 --> 00:04:29,700
And secure is just secure.

66
00:04:32,280 --> 00:04:35,580
And the URL is now of equal to us.

67
00:04:35,670 --> 00:04:36,480
Don't get on.

68
00:04:37,260 --> 00:04:45,660
And we just added up underscore if you are up there now, I have a means of getting the valid URL to

69
00:04:45,660 --> 00:04:47,550
my server right from the dot on file.

70
00:04:47,640 --> 00:04:48,060
Perfect.

71
00:04:48,780 --> 00:04:53,850
So let's switch back to our other application and close this dot on file.

72
00:04:54,280 --> 00:04:55,770
Go back to our handlers.

73
00:04:56,520 --> 00:05:02,090
And now, just to make sure that my local copy of Celebrities in the vendor folder is the latest version,

74
00:05:02,100 --> 00:05:05,190
I'll open a terminal window and take Gomaa defender.

75
00:05:07,070 --> 00:05:11,570
And sometimes when you Typekit go mad vendor, as I'm sure you've noticed, it takes a little bit for

76
00:05:11,600 --> 00:05:16,580
visual studio code to catch up to you, but will forge ahead in any case.

77
00:05:16,720 --> 00:05:18,260
I hope it catches up to us pretty quickly.

78
00:05:19,430 --> 00:05:20,780
So this is what we need to do.

79
00:05:21,170 --> 00:05:22,760
Our first step is to pass the form.

80
00:05:22,970 --> 00:05:23,490
That's easy.

81
00:05:23,540 --> 00:05:24,380
We know how to do that.

82
00:05:24,860 --> 00:05:27,510
Here is a sign of the value of our passport.

83
00:05:30,830 --> 00:05:37,090
And if there's an error, if it's not equal to nil, then we'll just do something appropriate here.

84
00:05:37,100 --> 00:05:40,430
We'll say each short app got error status.

85
00:05:41,360 --> 00:05:46,460
And of course, it's catching up to meet its error status while just putting error status and say.

86
00:05:47,580 --> 00:05:57,210
W and HIV status, bad request, something went wrong, OK, and I'll return, but assuming I got past

87
00:05:57,210 --> 00:06:02,520
that now, I need to get the email that was posted and verify that it's a valid user.

88
00:06:02,550 --> 00:06:08,190
So what I'll do is create a variable you type pointer to data dot user an empty user variable.

89
00:06:08,470 --> 00:06:13,290
OK, because I have to call a method on it and I'll get the email address that was supplied as part

90
00:06:13,290 --> 00:06:14,580
of the post request.

91
00:06:15,270 --> 00:06:18,450
Email is a sign the value of art form.

92
00:06:19,830 --> 00:06:20,490
Not yet.

93
00:06:22,740 --> 00:06:24,030
And I'm looking for email.

94
00:06:24,050 --> 00:06:25,410
We just got it steamed in the form.

95
00:06:26,730 --> 00:06:31,920
And at this point, I say you an error are assigned the value of no, they're not a sign, they're equal

96
00:06:31,920 --> 00:06:34,300
because I already have those variables equal to.

97
00:06:34,320 --> 00:06:38,490
You don't get my email and I had email.

98
00:06:40,710 --> 00:06:44,570
Now, if I can't find that user, then I'm going to get an error back, right?

99
00:06:44,580 --> 00:06:50,070
So I'll say if error is not equal to nil, then I'll do exactly the same thing.

100
00:06:50,160 --> 00:06:51,840
And of course, you can do whatever you want here.

101
00:06:51,850 --> 00:06:53,600
You can redirect the user back to the form.

102
00:06:53,610 --> 00:06:58,800
It's entirely up to you, but I'm going to put that in here just to get us going.

103
00:06:59,010 --> 00:06:59,340
OK.

104
00:07:01,530 --> 00:07:06,130
But if we have the user now, we need to create a link to the password reset form.

105
00:07:06,190 --> 00:07:11,460
Here's where we finally get around to using that URL sign or package we just created.

106
00:07:11,550 --> 00:07:15,730
So the first thing we need is a string to send off to it a link to our server.

107
00:07:15,750 --> 00:07:24,540
So I'll say a variable link is assign the value up from the format package as positive as print f and

108
00:07:24,540 --> 00:07:28,410
give it a format string, which will be starting with a string of some sort.

109
00:07:28,560 --> 00:07:34,900
We're going to substitute our URL in there and then I'll make the path to reset the password form users.

110
00:07:35,910 --> 00:07:42,750
Reset Dash password and then a question mark and then email is equal to another placeholder.

111
00:07:43,650 --> 00:07:49,470
And I substitute each Dot App Dot server, which is now available to me right there.

112
00:07:50,950 --> 00:07:51,360
Dot.

113
00:07:53,710 --> 00:07:54,250
URL, Earl.

114
00:07:56,710 --> 00:07:58,020
It looks like it hasn't found it yet.

115
00:07:58,800 --> 00:07:59,970
It was you, wasn't it?

116
00:08:00,780 --> 00:08:01,650
Yes, there caught it.

117
00:08:02,610 --> 00:08:04,560
And email is my second substitution.

118
00:08:05,910 --> 00:08:08,580
So now I have a link that I can send off to my signer.

119
00:08:08,730 --> 00:08:10,860
But of course, I can't just call the signer directly.

120
00:08:10,890 --> 00:08:15,840
First of all, I have to create a variable, so my variable will be signed and it's assigned the type

121
00:08:15,840 --> 00:08:18,150
of URL signer.

122
00:08:19,650 --> 00:08:20,580
Hopefully, they'll find that.

123
00:08:23,270 --> 00:08:26,720
Earl Sinar not left to import it manually, but that's OK.

124
00:08:27,050 --> 00:08:28,130
But I'm going to call Signer.

125
00:08:28,610 --> 00:08:29,630
That's the type I want.

126
00:08:31,870 --> 00:08:40,780
He did find it good and secret is the one feel that it has, and that requires nothing more than our

127
00:08:40,780 --> 00:08:41,540
encryption key.

128
00:08:41,570 --> 00:08:45,970
And I already have that dot at dot encryption key.

129
00:08:49,300 --> 00:08:50,680
So it didn't find the URL signer.

130
00:08:50,830 --> 00:08:51,550
That's no problem.

131
00:08:53,840 --> 00:08:54,260
That's better.

132
00:08:56,510 --> 00:08:58,250
So didn't find you were elsewhere.

133
00:08:58,340 --> 00:08:59,040
That's no problem.

134
00:08:59,060 --> 00:09:01,130
We can go import it right at the top of our file.

135
00:09:03,950 --> 00:09:11,540
So we'll add the import, and it is going to be a GitHub dot com slash TESOL or, in my case, slash

136
00:09:11,600 --> 00:09:15,410
celebrities slash URL sinar.

137
00:09:17,280 --> 00:09:20,690
And that should show up or save this.

138
00:09:24,890 --> 00:09:30,280
The only irritating thing about a visual studio code is sometimes it's slow to update.

139
00:09:31,360 --> 00:09:31,690
OK?

140
00:09:31,810 --> 00:09:32,710
It looks like I did it for me.

141
00:09:34,030 --> 00:09:37,930
So now I want a signed version of my link, so I'll create a new variable.

142
00:09:37,930 --> 00:09:43,750
Signed link is assigned the value of sign dot.

143
00:09:46,800 --> 00:09:54,210
Generate token from string on the string, I want to pass it, it's just like the now I have a sign

144
00:09:54,210 --> 00:09:54,510
link.

145
00:09:55,740 --> 00:09:58,890
So at this point, let's just print it to the console.

146
00:09:59,070 --> 00:10:06,790
OK, so I'll say H2O app, dot info, log dot dot print line signed.

147
00:10:07,230 --> 00:10:10,950
The link is and print out sign link.

148
00:10:12,300 --> 00:10:16,560
OK, so it's still showing me an error up here.

149
00:10:16,750 --> 00:10:17,280
Yeah, but.

150
00:10:17,280 --> 00:10:21,030
Com slash TCR slash failure to slash all sign it.

151
00:10:22,140 --> 00:10:23,700
And that is the correct path.

152
00:10:24,030 --> 00:10:25,710
Maybe I need to take Gomaa my vendor again.

153
00:10:25,860 --> 00:10:26,730
Go on gender.

154
00:10:31,250 --> 00:10:31,560
OK.

155
00:10:31,580 --> 00:10:33,110
Let's just see if our application starts.

156
00:10:33,870 --> 00:10:34,460
Make sure.

157
00:10:36,990 --> 00:10:38,340
Eric did catch up to me good.

158
00:10:41,270 --> 00:10:45,470
So I do have an error here, and it's an art handlers go line 153.

159
00:10:47,630 --> 00:10:53,390
It says I cannot use a Dot app on encryption, key type string as type byte in field values, so I have

160
00:10:53,390 --> 00:10:55,130
to cast that to a byte.

161
00:10:55,130 --> 00:10:56,840
So let's go down the line one hundred and fifty three.

162
00:10:58,220 --> 00:11:01,910
This sort of thing happens when an application can't keep up with that.

163
00:11:01,910 --> 00:11:05,660
So encryption key is a string and it needs to be a bite.

164
00:11:05,730 --> 00:11:06,290
That's no problem.

165
00:11:06,470 --> 00:11:11,510
We'll just cast it to a slice of bytes slice of byte.

166
00:11:15,160 --> 00:11:16,750
There it is and close that.

167
00:11:18,100 --> 00:11:19,280
OK, let's try running it again.

168
00:11:20,090 --> 00:11:20,560
Let's start.

169
00:11:27,850 --> 00:11:29,230
So a comp. That's a good sign.

170
00:11:29,260 --> 00:11:30,550
Let's go back to our Web browser.

171
00:11:32,370 --> 00:11:41,010
And let's go to log in a user and try forgot password, and we'll put in me out here dot com, the only

172
00:11:41,010 --> 00:11:46,290
user we have in the database and click Send Password Reset Password email and I should get a blank screen

173
00:11:46,290 --> 00:11:47,490
screen or an error.

174
00:11:49,330 --> 00:11:50,950
And we got a blank screen, which is good.

175
00:11:51,070 --> 00:11:56,920
Let's go back to our I.D. and what we have here is.

176
00:11:58,370 --> 00:11:59,000
There it is.

177
00:11:59,120 --> 00:12:03,350
Signed link is it should be local host 4000, which is correct.

178
00:12:03,740 --> 00:12:06,500
Users reset Dash password question mark.

179
00:12:06,530 --> 00:12:09,800
Email is my email and then we have the signed link.

180
00:12:10,130 --> 00:12:10,610
Perfect.

181
00:12:11,450 --> 00:12:16,490
OK, so now that we signed the link, we can actually send an email.

182
00:12:18,200 --> 00:12:22,940
So in order to send an email, of course, we're going to have to have a template password reset and

183
00:12:22,940 --> 00:12:26,840
we can make that in just a moment, but first of all, let's set up the necessary code.

184
00:12:26,960 --> 00:12:29,570
So I'm going to have to pass some data to that template.

185
00:12:29,720 --> 00:12:32,150
So I'll create a variable say.

186
00:12:33,270 --> 00:12:41,150
VAR data, which is just a struct, and it has one field in it link, which is of type string,

187
00:12:44,250 --> 00:12:50,340
and then I'll populate that data variables link member with my signed link.

188
00:12:51,270 --> 00:12:51,570
OK.

189
00:12:53,080 --> 00:13:01,300
And I would just create a message MSG is a sign of the value of Maler dark message, and I populates

190
00:13:01,300 --> 00:13:01,690
fields.

191
00:13:02,290 --> 00:13:04,780
So we're going to have to put in a tube.

192
00:13:05,170 --> 00:13:06,860
And that would be to you.

193
00:13:06,880 --> 00:13:15,100
Dot email, user email and subject will be password reset.

194
00:13:17,660 --> 00:13:23,560
But we're going to have to put in a template and I'll put in password reset, which doesn't exist yet,

195
00:13:23,560 --> 00:13:26,080
but it will in a minute password reset.

196
00:13:29,490 --> 00:13:31,200
And data will be data.

197
00:13:32,650 --> 00:13:38,040
And we're going to want to from and that will just be me here.

198
00:13:38,260 --> 00:13:42,070
I can't use that will see at admin at example icon.

199
00:13:42,220 --> 00:13:43,600
I want a different email address.

200
00:13:44,000 --> 00:13:46,780
It doesn't matter what it is, so I'm sending this to a test server in any case.

201
00:13:47,410 --> 00:13:48,520
So I've created the message.

202
00:13:49,560 --> 00:14:01,650
My next step is to send that to the jobs queue, which is easy app dark mail dot jobs gets me cheap

203
00:14:03,120 --> 00:14:04,470
and we wait for the response.

204
00:14:04,700 --> 00:14:08,640
Rez is assigned the value of whatever comes from a short app.

205
00:14:09,270 --> 00:14:10,830
Typekit mailed out results

206
00:14:13,470 --> 00:14:22,380
and we'll say if resort error is not equal to nil, then we can just do the same thing we did before.

207
00:14:22,390 --> 00:14:28,670
We'll copy all of this error code right here and pasted in here, unless something goes wrong, will

208
00:14:28,680 --> 00:14:29,940
add extra logging files.

209
00:14:30,000 --> 00:14:33,270
OK, so that's the email, the message part.

210
00:14:33,270 --> 00:14:42,300
So I can take this comment and put it right up here, and I can take the sign the link part and put

211
00:14:42,300 --> 00:14:43,230
it right up here.

212
00:14:47,180 --> 00:14:49,090
And get rid of this blank space.

213
00:14:51,450 --> 00:14:53,290
And get rid of this blank space.

214
00:14:54,220 --> 00:14:58,900
OK, now the last thing to do is to redirect the users to the log in screen.

215
00:14:59,260 --> 00:15:02,140
So that's easy enough to HDP to redirect.

216
00:15:03,370 --> 00:15:10,990
And we want to redirect with an urge to slash user slash logging and HDP status.

217
00:15:10,990 --> 00:15:11,350
See other.

218
00:15:14,560 --> 00:15:14,920
OK.

219
00:15:16,120 --> 00:15:21,310
So I would think that the last step we have to do is to create this password reset template.

220
00:15:21,550 --> 00:15:23,680
OK, so we can do that.

221
00:15:24,130 --> 00:15:31,210
Let's open it to open a terminal window and go dot slash celebrities make male.

222
00:15:31,240 --> 00:15:33,190
Then I call it password reset.

223
00:15:35,890 --> 00:15:38,800
And that should create two empty templates for me.

224
00:15:39,370 --> 00:15:40,310
So let's open them up.

225
00:15:40,330 --> 00:15:42,370
Password reset HTML.

226
00:15:42,400 --> 00:15:44,320
That team will end up cleaned up.

227
00:15:46,000 --> 00:15:47,120
So make this really simple.

228
00:15:47,140 --> 00:15:50,140
We'll start with the plain text version, and I'll just put it in here.

229
00:15:50,200 --> 00:15:50,680
Hello.

230
00:15:52,120 --> 00:15:59,350
You recently requested a link to reset your password.

231
00:16:01,420 --> 00:16:05,440
Visit the link below to get started.

232
00:16:06,730 --> 00:16:14,200
Note that the link expires in 60 Minutes and we haven't done that yet, but we'll do it when we get

233
00:16:14,200 --> 00:16:16,150
to the actual link itself.

234
00:16:16,210 --> 00:16:16,630
OK?

235
00:16:17,230 --> 00:16:22,150
And we'll just put in here Dot Link, which we passed as data to this form.

236
00:16:22,360 --> 00:16:22,720
OK.

237
00:16:23,530 --> 00:16:24,310
So there's that one.

238
00:16:25,150 --> 00:16:27,460
Now let's go over to password reset.

239
00:16:28,180 --> 00:16:32,680
Each time out, we should be pretty much the same thing.

240
00:16:33,250 --> 00:16:38,470
So down here, I'll say in the first paragraph, tag hello.

241
00:16:39,370 --> 00:16:43,900
And another paragraph tag, and I'll just copy and paste for the other one in a minute.

242
00:16:46,230 --> 00:16:55,860
So we'll go over here to password reset, plain copy this text back to the HTML version pasted in here,

243
00:16:56,940 --> 00:16:58,230
and then we'll have another paragraph

244
00:17:01,050 --> 00:17:08,790
with a closing paragraph tag and copy the second line just to save me retyping it over here.

245
00:17:09,720 --> 00:17:11,940
Paste it in, and then we'll put the link in here.

246
00:17:18,840 --> 00:17:19,230
OK.

247
00:17:19,380 --> 00:17:20,760
This should be all we have to do for that.

248
00:17:21,960 --> 00:17:27,240
So in theory, I can now restart my application, make restart.

249
00:17:34,280 --> 00:17:35,730
Good sign, everything compiled.

250
00:17:35,750 --> 00:17:38,000
Let's go to our Web browser, here we are.

251
00:17:38,600 --> 00:17:43,250
And now open another tab and open my mail client, which are mail server by Test Mail Server, which

252
00:17:43,250 --> 00:17:43,970
is Mail Hog.

253
00:17:43,970 --> 00:17:45,080
So local host.

254
00:17:45,830 --> 00:17:47,270
Four eight zero two five.

255
00:17:48,990 --> 00:17:49,850
OK, it's empty.

256
00:17:49,850 --> 00:17:50,360
That's good.

257
00:17:50,690 --> 00:17:52,580
Back here to the celebrity's page.

258
00:17:52,910 --> 00:17:56,810
Click on Log any user and said I forgot my password.

259
00:17:57,590 --> 00:18:02,570
And now I'll put me here dot com, which is the only user I have in the database.

260
00:18:03,170 --> 00:18:05,300
And if we did everything right, this should work.

261
00:18:06,580 --> 00:18:10,120
OK, so it took me back to the log in screen, which is what it's supposed to do.

262
00:18:10,480 --> 00:18:16,600
And over and male hug, I have a password reset like now I can click on that link all that I want.

263
00:18:19,380 --> 00:18:23,550
And I probably should have made that in a rough, and I will go fix that right now.

264
00:18:23,580 --> 00:18:24,390
That was sloppy.

265
00:18:24,670 --> 00:18:35,490
So let me go back to Visual Studio code and make this a trip equals with a link in there and then click

266
00:18:35,490 --> 00:18:39,560
here to reset your password slash pay.

267
00:18:40,140 --> 00:18:40,750
That's just better.

268
00:18:40,770 --> 00:18:43,080
So the next time we do that, that'll actually show up as a link.

269
00:18:43,590 --> 00:18:47,730
But it doesn't matter right now because this link currently doesn't work, but you can see it is the

270
00:18:47,730 --> 00:18:48,870
correct sign link.

271
00:18:49,890 --> 00:18:57,390
So the next step, of course, is to actually take care of serving up the page that allows users to

272
00:18:57,390 --> 00:18:59,850
reset their password and then reset their password.

273
00:18:59,880 --> 00:19:02,160
And we'll get started on that in the next lecture.
