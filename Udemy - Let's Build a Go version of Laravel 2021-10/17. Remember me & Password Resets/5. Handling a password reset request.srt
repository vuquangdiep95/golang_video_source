1
00:00:01,680 --> 00:00:08,100
So now that we have the form that shows the I forgot my password page, we need to create the handler

2
00:00:08,100 --> 00:00:11,500
that actually takes the post request from that form.

3
00:00:11,670 --> 00:00:17,610
So let's get started and I'm back in my app and I'm looking at the file off their handlers don't go

4
00:00:17,670 --> 00:00:22,680
and I'll create a stub handler, so I'll just copy this one and paste it here and rename it.

5
00:00:23,280 --> 00:00:24,300
And I'll call it post.

6
00:00:24,300 --> 00:00:26,970
Forgot, OK?

7
00:00:27,570 --> 00:00:32,490
And I'll just comment about the entirety of it, and then I'll go over to my roots file just to get

8
00:00:32,490 --> 00:00:33,220
this out of the way.

9
00:00:34,380 --> 00:00:40,590
And I'll find this route right here on Line 26, the one that displays the I forgot my password page,

10
00:00:40,690 --> 00:00:49,170
I'll duplicate it changed to a post and I'll make sure that the handler that is called is post forgot.

11
00:00:49,650 --> 00:00:52,170
OK, now back to our handlers.

12
00:00:52,800 --> 00:00:56,160
Obviously, we're not displaying a pager, so this can go away entirely, actually.

13
00:00:56,520 --> 00:00:58,020
Let's think about what's going to happen here.

14
00:00:58,680 --> 00:01:04,410
What has to happen is, first of all, we have to make sure that they have an email address in that

15
00:01:04,410 --> 00:01:11,220
form and then we have to actually look up to see if we can find a user that matches that email address.

16
00:01:11,880 --> 00:01:20,580
If it does, if we could find that user, then we need to send back an email, send an email that has

17
00:01:20,580 --> 00:01:24,630
some instructions in it and directs them to click on a particular link.

18
00:01:24,630 --> 00:01:27,930
And that link needs to be specific to this user.

19
00:01:28,830 --> 00:01:33,300
I mean, if we just made it a generic link and said anybody can fill in an email address and then fill

20
00:01:33,300 --> 00:01:37,920
in the passwords, people can change passwords whenever they wanted to for anyone, and that would be

21
00:01:37,920 --> 00:01:38,220
bad.

22
00:01:38,580 --> 00:01:41,790
So we need to make sure that it's secure and there's lots of ways of handling this.

23
00:01:41,790 --> 00:01:48,030
One very common approach is to generate a token, save it in the database, have it tied to that particular

24
00:01:48,030 --> 00:01:49,020
email address.

25
00:01:49,020 --> 00:01:54,570
And when someone goes to that page, of course, they're submitting a token with part of that link will

26
00:01:54,570 --> 00:01:59,160
be writing the URL, and we verify that the token in the link matches the one in the database.

27
00:01:59,280 --> 00:02:02,000
That's a lot of work, it seems to me.

28
00:02:02,010 --> 00:02:03,150
It's a lot simpler.

29
00:02:03,300 --> 00:02:10,380
If we actually use what's known as a signed URL, you are that is effectively tamper proof and that

30
00:02:10,380 --> 00:02:13,200
we can validate when it comes back to our system.

31
00:02:13,590 --> 00:02:16,100
So we'll take care of that in it, of course, to do that.

32
00:02:16,170 --> 00:02:21,900
We could put all the logic for generating signed URLs right in my app, but that seems kind of pointless

33
00:02:21,900 --> 00:02:26,310
because we want this to be available to all users of our Celebrity House package.

34
00:02:27,030 --> 00:02:28,860
So let's switch to the Celebrity House project.

35
00:02:29,220 --> 00:02:31,590
And over here, I'm going to create a new folder.

36
00:02:32,070 --> 00:02:35,340
I'll put all of my URL signing logic into its own package.

37
00:02:35,400 --> 00:02:36,390
You are a signer.

38
00:02:36,720 --> 00:02:37,590
That's what I'm going to call it.

39
00:02:37,600 --> 00:02:45,840
URL aside GDR and inside of that folder, I'll create a new file, which I will call sign or ago.

40
00:02:47,370 --> 00:02:49,980
And of course, it has the package declaration of URL signer.

41
00:02:50,820 --> 00:02:58,470
Now, in order to sign emails, what we're going to do is import a very small third party package.

42
00:02:58,660 --> 00:02:59,050
OK.

43
00:02:59,070 --> 00:03:02,580
And I've used this in other courses, so you might be familiar with it if you take in some of my other

44
00:03:02,580 --> 00:03:03,030
courses.

45
00:03:03,510 --> 00:03:07,640
So I'm going to open a terminal window and I'll clear my screen and type.

46
00:03:07,650 --> 00:03:16,620
Go get GitHub dot com slash BMW M8 R R n slash and go dash alone.

47
00:03:17,340 --> 00:03:19,560
And this is a dead simple signing package.

48
00:03:20,130 --> 00:03:24,000
And if you want it to, you could copy the logic from this into your own code and not even import a

49
00:03:24,000 --> 00:03:25,710
package because it's relatively small.

50
00:03:26,100 --> 00:03:28,020
But I like to give credit where credit is due.

51
00:03:28,110 --> 00:03:30,360
So I've added that it's now available to me.

52
00:03:31,230 --> 00:03:35,430
So what I'm going to do is, first of all, create a type and we use this when we create this package

53
00:03:35,430 --> 00:03:36,750
or instantiate this package.

54
00:03:36,890 --> 00:03:40,440
I'll call it Siner, and it's just a struct, and it has some secret.

55
00:03:40,630 --> 00:03:47,010
OK, I see CRT and that will be a slice of bytes and we need to get that from somewhere.

56
00:03:47,070 --> 00:03:47,400
OK?

57
00:03:47,460 --> 00:03:49,020
And we'll get that very shortly now.

58
00:03:50,390 --> 00:03:56,630
I'll create my first function, which will have a receiver s pointer to sign her, so it's available

59
00:03:56,630 --> 00:04:03,320
any time we create a variable of the type signer and we'll call this generate token from string.

60
00:04:04,460 --> 00:04:08,780
And it takes one argument data string and it returns a string.

61
00:04:09,260 --> 00:04:11,270
OK, so this is pretty simple.

62
00:04:11,510 --> 00:04:18,050
First of all, we're going to create a variable URL to sign and it's a type string.

63
00:04:19,970 --> 00:04:23,720
Now I'll create another variable called crypt for cryptography here.

64
00:04:23,750 --> 00:04:30,620
Why Piti and that is assigned the value of from the package we just imported.

65
00:04:30,830 --> 00:04:34,950
Go along and see if it'll find it for me.

66
00:04:34,970 --> 00:04:35,750
Sometimes it does.

67
00:04:35,750 --> 00:04:36,650
Sometimes it doesn't.

68
00:04:38,250 --> 00:04:39,180
Nope, didn't find it.

69
00:04:39,210 --> 00:04:39,790
That's no problem.

70
00:04:39,810 --> 00:04:43,920
We'll just go and put it up here after the package statement.

71
00:04:45,080 --> 00:04:55,380
I'll create an import statement and I will import GitHub dot com slash bw m a r i n slash go dash palo.

72
00:04:56,130 --> 00:05:01,380
OK, so go alone dot new.

73
00:05:01,980 --> 00:05:08,640
And for its arguments, it will take my escort secret, which is of course populated when we create

74
00:05:08,640 --> 00:05:10,260
a variable of the type signer.

75
00:05:10,560 --> 00:05:15,000
And what's also going to take go along Typekit timestamp.

76
00:05:15,900 --> 00:05:20,340
So we want that URL that we're sending the users to expire after a certain period of time.

77
00:05:21,960 --> 00:05:28,710
Now remember, we're generating a URL and a URL may or may not have some get tokens.

78
00:05:29,010 --> 00:05:33,750
In other words, question mark value equals something else.

79
00:05:33,960 --> 00:05:36,040
It may have those in the URL, or it might not.

80
00:05:36,060 --> 00:05:37,790
So we have the trap for both cases.

81
00:05:37,810 --> 00:05:38,550
And that's really easy.

82
00:05:38,640 --> 00:05:44,700
So we'll say if string start contains right from the standard library, if the URL we want to sign,

83
00:05:45,270 --> 00:05:50,790
which is, of course, data, if that contains a question mark, then there are already some tokens

84
00:05:50,790 --> 00:05:54,330
there because I'm going to be putting tokens at the end of the URL in order to sign it.

85
00:05:54,840 --> 00:05:55,940
So that's my first case.

86
00:05:55,950 --> 00:05:56,850
We'll do one thing.

87
00:05:57,450 --> 00:05:59,040
Otherwise, we'll do something else.

88
00:05:59,520 --> 00:05:59,850
OK.

89
00:06:00,870 --> 00:06:08,790
So if it contains that, then we're going to say you were able to sign is equal to and I'll use the

90
00:06:08,790 --> 00:06:18,300
format package format dot print f and my format string will be percent s, followed by an ampersand.

91
00:06:18,510 --> 00:06:20,130
Hash equals OK.

92
00:06:20,910 --> 00:06:24,640
And my substitution for the percent, as is, of course, data.

93
00:06:25,980 --> 00:06:27,720
Otherwise, let's just copy this.

94
00:06:29,380 --> 00:06:32,560
Otherwise, we're signing a URL that does not already have parameters.

95
00:06:32,620 --> 00:06:34,060
So why do you have to change a little bit?

96
00:06:35,020 --> 00:06:38,290
So basically, the ampersand becomes a question mark.

97
00:06:38,800 --> 00:06:39,130
OK.

98
00:06:39,610 --> 00:06:44,020
And that tells the browser that these are the bits of data I'm passing along with this URL.

99
00:06:44,230 --> 00:06:47,920
So there now I have a URL I can sign and signing.

100
00:06:47,920 --> 00:06:48,790
It is really easy.

101
00:06:49,030 --> 00:06:51,250
OK, I'll say token bytes.

102
00:06:51,260 --> 00:06:56,920
I'm just generating a token that I can verify, which will be appended right to the URL we're signing.

103
00:06:56,950 --> 00:07:05,590
Token bytes is a sign the value of Crypt Dot sign, and we're going to sign as a slice of bytes you

104
00:07:05,590 --> 00:07:06,190
are all to sign.

105
00:07:10,070 --> 00:07:16,340
And now my token, which is what I would be returning, that's a sign the value of string token rights.

106
00:07:17,750 --> 00:07:21,260
And I'll return that and I could have done that one line, but this is quite readable.

107
00:07:21,560 --> 00:07:26,260
Return token that allows us to generate a token from a string.

108
00:07:26,270 --> 00:07:27,440
So we handed a URL.

109
00:07:28,310 --> 00:07:34,100
It then appends a hash that our system knows about to the URL to the URL and sends that back.

110
00:07:34,250 --> 00:07:35,810
OK, so that's the first thing we have to do.

111
00:07:36,290 --> 00:07:38,630
The second thing we have to do, of course, is verify tokens.

112
00:07:38,690 --> 00:07:41,660
And that's equal easy func as pointer to signer.

113
00:07:42,410 --> 00:07:44,600
And we'll call this verify token.

114
00:07:45,920 --> 00:07:49,940
And it takes one argument token, which is a string and it returns a Boolean.

115
00:07:50,270 --> 00:07:51,740
Either it's valid or it's not.

116
00:07:52,550 --> 00:07:56,110
So again, we create a crypt so I can copy this line.

117
00:07:58,550 --> 00:08:04,820
And pasted here that gives you my my tool, and then I ignore the first return parameter.

118
00:08:05,120 --> 00:08:07,760
But I do care about the error and I call.

119
00:08:09,100 --> 00:08:16,900
Crypt done unsigned, and then I take and cast to a slice of bite my token.

120
00:08:22,240 --> 00:08:23,160
And I checked for an error.

121
00:08:23,860 --> 00:08:25,440
If error is not equal to nil.

122
00:08:25,480 --> 00:08:26,200
Something went wrong.

123
00:08:26,200 --> 00:08:26,920
So I'll just return.

124
00:08:26,920 --> 00:08:27,340
False.

125
00:08:28,420 --> 00:08:34,450
OK, otherwise I return truth, and that's as simple as it can possibly get.

126
00:08:35,920 --> 00:08:37,630
So that's one thing we have to take care of.

127
00:08:37,750 --> 00:08:44,470
The last thing we have to take care of is in some cases will be using signed URLs that have an expiry.

128
00:08:44,620 --> 00:08:47,260
OK, so we'll just check for expiry.

129
00:08:47,380 --> 00:08:56,590
Funk it again, funk s pointer to signer and we'll call the function expired and it takes a token.

130
00:08:57,220 --> 00:09:05,890
And it also takes minutes until expire, which is an IT and token as a string because I have to put

131
00:09:05,890 --> 00:09:06,510
the tape in there

132
00:09:09,790 --> 00:09:10,930
and it returns a Boolean.

133
00:09:12,970 --> 00:09:18,010
So once again, I'll paste in my crypt, which I still have in my clipboard, and I'll create a variable

134
00:09:18,010 --> 00:09:27,700
called T-S four times since and I'll call Crypt Dot Pass and hand it the slice of bytes token.

135
00:09:29,710 --> 00:09:32,690
And now all I have to say is return time dot.

136
00:09:33,550 --> 00:09:43,720
Since and I want to start timestamp, which was populated when we called Crypt Pass and make that greater

137
00:09:43,720 --> 00:09:45,220
than time dot duration.

138
00:09:45,620 --> 00:09:51,640
Return to the standard package minutes until expired times.

139
00:09:53,340 --> 00:09:54,240
Typekit minute

140
00:09:57,800 --> 00:09:59,550
right there from the Standard Library.

141
00:10:00,300 --> 00:10:06,030
So if it hasn't expired yet, it will actually return, if true, and if it has expired, it'll return

142
00:10:06,030 --> 00:10:06,530
a false.

143
00:10:06,540 --> 00:10:11,030
And that's really simple and here is telling me, of course it wants to should return.

144
00:10:11,270 --> 00:10:11,880
Equals now.

145
00:10:12,360 --> 00:10:13,130
I like it this way.

146
00:10:13,140 --> 00:10:13,410
I like it.

147
00:10:13,410 --> 00:10:13,920
More readable.

148
00:10:14,280 --> 00:10:15,390
What it wants me to do.

149
00:10:15,420 --> 00:10:17,520
And you can see it right here is to put it in one line.

150
00:10:17,520 --> 00:10:19,350
Return error is equal to nil.

151
00:10:19,470 --> 00:10:20,550
Equals equals nil.

152
00:10:20,610 --> 00:10:21,560
But I like this.

153
00:10:21,570 --> 00:10:23,310
I think it's readable and it's entirely up to you.

154
00:10:23,940 --> 00:10:24,240
All right.

155
00:10:24,250 --> 00:10:25,230
So this is created.

156
00:10:25,230 --> 00:10:31,160
This package is now available to us, and in the next lecture, we'll start using it to generate a signed

157
00:10:31,180 --> 00:10:33,120
URL and email that off.
