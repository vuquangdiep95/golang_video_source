1
00:00:01,840 --> 00:00:06,730
So we're sending out emails with password reset links, and now we have to write a handler that actually

2
00:00:06,730 --> 00:00:08,140
accepts those links.

3
00:00:08,560 --> 00:00:12,160
So I'm still in my app and I'm an art handlers.

4
00:00:12,160 --> 00:00:12,710
Don't go.

5
00:00:12,730 --> 00:00:18,370
So let's go to the bottom of this file, create a new handler, and I'll call this one cloak h with

6
00:00:18,370 --> 00:00:20,650
a receiver, a pointer to handlers as usual.

7
00:00:21,970 --> 00:00:31,120
And I'll call this reset password for and give it a response writer and a pointer to request.

8
00:00:36,160 --> 00:00:37,540
And what do we want to do in here?

9
00:00:37,600 --> 00:00:40,360
Well, we need to get the form values.

10
00:00:41,380 --> 00:00:48,730
We also need to validate the URL to make sure the URL hasn't been tampered with and that it's valid

11
00:00:48,730 --> 00:00:50,860
and came from our system and all that sort of thing.

12
00:00:51,910 --> 00:00:53,860
And then we need to make sure it's not expired.

13
00:00:57,310 --> 00:01:01,150
And finally, if we pass all of those tests, then we display the form.

14
00:01:02,710 --> 00:01:05,170
OK, so let's get started doing that, right?

15
00:01:05,350 --> 00:01:06,190
So some room.

16
00:01:06,220 --> 00:01:10,570
First of all, we can get the form values, and there's really only one value coming with our request

17
00:01:10,750 --> 00:01:14,740
email, and that will be Arnaut URL.

18
00:01:15,520 --> 00:01:22,900
That query don't get email because we're getting that email as a query parameter.

19
00:01:24,100 --> 00:01:24,880
So we have that.

20
00:01:25,720 --> 00:01:28,720
Then we'll get the URL because we need to validate the URL.

21
00:01:29,620 --> 00:01:36,670
The URL, which I should probably write this way, is a sign the value of that's just our request.

22
00:01:36,670 --> 00:01:36,940
You are.

23
00:01:37,750 --> 00:01:39,100
And that comes in the form of a string.

24
00:01:39,430 --> 00:01:42,850
OK, and now we need to create a world to test that against.

25
00:01:43,150 --> 00:01:51,670
So test you URL is assign the value of format printouts and what our format string is.

26
00:01:51,670 --> 00:02:01,540
Just two strings join together and the first value is the URL of our server, each app dot server

27
00:02:04,450 --> 00:02:04,960
URL.

28
00:02:06,040 --> 00:02:09,490
And the second value is the URL, which we just got on the previous line.

29
00:02:09,640 --> 00:02:15,790
And that's the URL we're going to test because the URL that's signed is the full URL, including the

30
00:02:15,790 --> 00:02:20,120
server and the protocol, or oops.

31
00:02:20,860 --> 00:02:27,820
So now we create a sign and that comes from your URL signer, dot signer and we give it.

32
00:02:27,820 --> 00:02:39,790
It's one required field secret and that is a slice of bytes each dot app dot encryption key.

33
00:02:42,920 --> 00:02:50,810
OK, so now we validate the URL, so let's move this up here, just so our comments are in the right

34
00:02:50,810 --> 00:02:51,260
spot.

35
00:02:54,170 --> 00:02:54,620
That's better.

36
00:02:57,380 --> 00:03:08,440
So valid is simply assigned the value of calling Sinar Don't verify token and we hand it test URL and

37
00:03:08,510 --> 00:03:09,050
that will come back.

38
00:03:09,080 --> 00:03:10,130
True or false?

39
00:03:10,250 --> 00:03:14,720
So if it's not true, if not valid, then something has happened.

40
00:03:15,140 --> 00:03:26,780
OK, so I'll write to the error log h after the error log dot print line invalid URL.

41
00:03:27,770 --> 00:03:30,830
So somebody tried to change the URL or something like that has happened.

42
00:03:30,830 --> 00:03:38,140
And all I'm going to do at this point is just call H Dot app dot error unauthorized.

43
00:03:38,360 --> 00:03:43,220
You're not allowed to come to this address if you've tampered with the URL and hand it in her and we'll

44
00:03:43,220 --> 00:03:43,630
return.

45
00:03:43,640 --> 00:03:44,600
We don't want to go any further.

46
00:03:47,030 --> 00:03:52,580
But if they get past that, of course, now we need to make sure that the token has not expired, that

47
00:03:52,580 --> 00:03:54,410
less than 60 Minutes have gone by.

48
00:03:54,860 --> 00:04:00,620
And when we created that signature that we appended to the URL that actually has the timestamp built

49
00:04:00,620 --> 00:04:01,250
right into it.

50
00:04:01,700 --> 00:04:04,040
So it's pretty simple to make sure that it's not expired.

51
00:04:04,520 --> 00:04:05,720
So we'll say expired.

52
00:04:06,050 --> 00:04:13,560
She's just a variable I'm creating and it will be a Boolean is signer dot expired and we hand it test

53
00:04:13,610 --> 00:04:16,610
you URL and the number of minutes until expiring.

54
00:04:17,030 --> 00:04:17,940
So 60 Minutes.

55
00:04:18,490 --> 00:04:19,370
That'll be our default.

56
00:04:19,380 --> 00:04:20,600
And that's what we said in the email.

57
00:04:21,320 --> 00:04:25,590
If expired, if it has expired, then we can do the same thing.

58
00:04:25,610 --> 00:04:29,060
We'll just copy all of this and paste it in here.

59
00:04:29,180 --> 00:04:35,360
And just so we can see what's going on, we'll say Link expired, OK?

60
00:04:37,420 --> 00:04:40,990
But if we get past all of that now, we want to display that form.

61
00:04:41,350 --> 00:04:47,710
And of course, one of the things that you'll notice is that we're resetting an email based upon an

62
00:04:47,710 --> 00:04:49,690
email that's passed as a query parameter.

63
00:04:49,870 --> 00:04:56,560
And what we don't want to do is actually embed that email in the form of displaying as plain text,

64
00:04:56,800 --> 00:05:01,240
because at that point, somebody could just open the browser or change the value of that hidden field

65
00:05:01,240 --> 00:05:04,690
and change anybody's password, reset it to whatever they want, and that would be bad.

66
00:05:05,770 --> 00:05:10,420
So instead, let's encrypt that email and put the encrypted email on the form.

67
00:05:10,450 --> 00:05:18,460
So if you look at the form that we have here and it's over in our views and it's called a reset password

68
00:05:18,460 --> 00:05:25,330
jet, here I'm putting a hidden field named email on Line Thirty three in this code and I'm not putting

69
00:05:25,330 --> 00:05:26,760
the actual email in there.

70
00:05:26,770 --> 00:05:30,700
Instead, I want to encrypt it and then I'll decrypt it when this form is posted.

71
00:05:30,880 --> 00:05:33,760
So back to off handlers, let's just encrypt that email.

72
00:05:35,080 --> 00:05:36,520
So we'll say encrypted email

73
00:05:39,490 --> 00:05:43,880
and potentially an error, which I'll ignore, and you can just catch that error if you want to, and

74
00:05:43,900 --> 00:05:45,880
I'll just call each dot encrypt.

75
00:05:46,930 --> 00:05:48,310
And I handed him out.

76
00:05:49,180 --> 00:05:50,950
OK, so now I have that information.

77
00:05:51,970 --> 00:05:55,630
So now I need to pass that value to my form.

78
00:05:55,930 --> 00:06:00,610
And that's as simple as saying Mars is assigned the value of make.

79
00:06:00,850 --> 00:06:03,280
And we're going to make a jetport of our map.

80
00:06:07,400 --> 00:06:11,240
And then we'll just add that email to our of our map, so verse dot set.

81
00:06:11,930 --> 00:06:17,120
And I call that email on the template, so I better call it email here, and that's encrypted email.

82
00:06:20,070 --> 00:06:25,500
And now, as we normally do, we just run to the forum error is equal or assign the value of each dot

83
00:06:25,500 --> 00:06:35,130
render and we'll render with W and R, and the template we want is called reset password dot jet.

84
00:06:35,130 --> 00:06:36,180
But we leave the dot jet out.

85
00:06:36,180 --> 00:06:39,810
Of course, we had a diverse and neal for the fourth parameter.

86
00:06:41,120 --> 00:06:41,810
Fifth parameter.

87
00:06:44,190 --> 00:06:52,980
And we'll check for an error, and I'll just copy this error message right here and paste it in and

88
00:06:52,980 --> 00:06:53,970
get rid of the airlock.

89
00:06:57,790 --> 00:07:02,560
And get rid of the unauthorized, and it looks like I already have an error somewhere.

90
00:07:03,940 --> 00:07:07,300
Now, if error is not equal to nil, that's better.

91
00:07:09,510 --> 00:07:10,650
So this is created.

92
00:07:10,920 --> 00:07:13,340
So let's go to our roots file and and a root.

93
00:07:13,890 --> 00:07:19,710
We'll try to sow here right after the forgot password link.

94
00:07:20,100 --> 00:07:25,920
I'll put in a dog and cat and I'm going to go to the URL we gave them.

95
00:07:25,920 --> 00:07:37,260
Once users reset the password and we call eight handlers don't reset password form.

96
00:07:39,210 --> 00:07:42,200
And if all goes according to plan, I should be able to compile this now.

97
00:07:42,210 --> 00:07:43,830
So let's go make restart.

98
00:07:54,720 --> 00:08:01,650
OK, so a compiled listening on Port four thousand, let's go to our Web browser and go back to celebrities

99
00:08:02,580 --> 00:08:03,660
and reload this page.

100
00:08:04,770 --> 00:08:07,440
And I'm not logged in, so let's go to log in user.

101
00:08:08,480 --> 00:08:15,080
And I'll say I forgot my password, and I'll put in me at here dot com and send the email.

102
00:08:15,770 --> 00:08:16,740
So that should have sent it.

103
00:08:16,760 --> 00:08:18,320
Now I go over to my mail hog.

104
00:08:19,040 --> 00:08:23,810
There is my link from my email inside, but I have a link, so I click on this.

105
00:08:24,920 --> 00:08:28,310
It opens a new browser window and it worked properly.

106
00:08:28,380 --> 00:08:29,810
Well, let's try changing the email.

107
00:08:30,050 --> 00:08:34,700
So up here in the URL location bar, I'll change me at here.

108
00:08:34,700 --> 00:08:36,850
RT.com to me to adhere.

109
00:08:38,210 --> 00:08:42,980
I'm trying to change somebody else's email and I hit return and I get unauthorized.

110
00:08:43,220 --> 00:08:43,790
Perfect.

111
00:08:43,820 --> 00:08:45,860
So that seems to work as expected.

112
00:08:46,880 --> 00:08:53,300
So obviously the next step is to create the handler that takes the post request from this form on the

113
00:08:53,300 --> 00:08:54,080
previous page.

114
00:08:54,140 --> 00:08:58,970
So once I click Reset password, this has to go to a handler that once again does all the necessary

115
00:08:58,970 --> 00:09:03,530
validation and resets the user's password, and we get started on that in the next election.
