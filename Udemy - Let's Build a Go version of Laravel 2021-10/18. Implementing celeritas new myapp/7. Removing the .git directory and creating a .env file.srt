1
00:00:01,620 --> 00:00:06,510
So when we clone the remote repository and put it in our new folder, of course, there's going to be

2
00:00:06,510 --> 00:00:12,830
a market directory that tells everyone, Hey, all the code in this folder belongs to this remote repository,

3
00:00:12,840 --> 00:00:14,470
and of course, it's pointing to the wrong ones.

4
00:00:14,490 --> 00:00:15,510
We want to delete that.

5
00:00:15,540 --> 00:00:16,500
And that's very simple.

6
00:00:16,680 --> 00:00:17,910
We just call error.

7
00:00:18,090 --> 00:00:21,360
And this is right in the new Dot Go file in the celebrities package.

8
00:00:22,140 --> 00:00:28,770
Error is equal to from the standard library of sought removal, and that will remove everything in a

9
00:00:28,770 --> 00:00:29,760
particular directory.

10
00:00:30,660 --> 00:00:37,110
And of course, we want that to be in, and I'll use the format package dot sprint f and my format string

11
00:00:37,110 --> 00:00:41,340
is dot slash percent s slash Typekit.

12
00:00:43,980 --> 00:00:49,620
And the substitution for that percent, of course, is apt name and we'll check for an error.

13
00:00:50,100 --> 00:00:57,720
If error is not equal to nil, then we'll oh, we'll exit gracefully with the error.

14
00:00:58,800 --> 00:01:01,050
OK, so that was really simple.

15
00:01:01,260 --> 00:01:04,350
So we may as well do the dot on file in this lecture as well.

16
00:01:05,250 --> 00:01:11,580
So what we're going to do is get our existing dot on file that we know works, remove everything that

17
00:01:11,580 --> 00:01:14,280
doesn't belong in it and then do a little search and replace.

18
00:01:14,310 --> 00:01:20,880
So let's switch over to our other application, my app, and let's open the dot on file right here.

19
00:01:21,840 --> 00:01:25,530
Then we'll select all and copy and switch back to this latest project.

20
00:01:26,400 --> 00:01:32,490
And what I'll do is put an empty file, which I'll call Omkar text right in our Read-Only Templates

21
00:01:32,670 --> 00:01:33,420
file system.

22
00:01:35,150 --> 00:01:43,130
So new file and I'll call it on text and I'll paste the contents in there and then I'll start deleting

23
00:01:43,130 --> 00:01:43,550
things.

24
00:01:44,180 --> 00:01:47,540
So at the very top, we meals will start here, app name.

25
00:01:47,540 --> 00:01:49,670
It's not going to be my app necessarily.

26
00:01:49,700 --> 00:01:55,670
It will be dollar sign, app name and of course, we'll search and replace for that.

27
00:01:55,850 --> 00:02:00,620
When we do the installation of the data on file, I'll leave the app URL alone.

28
00:02:01,490 --> 00:02:07,460
I'll leave debug to true and I'll leave it on Port 4000 and I'll leave localhost, which is appropriate

29
00:02:07,460 --> 00:02:12,110
for development, and I'll leave this false as well, because we're not going to use secure connections

30
00:02:12,110 --> 00:02:13,370
on a local development machine.

31
00:02:14,000 --> 00:02:15,290
But I'll leave the database empty

32
00:02:19,040 --> 00:02:23,420
because we don't know if they're even going to use a database when they start a new Scylaticus application.

33
00:02:25,520 --> 00:02:27,350
And for Redis, I'll leave that empty as well.

34
00:02:31,370 --> 00:02:35,330
But I will leave the red is prefixed to dollar sign apt name.

35
00:02:36,710 --> 00:02:38,660
Is that a reasonable starting point?

36
00:02:39,590 --> 00:02:46,520
For cash, I'll leave that empty and for cookie settings, which is not cooking settings, it's cookie

37
00:02:46,520 --> 00:02:47,060
settings.

38
00:02:48,870 --> 00:02:56,700
Ali, the cookie name again, I'll use dollar sign apt name like that in curly brackets, and the rest

39
00:02:56,700 --> 00:02:58,980
of those settings should be fine for our purposes.

40
00:02:59,910 --> 00:03:07,710
Session type all default the cookie because we can do that with nothing else mail settings.

41
00:03:07,950 --> 00:03:09,900
I'll take those out entirely.

42
00:03:15,070 --> 00:03:17,440
And let the end user fill that stuff in.

43
00:03:20,130 --> 00:03:22,310
Mailer, AP Settings, I'll delete that.

44
00:03:22,590 --> 00:03:29,400
Leave it empty and I'll leave the renderer to Jet and then of course, I don't want to have everyone

45
00:03:29,400 --> 00:03:35,430
with the same default encryption key, so I'll put another placeholder in there dollar sign and then

46
00:03:35,430 --> 00:03:37,010
in curly braces key.

47
00:03:38,190 --> 00:03:43,740
OK, so that is a reasonable starting point for a dot on file.

48
00:03:43,890 --> 00:03:49,530
Basically, we're just going to put the bare minimum in and allow users to fill this in as necessary.

49
00:03:49,920 --> 00:03:55,200
Now let's go back to New Dot go and let's start creating a ready to go dot on file.

50
00:03:55,320 --> 00:03:57,900
So I'll just put a little message here.

51
00:03:58,050 --> 00:04:08,160
Color dot yellow and I'll prefix it with a tab and say creating dot on file.

52
00:04:08,340 --> 00:04:09,090
Dot dot dot.

53
00:04:09,660 --> 00:04:10,650
Just a little feedback.

54
00:04:12,960 --> 00:04:18,660
And then I'll read the data for my template file system into a variable data an error or assign the

55
00:04:18,660 --> 00:04:21,690
value of template fs.

56
00:04:24,730 --> 00:04:25,510
Read File.

57
00:04:27,210 --> 00:04:34,950
And I'm going to read templates and has to be in quotes templates on Typekit.

58
00:04:37,260 --> 00:04:38,370
Then again, I'll check for an error.

59
00:04:39,120 --> 00:04:40,470
So a copy and paste this.

60
00:04:42,820 --> 00:04:43,510
Right to hear.

61
00:04:44,470 --> 00:04:49,630
But assuming you get past that, I can convert data into a string, so I'll create a new variable called

62
00:04:49,630 --> 00:04:50,140
on.

63
00:04:51,070 --> 00:04:55,990
And that's a sign the value of string data will convert a slice of bytes into a string and then we'll

64
00:04:55,990 --> 00:04:58,660
do a search and replace on equals.

65
00:04:59,350 --> 00:05:01,180
Strings don't replace all.

66
00:05:03,100 --> 00:05:08,060
And we're going to be searching on and we're looking for, first of all, dollar sign.

67
00:05:09,520 --> 00:05:12,430
And then in all caps app name in curly brackets.

68
00:05:14,260 --> 00:05:15,950
And we want to replace that with without name.

69
00:05:18,850 --> 00:05:20,230
And then I'll duplicate that line.

70
00:05:21,700 --> 00:05:26,200
But this time I'm looking for there's got to be a curly closing curly bracket there or this won't work

71
00:05:27,670 --> 00:05:30,520
key again with the closing curly bracket.

72
00:05:30,730 --> 00:05:34,620
And this time, I want to generate a 32 character long random string.

73
00:05:34,630 --> 00:05:39,880
So I'll call seld on random string and make it exactly 32 characters long.

74
00:05:40,840 --> 00:05:43,350
And now we have ready to go on file.

75
00:05:43,780 --> 00:05:45,520
All we have to do is to write it to a file.

76
00:05:45,550 --> 00:05:52,530
So we'll say error is equal to copy data to file, and we want to use a slice of bytes.

77
00:05:52,540 --> 00:06:05,110
So we'll convert on into a slice of bytes and we'll copy it to format as f with a format string of dot

78
00:06:05,110 --> 00:06:08,940
slash percent s slash icons.

79
00:06:09,610 --> 00:06:12,340
And our substitution for that %s is just app name.

80
00:06:14,680 --> 00:06:16,780
And again, I should be able to paste in my error check.

81
00:06:17,830 --> 00:06:20,830
And at that point, this part should be done.

82
00:06:21,100 --> 00:06:23,170
So let's give it a try.

83
00:06:24,760 --> 00:06:26,770
I'll open my terminal window.

84
00:06:27,560 --> 00:06:28,800
See what's in my district.

85
00:06:28,960 --> 00:06:29,530
There's nothing.

86
00:06:29,530 --> 00:06:33,340
So I'll go up one level and say, Make build.

87
00:06:36,100 --> 00:06:40,750
And that should create the binary right in my dust folder, so let's go into the dust folder.

88
00:06:41,290 --> 00:06:42,640
Just tell us.

89
00:06:43,000 --> 00:06:43,630
There it is.

90
00:06:44,140 --> 00:06:49,060
And we'll say dot slash celebrity's new test and see if we got it right.

91
00:06:51,460 --> 00:06:53,260
So it says it created a dot on file.

92
00:06:53,290 --> 00:06:56,170
Let's go into test and do analysis.

93
00:06:58,140 --> 00:07:03,110
The last statue and there's my daughter on, so I'm going to open up my desk directory right here.

94
00:07:03,800 --> 00:07:05,240
I'll close the command folder.

95
00:07:06,350 --> 00:07:09,290
Look inside of Dist, there's test.

96
00:07:09,440 --> 00:07:10,580
Let's see what's in the front.

97
00:07:12,740 --> 00:07:16,640
And the acronym is test, and this should be a key at the bottom.

98
00:07:17,420 --> 00:07:18,380
Everything looks good.

99
00:07:18,500 --> 00:07:18,980
Perfect.

100
00:07:19,430 --> 00:07:19,820
All right.

101
00:07:19,970 --> 00:07:20,630
Let's move on.
