1
00:00:00,840 --> 00:00:06,870
So this course is all about implementing a very popular Web application framework written in PHP called

2
00:00:06,870 --> 00:00:07,530
Laravel.

3
00:00:07,710 --> 00:00:10,570
We're going to implement a similar thing, but we're going to write it in Go.

4
00:00:11,400 --> 00:00:18,000
Now Laravel, as I'm sure you're aware, is arguably the most popular framework in the world today,

5
00:00:18,270 --> 00:00:20,980
and it is extremely popular for good reason.

6
00:00:21,000 --> 00:00:27,380
When you start a project in Laravel, you have easy access to the database with the eloquent Aughrim.

7
00:00:27,390 --> 00:00:30,720
You have support for my skill and Postgres and other databases.

8
00:00:31,200 --> 00:00:37,500
In other words, you get a lot of functionality right out of the box, and it is dead simple to install

9
00:00:37,500 --> 00:00:39,220
with one command in your terminal.

10
00:00:39,240 --> 00:00:44,070
You can create a ready to go framework that has user authentication.

11
00:00:44,070 --> 00:00:47,400
It is templating, it has caching, it has sessions in its database.

12
00:00:47,400 --> 00:00:52,140
It has all the things you need to get started writing the next great web app.

13
00:00:53,630 --> 00:00:56,520
Now, there are some disadvantages to writing things in Laravel.

14
00:00:56,570 --> 00:00:57,740
It's relatively slow.

15
00:00:57,770 --> 00:00:59,600
It's certainly gotten faster over the years.

16
00:00:59,930 --> 00:01:06,230
VP8 is much faster than five, for example, but compared to compiled languages, anything written in

17
00:01:06,560 --> 00:01:08,120
PHP is relatively slow.

18
00:01:09,500 --> 00:01:14,460
Laravel applications also have in general a lot of external dependencies.

19
00:01:14,480 --> 00:01:19,350
So you're using composer, you're adding things and sometimes the things you're adding using composer.

20
00:01:19,370 --> 00:01:22,820
Either they disappear or they just don't keep up with the times.

21
00:01:22,820 --> 00:01:28,910
And a new version of Laravel comes out and you can't upgrade because the thing you're depending upon

22
00:01:28,910 --> 00:01:30,440
that you installed using composer?

23
00:01:30,470 --> 00:01:34,820
Well, it's not updated for the latest version of Laravel, and I run into that in the past as well.

24
00:01:36,180 --> 00:01:43,290
Perhaps the most terrible disadvantage, and this is neither the fault of Laravel nor of PPP is the

25
00:01:43,290 --> 00:01:46,590
incredible quantity of bad resources you have online.

26
00:01:46,680 --> 00:01:51,900
So someone's working along in Laravel, they run into a problem, they go to their favorite search engine

27
00:01:51,900 --> 00:01:57,000
and they type in a search term and they get a lot of responses, and a lot of them were written by people.

28
00:01:58,310 --> 00:02:03,290
Who really shouldn't be allowed to be that close to a keyboard in the first place, they're just badly

29
00:02:03,290 --> 00:02:03,650
written.

30
00:02:04,280 --> 00:02:06,790
But again, that's not the fault of Laravel or a few.

31
00:02:08,230 --> 00:02:13,430
Also, suppose you're right, this application and it's successful and you start getting massive amounts

32
00:02:13,430 --> 00:02:14,100
of traffic.

33
00:02:14,150 --> 00:02:20,150
You can in fact scale your application, but you have to scale it horizontally, meaning you add servers,

34
00:02:20,360 --> 00:02:25,220
and that introduces a level of complexity that can be a bit daunting for some people.

35
00:02:26,150 --> 00:02:31,550
Even if you have a single server compared to something that's written in Go, Laravel takes an awful

36
00:02:31,550 --> 00:02:36,950
lot of system resources, meaning you need a bigger server to serve the same amount of traffic you would

37
00:02:36,950 --> 00:02:39,980
with a much smaller server if your application was written and go.

38
00:02:41,540 --> 00:02:46,310
But the biggest advantage, in my opinion, and it's just my opinion, the biggest advantage to working

39
00:02:46,310 --> 00:02:52,850
in Laravel is I can open my terminal type one command and I have at the end of the day, a ready to

40
00:02:52,850 --> 00:02:53,720
go framework.

41
00:02:53,750 --> 00:02:58,910
I have user authentication, I have database access, I have caching, I have sessions, I have everything.

42
00:02:58,910 --> 00:03:02,720
I need to write my application and that is a real advantage.

43
00:03:04,010 --> 00:03:08,990
And what we're going to do in this course is we're going to build a go module that will duplicate much

44
00:03:08,990 --> 00:03:11,510
of the core functionality that we find in Laravel.

45
00:03:11,570 --> 00:03:15,470
Not all of it, but we're going to get the high points and I'll go through them in a moment, and I'm

46
00:03:15,470 --> 00:03:20,660
calling this module celebrities, which is Latin for speed, which seemed appropriate.

47
00:03:21,590 --> 00:03:25,820
Now we're going to build the framework, and we're also going to build a command line application,

48
00:03:25,820 --> 00:03:28,940
which makes it really easy to install a project.

49
00:03:29,480 --> 00:03:35,330
So in other words, I'll put my favorite terminal window and I'll type celebrity's new and some project

50
00:03:35,330 --> 00:03:42,740
name and we'll have out of the box with that one step the following features we'll have access to multiple

51
00:03:42,740 --> 00:03:43,370
databases.

52
00:03:43,520 --> 00:03:48,470
Now, in this course, I'm going to include Postgres in my school, but we'll also have support for

53
00:03:48,470 --> 00:03:53,910
Mongo Cockroach B and Super Out very easily, and you'll see how to do that as you go through the course.

54
00:03:53,930 --> 00:03:56,000
I'm only going to deal with Postgres in my school.

55
00:03:56,210 --> 00:04:01,340
But if you want to add Mongo or Cockroach or sequel right, you'll have absolutely everything at your

56
00:04:01,340 --> 00:04:02,930
disposal to implement that.

57
00:04:02,960 --> 00:04:03,860
And it's dead simple.

58
00:04:04,730 --> 00:04:09,980
We'll also have complete user authentication for both the web and API, so you log on with the username

59
00:04:09,980 --> 00:04:10,730
and password.

60
00:04:11,300 --> 00:04:15,470
And if you're doing so on a webpage, it just sets a sessional variable and away you go.

61
00:04:15,530 --> 00:04:20,960
But if you're logging on, using an API, we generate a token and you're ready to go and you can do

62
00:04:20,960 --> 00:04:22,070
that with one command.

63
00:04:23,780 --> 00:04:28,790
We'll also have support for database migrations, and we'll have support for multiple templating engines

64
00:04:28,910 --> 00:04:32,660
now Laravel uses Blade and Blade is a great templating engine.

65
00:04:33,020 --> 00:04:38,150
We're going to implement go templates and spend very little attention to it once we've implemented that

66
00:04:38,150 --> 00:04:40,490
because GO templates are not remarkably popular.

67
00:04:40,880 --> 00:04:46,310
Instead, we'll focus most of our attention on the jet template engine, which is much more user friendly

68
00:04:46,640 --> 00:04:48,970
and much faster and go templates.

69
00:04:48,980 --> 00:04:50,690
So there's no reason not to use that.

70
00:04:51,440 --> 00:04:53,300
We'll have complete support for sessions.

71
00:04:53,570 --> 00:04:57,860
We'll also be able to generate handlers, which are kind of like Laravel controllers.

72
00:04:58,830 --> 00:05:05,820
And database models with a single command from the terminal will have support for easy to write middleware.

73
00:05:05,970 --> 00:05:12,150
We'll have complete form validation and we'll have cross-site request forgery protection for those forms.

74
00:05:12,390 --> 00:05:16,530
We'll support encryption, which is incredibly useful when you're writing a web application.

75
00:05:17,100 --> 00:05:18,870
We'll also have response utilities.

76
00:05:18,870 --> 00:05:23,850
So you write a handler, which is like a controller in the Laravel world and say, I want to send this

77
00:05:23,850 --> 00:05:28,890
response back as X Amount or Jason or to download a file or obviously to render a web page.

78
00:05:29,790 --> 00:05:32,670
We'll also have support for multiple caching back ends.

79
00:05:33,030 --> 00:05:36,180
Now I'm going to implement two Redis and Badger DB.

80
00:05:36,330 --> 00:05:41,190
But again, just as is the case with databases, if you want to use a different one, you'll have all

81
00:05:41,190 --> 00:05:43,260
the knowledge necessary to do that on your own.

82
00:05:43,910 --> 00:05:48,810
I'm implementing just reticent Badger DB and people who have worked with Laravel might say to themselves,

83
00:05:48,810 --> 00:05:51,780
Why aren't you implementing a file system cache?

84
00:05:52,260 --> 00:05:53,970
We use that in development all the time.

85
00:05:54,090 --> 00:05:56,160
Well, the short answer is there's no need to.

86
00:05:56,520 --> 00:05:58,320
File systems are relatively slow.

87
00:05:59,620 --> 00:06:06,100
Badger DB will actually be a database that's embedded right into our application, and there's no real

88
00:06:06,100 --> 00:06:10,180
sense then to implement a file based caching system because we have Badger DB.

89
00:06:11,910 --> 00:06:18,780
We'll also have support for sending email, using SMTP servers or third party apps like SendGrid or

90
00:06:18,780 --> 00:06:25,560
Mail Gun or Spark Post, and we'll have remember me and password reset functionality built right into

91
00:06:25,560 --> 00:06:27,150
our user authentication system.

92
00:06:28,020 --> 00:06:31,620
Now, the best way to show you what we're going to build is as follows.

93
00:06:31,890 --> 00:06:36,180
Open a terminal window, so I have one open in front of me and I'm on my desktop and I'm just going

94
00:06:36,180 --> 00:06:36,540
to type.

95
00:06:36,660 --> 00:06:42,530
Celebrities knew my project and my sister project.

96
00:06:43,230 --> 00:06:48,440
And once I do that in a remote repository is cloned, we create a dot on file.

97
00:06:48,450 --> 00:06:52,930
Just like Laravel, we create a go mod file, which we need to manage our dependencies.

98
00:06:52,950 --> 00:06:54,270
We update the source files.

99
00:06:54,570 --> 00:06:56,820
We run Typekit to make sure everything's ready to go.

100
00:06:57,030 --> 00:06:58,860
And I am finished.

101
00:06:59,130 --> 00:07:03,630
And then if I go to my favorite edy, which is not Visual Studio code, but it's the one I'm using in

102
00:07:03,630 --> 00:07:11,820
this course, and I open the folder and I look for the desktop and find my project right here and open

103
00:07:11,820 --> 00:07:12,210
it up.

104
00:07:15,280 --> 00:07:17,110
I have all the code ready to go.

105
00:07:17,410 --> 00:07:25,070
So by default, I have access to whatever database I want, I just go to my dot on file and I specified

106
00:07:25,090 --> 00:07:26,560
what kind of database am I going to use?

107
00:07:26,590 --> 00:07:29,890
So I asked you earlier, Postgres, all the connection information.

108
00:07:30,130 --> 00:07:31,450
Am I going to use Redis?

109
00:07:31,630 --> 00:07:32,970
What are my cookie settings?

110
00:07:32,980 --> 00:07:34,990
All the things you would expect to find.

111
00:07:35,110 --> 00:07:35,470
OK.

112
00:07:36,280 --> 00:07:41,470
And then I can open a terminal and type make start.

113
00:07:43,150 --> 00:07:46,600
And that compiles my application to a single binary.

114
00:07:49,790 --> 00:07:56,570
It starts it up, and I can go to my favorite web browser and go to local host four thousand.

115
00:07:57,230 --> 00:07:58,010
And there it is.

116
00:07:58,130 --> 00:08:05,180
All ready to go now with very little effort, I can generate a user authentication system, I can connect

117
00:08:05,180 --> 00:08:07,810
to a database, I can implement a caching system.

118
00:08:07,820 --> 00:08:12,590
I can do all the things I need to do in order to build the next awesome web application.

119
00:08:13,070 --> 00:08:13,880
So this will be fun.

120
00:08:14,090 --> 00:08:15,140
Let's get started.
