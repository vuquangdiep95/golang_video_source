1
00:00:01,480 --> 00:00:06,520
So I've been talking about cross site request, forgery protection for a long time, and we've never

2
00:00:06,520 --> 00:00:11,110
done anything with it, and we're finally going to get around to implementing it and it is dead simple.

3
00:00:11,740 --> 00:00:16,900
So right now, I'm looking at the celebrity's page from our Maya project, and if I use source on this

4
00:00:16,900 --> 00:00:20,020
page, you'll see that I have at the top.

5
00:00:20,020 --> 00:00:25,750
This Meditech Mehta name equals cc rf dash token with an empty content.

6
00:00:26,350 --> 00:00:32,110
That's because we've not actually implemented generating CSR of tokens and CSR of tokens are nothing

7
00:00:32,110 --> 00:00:38,200
more than a means of ensuring that a request made say when you post a form, for example, is actually

8
00:00:38,200 --> 00:00:40,210
being made from a page on your site.

9
00:00:40,600 --> 00:00:47,890
So whatever value is in the CSR token field is compared with what it should be, and it changes every

10
00:00:47,890 --> 00:00:49,840
time you make a new request to the site.

11
00:00:50,410 --> 00:00:57,340
So, for example, if I tried to log any user here and I view source on this page and I look for C s

12
00:00:57,350 --> 00:01:02,770
r f and then search again here I have a hidden field in my form.

13
00:01:03,340 --> 00:01:05,690
Input Typekit was hidden and the name is CC.

14
00:01:05,690 --> 00:01:07,110
RF underscore token.

15
00:01:07,120 --> 00:01:08,530
And again, it has no value.

16
00:01:08,710 --> 00:01:09,720
So we're going to change that.

17
00:01:09,730 --> 00:01:12,040
We're going to implement CC rf protection.

18
00:01:13,060 --> 00:01:18,910
And in the go world, if you're using CSR f protection, you're almost certainly using this package.

19
00:01:19,090 --> 00:01:20,440
Justness slash.

20
00:01:20,470 --> 00:01:21,220
No, sir.

21
00:01:21,370 --> 00:01:22,560
And it is dead simple.

22
00:01:22,570 --> 00:01:23,650
There's very little coded.

23
00:01:23,650 --> 00:01:27,910
As you can see here, half of this code is tests, and it works really, really well.

24
00:01:28,210 --> 00:01:29,650
So let's go get that.

25
00:01:29,770 --> 00:01:37,060
So I'm going to copy the URL to this repository right here copy and I'll go back to my ID and I'll make

26
00:01:37,060 --> 00:01:39,880
sure I'm in the celebrities project and I'm not.

27
00:01:40,330 --> 00:01:41,410
So let's go get that.

28
00:01:42,280 --> 00:01:51,580
I open my terminal window type, go get and paste in the URL GitHub dot com slash J U s t i NHS slash.

29
00:01:51,580 --> 00:01:52,090
No, sir.

30
00:01:53,170 --> 00:01:54,280
Then that goes and gets it for me.

31
00:01:55,090 --> 00:01:57,370
So now that I have it, I need to use it.

32
00:01:58,180 --> 00:02:02,100
And if you look at the documentation on the page, you'll discover the easiest way to use this.

33
00:02:02,110 --> 00:02:06,520
In fact, the only way to use this really right now is to go to your middleware.

34
00:02:06,550 --> 00:02:10,200
So let's find our middleware wherever that is right here.

35
00:02:11,330 --> 00:02:12,490
Right now, we just have one.

36
00:02:12,640 --> 00:02:19,420
The session load middleware and what we'll do is add another one func with a receiver of C pointer to

37
00:02:19,420 --> 00:02:24,220
celebrities, and we'll call this one noser, which is a great name, because that's the name of the

38
00:02:24,220 --> 00:02:25,000
package we're using.

39
00:02:25,720 --> 00:02:31,990
And it takes one parameter next of type HTP dot handler and it returns in a dot handler.

40
00:02:34,210 --> 00:02:41,770
Now, first thing I'm going to do is get a C SRF handler, which I'm going to call C SRF handler, and

41
00:02:41,770 --> 00:02:43,930
that comes from the no surf package.

42
00:02:43,930 --> 00:02:44,830
No surf.

43
00:02:46,880 --> 00:02:51,290
And hopefully it'll find for me, no surf right there.

44
00:02:53,380 --> 00:02:54,420
Dot knew.

45
00:02:55,480 --> 00:03:00,670
And that requires one parameter, which we received as a call to this function next, and it should

46
00:03:00,730 --> 00:03:01,210
be handled.

47
00:03:01,450 --> 00:03:01,810
OK.

48
00:03:01,840 --> 00:03:03,790
So that creates a handler for me.

49
00:03:04,720 --> 00:03:09,940
And now I need to determine whether or not I should be using secure cookies because this, of course,

50
00:03:09,940 --> 00:03:12,430
sets a cookie on every request.

51
00:03:12,730 --> 00:03:16,390
And we only want it to be secure if we're in production, in development, we don't.

52
00:03:16,440 --> 00:03:18,040
But fortunately, we can do that pretty easily.

53
00:03:18,040 --> 00:03:21,610
So I'll create a variable called secure and I'll ignore the error.

54
00:03:22,300 --> 00:03:26,500
And that comes from using the stricken package from the standard library.

55
00:03:26,530 --> 00:03:35,110
We want pass bool because we have in our seeked config dart cookie dart secure.

56
00:03:35,620 --> 00:03:41,920
We have a text string which is either true or false, and pass bool will turn that into what it needed

57
00:03:41,920 --> 00:03:44,980
to be a Boolean with the appropriate true or false value.

58
00:03:46,410 --> 00:03:49,560
And now I just set my base cookie.

59
00:03:49,690 --> 00:03:56,580
And then we can figure CSR if, in other words, it's a CSR of handler variable we created, we'll call

60
00:03:56,580 --> 00:03:58,380
on that set based cookie.

61
00:04:00,210 --> 00:04:06,000
And that requires one value of type HTP cookie right there.

62
00:04:06,640 --> 00:04:07,890
We just populate its fields.

63
00:04:08,190 --> 00:04:10,710
So first thing, it should be only I'm going to set that.

64
00:04:10,710 --> 00:04:14,610
That's true because I'm only going to be making HTP http requests.

65
00:04:15,270 --> 00:04:19,740
Path for this cookie is the entire application, so Slash takes care of that.

66
00:04:20,310 --> 00:04:21,330
Is it secure?

67
00:04:21,360 --> 00:04:24,150
And of course, that's the variable which is got secure.

68
00:04:24,240 --> 00:04:29,190
So if we're running in production, I'm going to assume that you're running an HDB, and if you're not,

69
00:04:29,190 --> 00:04:29,820
you should be.

70
00:04:30,750 --> 00:04:33,270
So that's a valid way to set that value.

71
00:04:33,480 --> 00:04:37,160
And we set the same site attribute and I'll set mine to HGTV Dot.

72
00:04:37,170 --> 00:04:39,090
Same site, strict mode.

73
00:04:39,420 --> 00:04:41,880
Same site, but are spelt right?

74
00:04:42,720 --> 00:04:45,360
Strict mode You can use lax mode if you want.

75
00:04:45,360 --> 00:04:49,650
That will probably work for you, but I'm really security conscious, so I'm going to set mine to secure

76
00:04:49,920 --> 00:04:50,640
to strict mode.

77
00:04:51,540 --> 00:04:54,660
And finally, what domain are we going to be using this cookie with?

78
00:04:54,870 --> 00:04:58,980
We could leave that empty and it would default to the domain that you're actually serving it from.

79
00:04:59,130 --> 00:05:05,760
But I like to be specific, and we have that in court config cookie dot domain.

80
00:05:06,690 --> 00:05:06,900
All right.

81
00:05:07,650 --> 00:05:09,960
And what we do after that is return.

82
00:05:09,960 --> 00:05:10,980
See us our f handle it.

83
00:05:12,480 --> 00:05:18,750
Now, once we implement this middleware and we're about to, every request to the site will actually

84
00:05:18,750 --> 00:05:23,430
include and generate and return back to the user the appropriate CSF token.

85
00:05:23,970 --> 00:05:29,250
Now, if there are situations like domains, for example, where you don't want that to have to happen,

86
00:05:29,490 --> 00:05:30,510
you could put this in here.

87
00:05:30,510 --> 00:05:41,250
Something like this see us our f handler, DOD exempt glaube and say, I'm not going to worry about

88
00:05:41,250 --> 00:05:49,710
validating CC RF tokens from domains like some API and then the star, because this is a glob, you

89
00:05:49,710 --> 00:05:52,020
want to match everything that begins with that.

90
00:05:52,500 --> 00:05:53,410
Now, I'm not going to do that.

91
00:05:53,430 --> 00:05:54,900
I want it on every request.

92
00:05:54,960 --> 00:05:55,320
OK.

93
00:05:56,530 --> 00:06:01,650
So we've now got this middleware, but of course, we're not using it, and I don't want to make the

94
00:06:01,650 --> 00:06:03,900
end user put the middleware in place.

95
00:06:04,080 --> 00:06:07,850
I'm actually going to do it myself for everyone so they don't have to do anything.

96
00:06:07,860 --> 00:06:13,660
So I'll go to my roots file and I'll just use that so much.

97
00:06:14,490 --> 00:06:19,950
Don't use and I want to use c don't know, surf.

98
00:06:22,530 --> 00:06:24,210
So is that everything I need to do?

99
00:06:24,300 --> 00:06:25,130
If you think about it?

100
00:06:25,140 --> 00:06:31,890
I've now got a CSR CSR token being generated on every request, but how do I get that to my templates?

101
00:06:32,190 --> 00:06:34,560
Well, let's go to our render package right here.

102
00:06:36,280 --> 00:06:41,450
And in that render package, we have a function called default data.

103
00:06:41,470 --> 00:06:45,970
And this is data that is handed to every single template on the site.

104
00:06:46,660 --> 00:06:52,180
And if you look just above this in the template data struct, we already have a place for CSR of tokens.

105
00:06:52,390 --> 00:06:59,260
So I want to add my CSR token to the data that is passed to every template in the site.

106
00:06:59,560 --> 00:07:02,380
So I'll just hit return here and I'll populate that field.

107
00:07:02,590 --> 00:07:07,100
TD, I don't see us are of token and that is going to be equal to.

108
00:07:07,120 --> 00:07:11,530
We just called no serve, no serve dot token.

109
00:07:13,730 --> 00:07:14,810
Didn't seem to get it for me.

110
00:07:14,840 --> 00:07:15,560
No, sir.

111
00:07:16,250 --> 00:07:16,700
There is.

112
00:07:17,120 --> 00:07:17,900
Dot token.

113
00:07:18,440 --> 00:07:21,980
And it requires one parameter and that is the request order.

114
00:07:22,000 --> 00:07:24,710
We already have that right up here.

115
00:07:24,740 --> 00:07:30,080
We get our request as a parameter passed to this function, and that should be all I have to do.

116
00:07:30,680 --> 00:07:32,840
So let's switch over to our other application.

117
00:07:33,080 --> 00:07:33,650
My app.

118
00:07:35,030 --> 00:07:39,290
And just before we go any further because I already have it on my clipboard, I'm going to save a little

119
00:07:39,290 --> 00:07:44,210
bit of time and say, Go get paste in that URL for no surf because I'll need it in a minute.

120
00:07:48,060 --> 00:07:50,880
And I will start my application make restart.

121
00:07:50,940 --> 00:07:52,770
I'm not sure if it's running or not, but we'll find out.

122
00:07:52,800 --> 00:07:53,220
Yes, it is.

123
00:07:53,790 --> 00:07:54,540
So it stops it.

124
00:07:56,110 --> 00:07:56,770
It starts it.

125
00:07:59,720 --> 00:08:02,420
And let's go back to your Web browser and see if that token is in there.

126
00:08:03,290 --> 00:08:08,900
So back to our web browser and switch over to the celebrity's page.

127
00:08:09,390 --> 00:08:12,110
Go back to the home page and let's view source on this page.

128
00:08:13,520 --> 00:08:17,940
And there you can see that the token has been generated and passed to this template.

129
00:08:17,960 --> 00:08:24,110
And if I reload it, that token should change every time I reload, and it does perfect.

130
00:08:24,770 --> 00:08:30,980
And the same thing should happen if I close this and go to the log in a user page.

131
00:08:31,220 --> 00:08:37,790
If I view the source on that, there's the token here and it's also up in the meta tag where I want

132
00:08:37,790 --> 00:08:38,260
it to be.

133
00:08:38,270 --> 00:08:42,770
And if I reload it, those should both change to exactly the same thing.

134
00:08:43,040 --> 00:08:43,730
And they do.

135
00:08:44,510 --> 00:08:50,390
OK, now let's go back to our homepage, and I'm actually going to add a link right here to that cache

136
00:08:50,390 --> 00:08:51,190
page that we did.

137
00:08:51,200 --> 00:08:54,600
So let me go back to my celebrity's project because I'm going to try it out on that.

138
00:08:54,680 --> 00:09:05,270
So back to my I.D. and I'll hide the terminal and I'll go to my home page, which is HomeKit, and I'll

139
00:09:05,270 --> 00:09:06,290
just add a link at the bottom.

140
00:09:06,500 --> 00:09:10,610
OK, so we'll duplicate this and call this one.

141
00:09:13,150 --> 00:09:20,530
Cash and the path for that, if I recall correctly, was cash dash test.

142
00:09:21,040 --> 00:09:24,340
Now let's go back to our web browser and reload this.

143
00:09:24,940 --> 00:09:27,070
So there's cash, so let's click on it.

144
00:09:27,310 --> 00:09:34,090
And I'm also going to open my terminal or my JavaScript console, and I'm looking at the network tab

145
00:09:34,090 --> 00:09:35,110
in the developer tools.

146
00:09:35,800 --> 00:09:39,610
And what I'm going to do is try setting something here and it's not going to work.

147
00:09:39,640 --> 00:09:45,100
So I'll set A and B and I'll click Save in cash and then we'll look over here and see what went wrong.

148
00:09:47,950 --> 00:09:52,270
And you can see I have an error 400, which means bad request.

149
00:09:52,330 --> 00:09:59,620
And this is because we're not actually validating the CC rf token that's handed to our handler with

150
00:09:59,620 --> 00:10:01,420
the fetch request, and we need to fix that.

151
00:10:02,200 --> 00:10:03,700
And it's pretty easy to fix.

152
00:10:03,910 --> 00:10:07,290
Now, this is not something you need to do with regular form submissions.

153
00:10:07,300 --> 00:10:14,770
All you have to do there is make sure you have a hidden field named exactly six underscore CC RF underscore

154
00:10:14,920 --> 00:10:18,700
token and that its value is set to the current six of token.

155
00:10:18,700 --> 00:10:19,660
And nothing else matters.

156
00:10:19,660 --> 00:10:21,190
It all just magically happens.

157
00:10:22,150 --> 00:10:28,420
But here we're actually doing a fetch request and we in fact, are passing the cross rf token as part

158
00:10:28,420 --> 00:10:29,860
of our JSON payload.

159
00:10:30,100 --> 00:10:33,370
And you can see that right here and we look at request.

160
00:10:33,580 --> 00:10:36,880
You can see we're passing the token, but we're not doing anything with it on the back end.

161
00:10:36,940 --> 00:10:37,810
So let's go fix that.

162
00:10:38,470 --> 00:10:45,310
So back over to our code and this time I'm going to look at my handlers, my cash handlers right here.

163
00:10:47,290 --> 00:10:53,170
So we'll start with the first one, save in cash, and of course, here's where we need to validate

164
00:10:53,170 --> 00:10:54,310
that CSR of token.

165
00:10:54,370 --> 00:10:55,240
And it's pretty simple.

166
00:10:55,870 --> 00:10:59,260
So I'll come down here right after I read the Jason.

167
00:10:59,710 --> 00:11:04,930
But before I try to set anything in the cash at this point, I need to verify manually because this

168
00:11:04,930 --> 00:11:06,580
is not a regular form submission.

169
00:11:07,150 --> 00:11:09,490
I need to verify that that token is correct.

170
00:11:09,500 --> 00:11:14,140
So I'll say, if not, no serve is.

171
00:11:14,140 --> 00:11:15,970
We just imported the new serve package in here.

172
00:11:15,970 --> 00:11:16,660
So that'll work.

173
00:11:16,660 --> 00:11:18,160
And all we do is call verify token.

174
00:11:18,790 --> 00:11:28,980
And we hand it no surf dot token with the request and we compare it to user input dot CSR.

175
00:11:30,730 --> 00:11:35,350
So if that's not valid and we need to do something and normally you would send back some kind of error

176
00:11:35,350 --> 00:11:38,170
message or whatever you want, but I'm just going to throw an error five hundred.

177
00:11:38,260 --> 00:11:39,360
So doesn't really matter here.

178
00:11:39,370 --> 00:11:40,510
This is just a test case.

179
00:11:41,740 --> 00:11:47,710
So of course, I've done it for this handler, but I also need to do it for we've just done save in

180
00:11:47,710 --> 00:11:48,320
cash.

181
00:11:48,340 --> 00:11:55,840
Let's go down here to the next one after we read this and get from cash will paste it in there and we'll

182
00:11:55,840 --> 00:12:04,390
go down again further to delete from cash and after either Jason will verify that and down here.

183
00:12:04,390 --> 00:12:10,000
Finally, I think there's one more empty cash after we read the JSON, we paste that in there.

184
00:12:10,540 --> 00:12:16,930
Now let's stop our application, make stop, start our application.

185
00:12:17,080 --> 00:12:17,800
Make start.

186
00:12:24,930 --> 00:12:27,750
And if we did everything right, this should now work.

187
00:12:27,990 --> 00:12:29,700
Let's go back and see if we got it right.

188
00:12:30,210 --> 00:12:33,660
So back to our web browser, reload the page.

189
00:12:35,020 --> 00:12:42,880
All clear, all these requests, and I'll try setting Alpha to beta save in cash.

190
00:12:44,040 --> 00:12:45,330
And I got an error for her.

191
00:12:46,200 --> 00:12:47,070
I should've worked.

192
00:12:47,310 --> 00:12:48,000
That's not good.

193
00:12:48,880 --> 00:12:49,920
I know what I missed.

194
00:12:50,190 --> 00:12:58,650
Let's go back to our celebrities project, so over to our code and open this up and find our middleware.

195
00:12:59,310 --> 00:13:07,680
So we're actually making a post to slash API and it's looking for a field.

196
00:13:07,680 --> 00:13:13,350
A post value in that request is looking for a field named CSR underscore token.

197
00:13:13,470 --> 00:13:17,580
So you remember a little while ago when I said, I'm not going to add that little bit right here, that

198
00:13:18,270 --> 00:13:21,330
exempt club actually, in fact, do need that.

199
00:13:21,330 --> 00:13:23,490
So I'm going to add that here.

200
00:13:24,150 --> 00:13:34,230
So I'll say CSR as handlers dot exempt glaube, and I'll exempt anything that begins with slash API

201
00:13:34,230 --> 00:13:35,970
slash and anything after that.

202
00:13:36,690 --> 00:13:40,800
And that way it'll say, OK, this is a request to slash API slash.

203
00:13:40,800 --> 00:13:44,700
It's a post request to a URL that begins with slash API.

204
00:13:45,120 --> 00:13:46,890
So in this case, I'll just exempt it.

205
00:13:46,890 --> 00:13:56,660
I'm not going to test to see it to ensure that it has a post request with a form value named C underscore

206
00:13:56,700 --> 00:13:58,230
c SRF underscore token.

207
00:13:58,380 --> 00:13:59,340
So that was my mistake.

208
00:13:59,520 --> 00:14:00,180
That was silly.

209
00:14:00,660 --> 00:14:07,230
So I've added that let's go back now to our other project right here.

210
00:14:07,320 --> 00:14:11,400
Let's restart the application, make restart, and this time it should work.

211
00:14:18,740 --> 00:14:19,510
So it started.

212
00:14:19,580 --> 00:14:21,080
Let's go back to our Web browser.

213
00:14:22,160 --> 00:14:23,330
Let's reload the page.

214
00:14:26,130 --> 00:14:27,030
Now, let's try it again.

215
00:14:27,480 --> 00:14:33,060
So this time I've cleared the console over here, the network traffic and I'll say save in cash, and

216
00:14:33,060 --> 00:14:34,410
now it's saved in the cash.

217
00:14:34,770 --> 00:14:37,120
And now I've got to get it from the cash to make sure that works.

218
00:14:37,140 --> 00:14:37,920
So Alfa.

219
00:14:39,180 --> 00:14:45,600
Get firm cash, and that works great and delete from cash, I'll foolish foolish just empty the entire

220
00:14:45,600 --> 00:14:46,020
cash.

221
00:14:46,440 --> 00:14:47,550
Empty the cash.

222
00:14:48,060 --> 00:14:52,770
And if I try to get it, it shouldn't be there and everything works as expected.

223
00:14:53,580 --> 00:14:54,720
So that's pretty straightforward.

224
00:14:54,840 --> 00:14:56,340
Now let's just verify one more thing.

225
00:14:56,370 --> 00:15:03,210
Let's go back to the home page, and let's make sure that logging a user, in our view, the source

226
00:15:03,210 --> 00:15:06,600
on that and there should be two values with CSR of token here.

227
00:15:06,930 --> 00:15:08,820
There's the first one right here.

228
00:15:09,850 --> 00:15:13,900
And the second one is the hidden field on my form.

229
00:15:14,020 --> 00:15:21,250
OK, so this is a hidden field and it has to be named CSI RF underscore token and the value comes right

230
00:15:21,250 --> 00:15:24,190
from the template data that is passed to every template in the system.

231
00:15:24,790 --> 00:15:28,180
And this and this are identical as they should be.

232
00:15:28,690 --> 00:15:32,170
Now, if I was to go and try to log in right now, it'll work just fine.

233
00:15:32,500 --> 00:15:38,890
But if I was to remove this field, comment that out or hide it or just delete it entirely and then

234
00:15:38,890 --> 00:15:45,070
try to log in, it would not work because that middleware will say, Well, this is not a route that

235
00:15:45,070 --> 00:15:46,810
begins with slash API.

236
00:15:47,350 --> 00:15:56,440
It is a post request, and I can't find a valid value for a post request or a post field named CC RF

237
00:15:56,440 --> 00:15:57,610
underscore token.

238
00:15:57,850 --> 00:16:00,310
So I'm just going to throw an error 400 bad request.

239
00:16:00,520 --> 00:16:06,850
OK, so now we have extra protection and it's really, really easy for end users to implement it.
