1
00:00:00,750 --> 00:00:05,010
So let's write a test for our new session package in the Celebrity House project.

2
00:00:05,100 --> 00:00:12,390
So the first thing I'll do is I will create a new file in the session folder called set up underscore

3
00:00:12,400 --> 00:00:13,290
test start to go.

4
00:00:13,500 --> 00:00:17,250
Now, technically, we don't need this right now, but we're going to need it before too long, so we

5
00:00:17,250 --> 00:00:18,390
may as well do it at the moment.

6
00:00:19,380 --> 00:00:27,960
So it's packaged session and I'll create a funk test me as we've done before, and this takes one parameter

7
00:00:27,960 --> 00:00:31,650
and a pointer to testing Typekit.

8
00:00:34,140 --> 00:00:37,530
OK, now this is going to be dead simple at the moment.

9
00:00:37,650 --> 00:00:44,370
The only thing I'm going to do is type of exit and end run to run our tests.

10
00:00:44,550 --> 00:00:49,470
Try that again or asked exit, import, run.

11
00:00:50,010 --> 00:00:50,550
That's better.

12
00:00:51,060 --> 00:00:53,370
And hopefully, that input imported the OST package.

13
00:00:53,370 --> 00:00:54,210
For me, it did.

14
00:00:54,360 --> 00:00:54,750
Perfect.

15
00:00:55,380 --> 00:00:56,940
So now let's write the actual test.

16
00:00:56,970 --> 00:01:03,120
We'll be modifying this one later on to set up things like a Redis pool when we use a Redis cache for

17
00:01:03,120 --> 00:01:03,780
our session.

18
00:01:05,010 --> 00:01:07,050
But at the moment, we can just write a very simple test.

19
00:01:07,140 --> 00:01:15,180
So let's free to create a new file called Session underscore Tesco and again package session.

20
00:01:17,100 --> 00:01:25,590
And we'll write one test and it's going to be named func and I'm going to call mine test session underscore

21
00:01:26,220 --> 00:01:30,510
in its session, because that's the thing we want to test in this in this package.

22
00:01:31,170 --> 00:01:38,130
And of course, that takes a parameter T pointer to testing Dotti, and it didn't do the import for

23
00:01:38,130 --> 00:01:39,770
me testing dot t.

24
00:01:40,230 --> 00:01:40,700
That's better.

25
00:01:43,800 --> 00:01:45,360
So how do we test our init session?

26
00:01:45,390 --> 00:01:46,110
Well, let's go look at it.

27
00:01:46,320 --> 00:01:53,310
Session don't go in its session and that takes no parameters, but it returns in a session manager.

28
00:01:53,310 --> 00:01:58,590
And of course, it depends upon this receiver having some values, so we'll have to set up a receiver

29
00:01:58,590 --> 00:02:00,750
or the value that will be used for the receiver.

30
00:02:01,710 --> 00:02:04,460
So I'll call mine doesn't matter what I call it, C is fine.

31
00:02:04,950 --> 00:02:09,990
C is assigned the value of and is going to be a reference to.

32
00:02:11,760 --> 00:02:16,620
So an ampersand session and we'll just populate the things we want in there.

33
00:02:16,650 --> 00:02:19,990
So we want cookie like time and I'll make that one.

34
00:02:20,440 --> 00:02:25,230
It doesn't matter for the test and we also want cookie persist.

35
00:02:25,770 --> 00:02:32,340
And I'll set that to true as a string because these are all string values and we'll set cookie name.

36
00:02:32,970 --> 00:02:34,950
We'll make that celerity house

37
00:02:38,940 --> 00:02:45,270
and we'll also set up Cookie Domain, which I'll make local host as long as there's some value in there.

38
00:02:46,740 --> 00:02:49,140
And the session type, I'll make Cookie.

39
00:02:51,480 --> 00:02:54,330
And that's sufficient for our purposes right now, so there is a variable.

40
00:02:55,110 --> 00:03:01,620
Now let's create another variable ver sim a pointer to assess succession manager.

41
00:03:03,150 --> 00:03:05,490
OK, now we're going to use this during the course of our test.

42
00:03:06,150 --> 00:03:12,450
Now will assign a new variable called says, and we'll give it the value of C Dot in its session.

43
00:03:13,350 --> 00:03:19,260
OK, so now I have two things a pointer to SCA session manager right here and I have this variable,

44
00:03:19,260 --> 00:03:21,660
which should be an ex session manager.

45
00:03:21,900 --> 00:03:29,340
OK, so now I want to figure out how I can make sure that I've got some reasonable return value from

46
00:03:29,340 --> 00:03:30,820
that call to in its session.

47
00:03:30,840 --> 00:03:36,900
So I'll create a variable, which I'm going to call says Kind, OK, access kind with a capital K and

48
00:03:36,900 --> 00:03:42,990
that's going to be have the type from the Reflect package dot com right there.

49
00:03:43,290 --> 00:03:45,090
So that should in part reflect for me.

50
00:03:45,900 --> 00:03:53,250
And it did OK, and I'll declare another variable, which is the type versus type on that and that's

51
00:03:53,250 --> 00:03:55,170
reflect type.

52
00:03:58,980 --> 00:04:08,550
Now I'll create a variable called RV for a value, and that will come from reflect dot value of right

53
00:04:08,550 --> 00:04:15,120
there, and I'm going to hand it the CSC variable, I declared right back on line 22, the one we're

54
00:04:15,120 --> 00:04:16,780
getting back for a minute session.

55
00:04:17,580 --> 00:04:20,160
And this is what I'm going to use for my test, at least to start with.

56
00:04:20,400 --> 00:04:26,490
OK, so what I'll do right now is, say for RV Makinde, I'm going to loop through all the kinds in

57
00:04:26,490 --> 00:04:34,520
here is equal to reflect Dot Peter or Pointer or RV.

58
00:04:34,530 --> 00:04:43,770
Makinde again is equal to reflect dot interface.

59
00:04:44,550 --> 00:04:47,510
Better still reflect right reflect interface.

60
00:04:50,910 --> 00:04:55,070
And I'll just print some information out here so we can see what kinds of things we're getting back.

61
00:04:55,080 --> 00:04:58,680
So we'll say from the format package format dot print line.

62
00:05:02,100 --> 00:05:07,830
And this is in the for loop, so I'll just put for loop there, so I know what's going on and I'll print

63
00:05:07,830 --> 00:05:16,020
out RV Makinde and RV type and RV itself just to see what's going on.

64
00:05:16,230 --> 00:05:16,620
OK?

65
00:05:17,130 --> 00:05:24,270
And then I'll assign the value that I get from RV, RV Makinde to that variable set kind.

66
00:05:24,720 --> 00:05:27,180
Susskind is now equal to RV account.

67
00:05:28,410 --> 00:05:34,620
And not surprisingly, Seth type is equal to RV type.

68
00:05:36,450 --> 00:05:38,050
Now, eventually, I want to get out of this.

69
00:05:38,080 --> 00:05:40,960
I'll say RV is equal to RV element.

70
00:05:41,670 --> 00:05:46,290
And once we're through this for loop, here's where we can do some tests.

71
00:05:46,560 --> 00:05:50,640
First of all, I can do a simple test to make sure that what I go back is RV is valid.

72
00:05:50,640 --> 00:05:52,480
So if not, RV don't.

73
00:05:52,530 --> 00:05:56,790
And there's a method built right into this called valid is valid.

74
00:05:57,570 --> 00:06:08,280
If it's not valid, then I have an error T1 error and my message will be invalid type or kind.

75
00:06:09,360 --> 00:06:17,940
And then I'll put it put kind in a colon, make that a semicolon so it's more readable and I'll print

76
00:06:17,940 --> 00:06:18,570
out the kind.

77
00:06:20,040 --> 00:06:25,500
Perfect kind type, ERVEBO type.

78
00:06:28,080 --> 00:06:34,080
So there's one thing we can test now, we actually haven't actually used eSIM or such kind or such type.

79
00:06:34,320 --> 00:06:35,940
So we have to do something with those as well.

80
00:06:36,510 --> 00:06:37,380
So let's try this.

81
00:06:38,070 --> 00:06:45,840
If this kind is not equal to and here's where I can get the kind of the variable that I declared a little

82
00:06:45,840 --> 00:06:51,930
while ago reflect the value of right there.

83
00:06:53,710 --> 00:07:04,190
Essam Typekit, then that's a failing test, so I'll say tort error, wrong, kind returned.

84
00:07:07,340 --> 00:07:13,550
Testing cookies session, this will be testing other kinds of sessions later expected.

85
00:07:14,900 --> 00:07:25,940
And here I'll put reflect that value of some unkind and God.

86
00:07:26,600 --> 00:07:29,090
And here we have Seth kind.

87
00:07:30,800 --> 00:07:32,480
So there's one thing taking care of now.

88
00:07:32,480 --> 00:07:33,680
Let's copy this whole thing

89
00:07:36,500 --> 00:07:41,150
and paste it in here and change this to Seth type.

90
00:07:43,200 --> 00:07:43,860
Try that again.

91
00:07:44,130 --> 00:07:45,060
Just type

92
00:07:48,000 --> 00:07:54,050
and change this to type wrong type returned expected.

93
00:07:54,540 --> 00:07:59,100
This would be type and this becomes less common sense type.

94
00:08:00,280 --> 00:08:00,510
All right.

95
00:08:02,070 --> 00:08:04,680
So we should be able to run these tests now or this test.

96
00:08:04,800 --> 00:08:05,370
Let's try it.

97
00:08:05,400 --> 00:08:13,380
Open a terminal window CD session and go Test Dash V for verbose dot.

98
00:08:15,090 --> 00:08:15,800
And there it is.

99
00:08:15,810 --> 00:08:16,800
It passed.

100
00:08:17,880 --> 00:08:19,380
OK, so that was pretty straightforward.

101
00:08:19,650 --> 00:08:20,460
Let's move on.
