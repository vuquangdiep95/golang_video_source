1
00:00:02,220 --> 00:00:09,180
So let's get started working on implementing migrations in the Seelye tool, and we're going to do some

2
00:00:09,180 --> 00:00:14,190
work in the command line interface and we're going to do some work right up in the celebrities package

3
00:00:14,190 --> 00:00:14,730
itself.

4
00:00:15,030 --> 00:00:17,170
And we're going to start with the celebrities package.

5
00:00:17,190 --> 00:00:23,430
So over in my celebrity's project, at the root level, the application right beside celebrities start,

6
00:00:23,440 --> 00:00:24,980
go or create a new file.

7
00:00:24,990 --> 00:00:27,990
And I'm going to call it migration's dot com.

8
00:00:28,440 --> 00:00:32,130
OK, now we'll give it this package name, which is hilarious.

9
00:00:32,880 --> 00:00:39,000
And what we're going to do in here is write some functions that will run an up migration.

10
00:00:39,000 --> 00:00:43,980
In other words, it will load some file, presumably in the Migrations folder in the Maya project,

11
00:00:44,580 --> 00:00:49,770
and it will execute the sequel it finds inside of there and will also read it migrate down function

12
00:00:49,770 --> 00:00:53,130
that reverses that and we can do it by steps.

13
00:00:53,460 --> 00:00:58,980
And if something goes wrong, we can force the migration and we're going to be doing that using code

14
00:00:59,460 --> 00:01:02,400
from this package over here on GitHub.

15
00:01:02,560 --> 00:01:03,720
So let me go to my web browser.

16
00:01:05,450 --> 00:01:10,460
It's called going dash, migrate, slash, migrate, and there's a link to this in the course resources

17
00:01:10,460 --> 00:01:13,290
for this lecture, but it's pretty straightforward.

18
00:01:13,310 --> 00:01:19,730
I mean, one of the things you can see down here is that it's actually intended to be used as a command

19
00:01:19,730 --> 00:01:20,780
line application.

20
00:01:20,810 --> 00:01:26,180
In other words, you build a binary called migrate like it says right here and you indicate where the

21
00:01:26,180 --> 00:01:30,480
source file is, what the database is and what you want to do migrate up.

22
00:01:30,500 --> 00:01:32,600
And in this case, he wants to go two steps.

23
00:01:33,350 --> 00:01:37,370
But the part I'm interested in is down here.

24
00:01:37,730 --> 00:01:41,630
Use it in your go project, and that's what I want to do.

25
00:01:41,660 --> 00:01:45,650
I'd rather not have to command line utilities for my end users.

26
00:01:46,280 --> 00:01:48,900
I want them to do everything using the command line utility.

27
00:01:48,920 --> 00:01:49,550
We're building.

28
00:01:50,740 --> 00:01:51,520
So let's get started.

29
00:01:52,630 --> 00:01:53,620
So I'll go back to my code

30
00:01:57,070 --> 00:01:58,600
and I'll open my terminal window.

31
00:01:58,930 --> 00:02:06,220
And the first thing I'm going to do is import the necessary packages so I will go and get from my terminal

32
00:02:06,220 --> 00:02:15,970
window GitHub dot com slash golang dash migrate slash migrate slash and I'm going to get version four.

33
00:02:16,000 --> 00:02:21,310
And as I said before, if there's a later version out at the time, you take this course, stick with

34
00:02:21,310 --> 00:02:22,120
version four.

35
00:02:22,120 --> 00:02:27,850
The difference between version four and version five, according to semantic versioning, usually means

36
00:02:27,850 --> 00:02:29,140
there are breaking changes.

37
00:02:29,560 --> 00:02:32,620
So stick with the one I'm using in this course, which is version four.

38
00:02:33,160 --> 00:02:36,610
And after you're done, if you want upgraded to version five or whatever.

39
00:02:36,760 --> 00:02:38,230
That's the time to do it.

40
00:02:38,260 --> 00:02:40,080
Otherwise, you're going to run into problems.

41
00:02:40,090 --> 00:02:41,140
So I'll go get that.

42
00:02:44,760 --> 00:02:45,330
And it gets it.

43
00:02:45,540 --> 00:02:46,530
Now I'm going to go get.

44
00:02:48,150 --> 00:02:53,400
The same URL, but I'm going to do it for specific databases, so I know I'm going to want to be able

45
00:02:53,400 --> 00:02:56,430
to have database slashed my ask you up.

46
00:02:56,880 --> 00:02:59,210
And this is support for MariaDB and my ask you.

47
00:02:59,820 --> 00:03:01,350
So we'll look get that package.

48
00:03:04,390 --> 00:03:07,540
And I'll hit the up arrow and get the one for post-cruise.

49
00:03:10,140 --> 00:03:14,280
They may have come down with the first import, but I'm really not an optimist.

50
00:03:14,610 --> 00:03:18,900
And finally, I want to support file, so slash file.

51
00:03:20,570 --> 00:03:25,460
And it's not database file, it's slash source file, they're.

52
00:03:28,730 --> 00:03:32,810
So those are now all in my government, and they're available to me.

53
00:03:32,870 --> 00:03:39,170
So let's get started in my Migration's Go file, which is at the root level of this hilarious project.

54
00:03:39,900 --> 00:03:45,770
I'm going to, first of all, write a function that has the receivers C pointer to celebrities.

55
00:03:48,500 --> 00:03:49,580
And this is a simple one.

56
00:03:49,610 --> 00:03:56,300
I'm going to say migrate up and it's going to take one argument DSN, which is a string, and that will

57
00:03:56,300 --> 00:03:59,060
be the data source name and a word of caution.

58
00:03:59,060 --> 00:04:04,340
Going migrate actually uses a different minus or postgres driver than I do, so we'll have to rebuild

59
00:04:04,340 --> 00:04:08,630
the DSN back in our in our command line application, but that's not difficult.

60
00:04:09,800 --> 00:04:12,950
So this is going to return potentially an error.

61
00:04:15,260 --> 00:04:21,110
And what we're going to do is create a variable and I'm going to call it four, migrate and check for

62
00:04:21,110 --> 00:04:21,650
an error.

63
00:04:21,830 --> 00:04:24,680
And we're going to call from the migrate package.

64
00:04:24,680 --> 00:04:26,810
And I might have to put it in manually.

65
00:04:27,110 --> 00:04:28,850
They seem to have to do that way too much.

66
00:04:29,580 --> 00:04:30,410
Now there it is.

67
00:04:30,890 --> 00:04:40,100
Migrate got new and we're going to migrate into string argument file colon slash slash.

68
00:04:40,970 --> 00:04:47,960
And then I'll close my quotes and append to that C dot route path, which is the root path of the application

69
00:04:47,960 --> 00:04:54,800
using celebrities plus slash and the folder where we're going to put our migrations is migrations,

70
00:04:55,070 --> 00:04:55,460
plural.

71
00:04:55,460 --> 00:05:01,340
Like that and it requires a second argument, which is the DSN, and we receive that as a parameter

72
00:05:01,340 --> 00:05:02,630
in the call to this function.

73
00:05:03,410 --> 00:05:04,280
So we'll check for an error.

74
00:05:04,520 --> 00:05:05,870
If error is not equal to nil,

75
00:05:09,200 --> 00:05:10,640
then we'll just return the error.

76
00:05:13,170 --> 00:05:17,490
Now we're going to call defer import clothes.

77
00:05:17,610 --> 00:05:19,990
We're going to close this file after we're done with it.

78
00:05:20,010 --> 00:05:26,400
OK, so after this application, after this function exits AM, we'll call its close function.

79
00:05:27,760 --> 00:05:32,200
Now we'll again check for an error if error equals.

80
00:05:32,500 --> 00:05:37,990
And this is m the variable, we got back on Line six and we're going to call a method on it called up

81
00:05:41,020 --> 00:05:42,040
and we'll check for an error.

82
00:05:42,190 --> 00:05:43,150
It's not equal to nil.

83
00:05:44,980 --> 00:05:51,190
And what I'm going to do here is just say Log Dot Print Line, which I'll delete eventually, probably

84
00:05:52,690 --> 00:05:55,360
error running migration

85
00:05:59,860 --> 00:06:00,250
in the error.

86
00:06:02,560 --> 00:06:04,960
And I'll return the air because we can't go any further.

87
00:06:06,310 --> 00:06:15,250
Otherwise we return nil, so assuming that we have a migration to run and we will by the time we call

88
00:06:15,250 --> 00:06:20,080
this function, this should attempt to run the migration and look there in the migrations folder and

89
00:06:20,080 --> 00:06:23,260
say, Are there any migrations here that have not yet run?

90
00:06:23,500 --> 00:06:24,820
If so, run them.

91
00:06:25,210 --> 00:06:27,190
OK, so up is pretty straightforward.

92
00:06:28,420 --> 00:06:33,040
But of course, you also have to run down migrations, and I'll write a function right now with a receiver

93
00:06:33,040 --> 00:06:42,880
of C pointer to celebrities, and I'm going to call this one migrate down all, run all the down migrations.

94
00:06:43,180 --> 00:06:48,250
DSN again, our connection string, which is a string, and again, it returns an error, potentially.

95
00:06:49,420 --> 00:06:55,780
So just like we did before, we're going to have this, I'll copy this embarrassment and the error and

96
00:06:55,780 --> 00:07:00,370
the defer because I'm going to need them all and I'll paste it here.

97
00:07:00,520 --> 00:07:05,290
So we tell it where to find the migrations we create, the variable em, we defer clothes.

98
00:07:05,590 --> 00:07:11,620
And not surprisingly, it's pretty much the same thing we did before, but we're running down migrations.

99
00:07:11,770 --> 00:07:22,480
If error is assigned, the value of import down this time and error is not equal to nil, return the

100
00:07:22,480 --> 00:07:27,760
error, otherwise return nil.

101
00:07:29,230 --> 00:07:29,530
OK.

102
00:07:29,770 --> 00:07:31,590
But you can see it's pretty straightforward logic.

103
00:07:31,600 --> 00:07:32,710
It's not difficult at all.

104
00:07:34,120 --> 00:07:40,540
Now we're going to have another one, which I'll call steps and that will run in migrations.

105
00:07:40,690 --> 00:07:45,580
And when end, which is an integer, if it's positive, it'll run up migrations and when it's negative,

106
00:07:45,580 --> 00:07:46,810
it'll run down migrations.

107
00:07:46,930 --> 00:07:47,260
OK.

108
00:07:48,640 --> 00:07:53,770
So we want to run one migration backwards, for example, this is the function will be, call it, so

109
00:07:53,770 --> 00:08:00,310
func receiver of C pointer to celebrities and I'll call it steps.

110
00:08:00,910 --> 00:08:05,800
And these have to have capital letters as their first name, or we're not going to be able to call them

111
00:08:07,360 --> 00:08:08,470
in it.

112
00:08:08,830 --> 00:08:13,030
And the DSN string and it returns potentially in error.

113
00:08:14,350 --> 00:08:15,760
And just the same as before.

114
00:08:15,770 --> 00:08:17,400
I need to get all of this.

115
00:08:17,440 --> 00:08:20,200
So a copy it and I'll paste it in there.

116
00:08:22,420 --> 00:08:27,250
And I will run if error is a sign, the value of important steps.

117
00:08:28,720 --> 00:08:35,920
And of course, we pass it how many steps we want to go in and if there is not equal to nil, then we

118
00:08:35,920 --> 00:08:39,120
return the error, otherwise return.

119
00:08:45,680 --> 00:08:50,420
Now, sometimes when you're running migrations, you might have an error in the migration file itself.

120
00:08:51,020 --> 00:08:56,540
And when you do that, one of the really irritating things about this particular package migrate going

121
00:08:56,540 --> 00:09:00,030
migrate is that it actually causes some grief.

122
00:09:00,050 --> 00:09:04,200
It marks something is dirty in the database and we need a way of addressing that.

123
00:09:04,220 --> 00:09:10,400
So what I'm going to do is create a simple function called with a receiver of C pointer to celebrities,

124
00:09:12,380 --> 00:09:17,630
and I'm going to call it migrate force, which fortunately is available to us.

125
00:09:17,930 --> 00:09:21,950
And again, it takes the DSM the string and it returns, potentially an error.

126
00:09:24,910 --> 00:09:31,420
So we're going to again need to open our migration's folder, so we'll copy all of this and paste it

127
00:09:31,420 --> 00:09:31,900
in here.

128
00:09:33,490 --> 00:09:41,410
And this time we're going to say if error is assigned the value of EMD up force and we're going to force

129
00:09:41,410 --> 00:09:47,890
it to get rid of the last one, so minus one, and that will fix any problems we have, at least in

130
00:09:47,890 --> 00:09:49,210
the vast majority of cases.

131
00:09:49,210 --> 00:09:53,090
It's worked for me so far and we'll return the error if there's an error.

132
00:09:53,860 --> 00:09:56,020
Otherwise, we return nil.

133
00:09:58,720 --> 00:10:00,220
OK, so these are our functions.

134
00:10:00,410 --> 00:10:05,410
We're not doing anything with them yet because we have some work to do in our command line application

135
00:10:05,410 --> 00:10:08,260
before we can ever call them, but at least they're set up.

136
00:10:08,980 --> 00:10:12,340
Now we haven't tested anything yet, and we will write tests for this.

137
00:10:12,640 --> 00:10:17,410
But let's see if we can get things working first, and then we'll write some tests after the fact just

138
00:10:17,410 --> 00:10:19,090
to make sure we cover all of the cases.

139
00:10:19,510 --> 00:10:20,200
Let's move on.
