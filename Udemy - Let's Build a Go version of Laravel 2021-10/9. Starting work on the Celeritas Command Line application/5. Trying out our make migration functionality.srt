1
00:00:01,680 --> 00:00:06,480
So we appear to have written the code necessary to generate empty up and down migrations.

2
00:00:06,510 --> 00:00:07,950
They only consist of comments.

3
00:00:08,070 --> 00:00:09,600
Let's give it a try and see if it works.

4
00:00:09,780 --> 00:00:15,150
So I'm still in this hilarious project and I've opened a terminal and I'm at the root level of my project

5
00:00:15,600 --> 00:00:18,120
right beside Celebrity Moscow so I can take.

6
00:00:18,330 --> 00:00:21,150
I can type, make, build, underscore Seelye.

7
00:00:21,900 --> 00:00:28,440
And that should build the new version of our executable and put it over here in our My App project.

8
00:00:28,560 --> 00:00:29,280
And it's there.

9
00:00:30,060 --> 00:00:31,230
So let's try it out.

10
00:00:31,590 --> 00:00:38,520
So I'm at the root level of my application, so I'm in the My App folder and I'll type dot slash celebrities

11
00:00:39,030 --> 00:00:41,610
make migration and I'll just call it test.

12
00:00:41,880 --> 00:00:43,100
I'm not going to do anything with it yet.

13
00:00:43,110 --> 00:00:44,580
I just want to make sure it actually works.

14
00:00:45,390 --> 00:00:49,380
And it doesn't, and it doesn't for a very specific reason.

15
00:00:50,160 --> 00:00:58,080
If you read that error message closely, it says error open templates, slash migrations, slash migration

16
00:00:58,080 --> 00:00:58,600
dot.

17
00:00:58,740 --> 00:00:59,730
So far, so good.

18
00:01:00,210 --> 00:01:03,000
But then we have another dot and update sequel.

19
00:01:03,270 --> 00:01:05,370
In other words, what should be there?

20
00:01:05,400 --> 00:01:08,580
The word postgres, in my case, it doesn't exist.

21
00:01:09,120 --> 00:01:11,400
And if you think it through, this makes perfect sense.

22
00:01:11,430 --> 00:01:17,220
Let's go back to our Celebrity House project and let's look at our celebrities main.

23
00:01:17,220 --> 00:01:19,320
Don't go file right here.

24
00:01:19,660 --> 00:01:26,340
Online 14, I've declared a variable cell of type celebrities start celebrities, and that's what holds

25
00:01:26,670 --> 00:01:33,480
things like the root path that I absolutely need and data type, which is either Postgres or MySQL.

26
00:01:33,720 --> 00:01:37,010
And although I declare that variable, at no point do I do anything with it.

27
00:01:37,020 --> 00:01:38,580
I never populate its values.

28
00:01:39,420 --> 00:01:43,520
So let's fix that and we can fix it really easily in the main function.

29
00:01:43,530 --> 00:01:49,410
After I validate the input and make sure there's at least one thing after make what's called a function

30
00:01:49,410 --> 00:01:51,210
that once again does not yet exist.

31
00:01:51,390 --> 00:01:55,860
And I call it set up and I'll put that file, I'll put the function.

32
00:01:55,860 --> 00:01:58,110
I'm going to call setup in its own file.

33
00:01:58,170 --> 00:02:02,730
So in CMD Seelye, I'll create a new file called Helpers Dot gov.

34
00:02:02,940 --> 00:02:06,390
I don't have to, but I like to keep things more or less organized.

35
00:02:07,470 --> 00:02:13,170
So helper stucco has package me and we're going to have one function here called setup that takes no

36
00:02:13,170 --> 00:02:14,640
arguments and returns nothing.

37
00:02:15,930 --> 00:02:21,730
And what we want to do here is, in effect, a subset of the sort of things we do when a celebrity's

38
00:02:21,780 --> 00:02:23,040
application starts up.

39
00:02:23,220 --> 00:02:29,040
In other words, we want to load the dot on file and populate some values in the celebrity's variable,

40
00:02:29,820 --> 00:02:30,930
so we can do that really easily.

41
00:02:31,620 --> 00:02:39,090
We'll check for an error and I'll call from the package go dot on which I have access to Dot on and

42
00:02:39,090 --> 00:02:43,800
I'm going to call load just like I do when I start up the application, the web app, and I'll check

43
00:02:43,800 --> 00:02:45,930
for an error if error is not equal to nil.

44
00:02:46,830 --> 00:02:48,840
Then we'll exit gracefully with the error.

45
00:02:50,310 --> 00:02:53,600
But assuming I've done that, then I can do certain things.

46
00:02:53,610 --> 00:02:57,030
So we have that variable cell, which is a package level variable.

47
00:02:57,060 --> 00:02:58,380
We can we can work with that.

48
00:02:59,340 --> 00:03:01,740
So let's try one thing.

49
00:03:01,740 --> 00:03:09,150
We need to get the root directory, the root path to our web application, and we can do that really

50
00:03:09,150 --> 00:03:15,810
easily by declaring a variable name path and checking for an error and calling OS Scott get working

51
00:03:15,810 --> 00:03:16,350
directory.

52
00:03:16,860 --> 00:03:17,220
OK.

53
00:03:18,090 --> 00:03:23,130
And of course, this assumes that you're running the celerity command from a directory that has a dot

54
00:03:23,130 --> 00:03:28,860
on file, and if not, we get an error message right there from Line 12, and it really doesn't matter

55
00:03:28,860 --> 00:03:31,780
where that celerity binary exists.

56
00:03:31,800 --> 00:03:38,340
If you, for example, put it in some folder that's accessible from your path as long as you execute

57
00:03:38,340 --> 00:03:43,260
that command from the directory where the dot on file lives, then you'll be fine.

58
00:03:43,680 --> 00:03:46,110
So we'll check for an error, and I'll just copy and paste this

59
00:03:48,930 --> 00:03:49,500
right here.

60
00:03:50,520 --> 00:03:56,370
And now that I have access to the root path for the application, I can say things like it's spelled

61
00:03:56,370 --> 00:03:56,570
out.

62
00:03:56,580 --> 00:04:03,520
Root path is equal to path, and I can also now load that database type that I need.

63
00:04:03,540 --> 00:04:08,890
So DBE type debug data type is equal to OS.

64
00:04:08,910 --> 00:04:09,740
Don't get on.

65
00:04:09,990 --> 00:04:14,910
We just read it from the environment and it's called database underscore type.

66
00:04:16,710 --> 00:04:19,050
And that's all I really need to do, I think.

67
00:04:19,260 --> 00:04:20,670
Let's rebuild the application.

68
00:04:21,030 --> 00:04:25,260
Make Build Selah in this hilarious project from the root directory.

69
00:04:26,370 --> 00:04:31,260
And let's switch over to my app and let's try everything that command again.

70
00:04:31,440 --> 00:04:37,440
So I hit the up arrow dot slash Solaris House, Make Migration Test, and if I look at my migrations

71
00:04:37,440 --> 00:04:39,870
folder right now, this should be nothing in it and it's empty.

72
00:04:40,140 --> 00:04:40,770
So let's run that.

73
00:04:42,530 --> 00:04:43,130
And Iran.

74
00:04:43,880 --> 00:04:44,330
That's good.

75
00:04:45,020 --> 00:04:46,670
So let's look in the migration folder.

76
00:04:46,820 --> 00:04:48,380
There are two migrations.

77
00:04:48,980 --> 00:04:50,070
So let's try the up one.

78
00:04:50,090 --> 00:04:52,100
It should be a commented out create table.

79
00:04:52,310 --> 00:04:53,030
And it is.

80
00:04:53,240 --> 00:04:54,380
And let's look at the down one.

81
00:04:54,860 --> 00:04:57,290
And it's dropped some table perfect.

82
00:04:57,830 --> 00:05:01,640
So now we have a means of generating migrations in the next lecture.

83
00:05:01,790 --> 00:05:04,490
We'll actually try running migrations.
