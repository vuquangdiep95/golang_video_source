1
00:00:01,150 --> 00:00:06,870
So last time we worked on this, file migrations don't go at the top level of the celebrities package,

2
00:00:06,880 --> 00:00:13,390
and I said we were done and we're not quite done because these functions like here end up.

3
00:00:13,390 --> 00:00:14,640
They're actually using the database.

4
00:00:14,650 --> 00:00:18,010
So we have to do some additional imports that I left out last time.

5
00:00:18,160 --> 00:00:19,330
And I do that quite often.

6
00:00:19,990 --> 00:00:23,160
So we need to import them even though they're not explicitly being used.

7
00:00:23,170 --> 00:00:29,830
So we'll start with a blank identifier and we're going to have to import GitHub dot com slash go dash

8
00:00:29,830 --> 00:00:32,770
school dash driver slash MySQL.

9
00:00:32,830 --> 00:00:34,060
We're going to want that one, for sure.

10
00:00:35,380 --> 00:00:42,970
And we're also going to want another blank identifier and GitHub dot com slash.

11
00:00:44,040 --> 00:00:53,430
Golang migrate slash migrate slash v4 slash database slash MySQL.

12
00:00:55,470 --> 00:01:01,110
And I will duplicate that one and change this one to post-cruise, which is the one who will be using

13
00:01:01,110 --> 00:01:01,710
shortly.

14
00:01:02,570 --> 00:01:09,170
And then I'll duplicate that again and change this to source in this to file file.

15
00:01:10,610 --> 00:01:11,910
And that should be it for that.

16
00:01:11,960 --> 00:01:16,400
And the only other change I'm going to make is here on Line 21, and this is not critical, but I like

17
00:01:16,400 --> 00:01:17,150
to be consistent.

18
00:01:17,600 --> 00:01:19,410
I want to make that an assignment operator.

19
00:01:19,430 --> 00:01:22,970
So it creates a new era variable for these four lines of code.

20
00:01:24,150 --> 00:01:28,960
OK, so now let's get started working on back in our Seelye.

21
00:01:28,980 --> 00:01:30,270
I'll go to main doggo.

22
00:01:31,320 --> 00:01:36,740
And what I want to do is add a command make and that will make various things.

23
00:01:36,750 --> 00:01:38,730
And the first thing we're going to make is a migration.

24
00:01:39,360 --> 00:01:43,220
So we'll add a case here case.

25
00:01:43,560 --> 00:01:43,830
OK.

26
00:01:50,400 --> 00:01:51,480
And when we call make.

27
00:01:52,760 --> 00:01:56,360
We're going to require argument to to have some value.

28
00:01:56,420 --> 00:02:01,610
So let's put it in our checking here, if earned two is equal to an empty string.

29
00:02:01,970 --> 00:02:05,420
What it will be if it's not specified, which is, say, exit gracefully.

30
00:02:06,610 --> 00:02:15,640
And we'll hand it errors, Don New, and the error will be make requires

31
00:02:19,060 --> 00:02:22,570
a sub command and then I'll listen.

32
00:02:23,590 --> 00:02:26,640
We're going to have migration, which is the one I'm going to be working with right now.

33
00:02:26,650 --> 00:02:31,810
But ultimately we're also going to have model and handler to make it even easier for people to write

34
00:02:31,810 --> 00:02:32,140
code.

35
00:02:32,560 --> 00:02:38,020
OK, so exit gracefully will stop the application, so we don't have to worry about anything else in

36
00:02:38,020 --> 00:02:38,740
that if statement.

37
00:02:39,850 --> 00:02:42,220
Otherwise, we're going to look for an error.

38
00:02:43,210 --> 00:02:47,230
We're going to make that equal to a function that doesn't exist yet, but we'll start work on it shortly.

39
00:02:47,620 --> 00:02:49,120
We're going to call it do make.

40
00:02:50,620 --> 00:02:56,500
And it will take two arguments argument two, which has to be there an argument three which might be

41
00:02:56,500 --> 00:02:56,920
empty.

42
00:02:57,250 --> 00:02:57,630
OK.

43
00:02:58,270 --> 00:02:59,230
And we'll check for an error.

44
00:02:59,260 --> 00:03:04,510
If error is not equal to nil, then exit gracefully and we'll just pass it the error.

45
00:03:05,050 --> 00:03:10,310
OK, so we don't have a do make function, so we probably should go make one of those.

46
00:03:10,360 --> 00:03:16,360
So what I'm going to do is in the Seelye folder just to make things a little cleaner or create a new

47
00:03:16,360 --> 00:03:18,430
file called Makgoba.

48
00:03:19,450 --> 00:03:26,500
And it will be package main and we'll have a function called Do Make, which will take two arguments

49
00:03:26,500 --> 00:03:31,340
or two and three both of type string and potentially it returns an error.

50
00:03:32,740 --> 00:03:38,980
So let's put return nil here just so everything will compile, and we won't have any errors showing

51
00:03:38,980 --> 00:03:39,220
up.

52
00:03:39,880 --> 00:03:44,380
And I want to go back to mean, don't go, that error should be gone and it is good.

53
00:03:45,550 --> 00:03:47,250
So what are we going to do in this make function?

54
00:03:47,260 --> 00:03:49,540
Well, again, we're going to switch on argument too.

55
00:03:50,380 --> 00:03:56,440
So for right now, we'll say switch or two and we'll have one case.

56
00:03:56,740 --> 00:03:58,900
Case will be migration.

57
00:04:00,190 --> 00:04:02,470
OK, and here's what we're going to make our migration.

58
00:04:03,130 --> 00:04:08,200
Now, the very first thing we need to know because we're going to support both MySQL and we're going

59
00:04:08,200 --> 00:04:12,790
to support Postgres, is what database is this person using?

60
00:04:13,030 --> 00:04:15,940
So what's their default database in the dart on file?

61
00:04:16,180 --> 00:04:16,600
OK.

62
00:04:17,200 --> 00:04:24,730
And we can get that, of course, by declaring a variable DB type and assigning that the value of from

63
00:04:24,730 --> 00:04:27,820
that celebrity's variable we have at the very top of our file.

64
00:04:29,090 --> 00:04:35,060
And we're going to look for is DB slash DB Typekit or database type.

65
00:04:37,510 --> 00:04:41,650
And we'll also, since we're running immigration, we're going to ask people to give the migration a

66
00:04:41,650 --> 00:04:46,690
name, some kind of name, just so we have an identifier that makes it easy to understand which migration

67
00:04:46,690 --> 00:04:47,290
is which.

68
00:04:47,920 --> 00:04:52,270
So we'll check for our imagery if our three is equal to an empty string.

69
00:04:55,320 --> 00:04:59,100
Then we want again to exit gracefully and.

70
00:05:00,340 --> 00:05:01,510
We're going to give it a new error.

71
00:05:01,660 --> 00:05:09,760
Errors don't know now, and we'll say that the errors you must give the migration any.

72
00:05:13,200 --> 00:05:18,540
But if we get past that, then we're ready to start building a migration now.

73
00:05:19,510 --> 00:05:27,900
Now, typically, migrations are named using a convention and the name is, say, the current Unix micro

74
00:05:27,900 --> 00:05:33,480
time, followed by an underscore followed by whatever name the person gave their migration.

75
00:05:33,730 --> 00:05:35,010
OK, so let's build a name.

76
00:05:36,030 --> 00:05:45,420
So we'll give our migration a file name, assign the value of we use format as printouts, and our format

77
00:05:45,420 --> 00:05:49,470
string will just be an integer, followed by an underscore followed by a string.

78
00:05:50,490 --> 00:05:54,780
And our substitutions for those will be from the time package we'll call now.

79
00:05:57,970 --> 00:05:59,770
And we want unique micro.

80
00:06:00,910 --> 00:06:02,110
That's our first substitution.

81
00:06:02,320 --> 00:06:05,680
And the second thing is just earned three whatever they decided to call their migration.

82
00:06:05,710 --> 00:06:09,430
So this is the base for the two files that we're going to create.

83
00:06:09,460 --> 00:06:11,890
We're going to create an up migration and a down migration.

84
00:06:13,600 --> 00:06:16,120
So let's get the full path up file.

85
00:06:16,510 --> 00:06:21,460
The up migration is going to be assigned the value of the root path of our application because we're

86
00:06:21,460 --> 00:06:27,760
giving the full path to this so settled up route path plus the migrations folder.

87
00:06:30,490 --> 00:06:41,590
Plus, file name, which we just built, plus a dog, and then we want the DV type minus two L or Postgres

88
00:06:42,460 --> 00:06:45,090
plus up Estuvo.

89
00:06:46,060 --> 00:06:53,020
So that's our upfront and our downfall will be almost exactly the same thing, but it will be down school

90
00:06:54,130 --> 00:06:57,650
and we'll have to, of course, use the variable don't file.

91
00:06:59,440 --> 00:07:02,440
So now we have the full path named the files I want to create.

92
00:07:03,190 --> 00:07:07,630
So the next thing I would do at this point, and we're going to leave the code broken and pick it up

93
00:07:07,630 --> 00:07:13,180
in the next lecture, the next thing I want to do is I want to create some templates for migrations,

94
00:07:13,480 --> 00:07:17,980
things that I can copy in there that are something more than just an empty file because I want to give

95
00:07:17,990 --> 00:07:20,140
my end users something to start with.

96
00:07:20,680 --> 00:07:28,210
So we'll create a migration template for an app migration and a migration template for a down migration,

97
00:07:28,240 --> 00:07:31,450
and we'll do it for Postgres to start with because that's our default database.

98
00:07:31,960 --> 00:07:34,120
And later on, we'll do it from my school as well.

99
00:07:34,360 --> 00:07:34,690
OK.

100
00:07:35,200 --> 00:07:40,510
So we're going to create a function, something like copy files from template, and we'll create an

101
00:07:40,510 --> 00:07:46,090
embedded file system that has templates we want to work with and there'll be migrations and models and

102
00:07:46,090 --> 00:07:47,470
handlers and all sorts of things.

103
00:07:47,950 --> 00:07:52,180
And then we can use those two functions or that function copy files from template anywhere.

104
00:07:52,180 --> 00:07:55,300
We need to get started on that in the next election.
