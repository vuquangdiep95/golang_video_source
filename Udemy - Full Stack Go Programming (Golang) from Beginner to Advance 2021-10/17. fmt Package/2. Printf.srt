1
00:00:13,080 --> 00:00:16,750
Hello and welcome to the golden programming language course.

2
00:00:17,340 --> 00:00:24,030
In the previous session, we talked about print function, and in this session we want to talk about

3
00:00:24,030 --> 00:00:26,640
the others empty package concept.

4
00:00:30,510 --> 00:00:32,130
Print if function.

5
00:00:34,560 --> 00:00:42,510
The print function in go language formats, according to a format, is spicy air and rise to standard

6
00:00:42,510 --> 00:00:50,610
output print a format, staying put the string as the user's choice and then prints the formatted string

7
00:00:50,850 --> 00:00:57,600
onto the output console, beginning from the current cursor position without appending any space or

8
00:00:57,600 --> 00:01:00,720
new lines, unless explicitly coded.

9
00:01:02,690 --> 00:01:06,030
This function is defined under the empty package here.

10
00:01:06,050 --> 00:01:10,430
You need to import this empty package in order to use this function.

11
00:01:10,880 --> 00:01:12,980
Now you can see the same tests.

12
00:01:14,270 --> 00:01:21,630
Parameters, dysfunction, access to parameters which are illustrated below format extreme.

13
00:01:22,310 --> 00:01:28,550
This contains some strings along with some depth and a three dot interface.

14
00:01:28,880 --> 00:01:37,820
This contains a specified constant variables and the return value it returns the number of by 310 and

15
00:01:37,820 --> 00:01:39,590
any right or encountered.

16
00:01:40,630 --> 00:01:46,240
Now, let's go to the school curriculum to illustrate the uses of print a function

17
00:01:50,350 --> 00:01:54,640
first, deep learning some history variables that.

18
00:01:56,410 --> 00:02:14,140
For example, the name and value and equals by the values go and true and language.

19
00:02:16,570 --> 00:02:21,310
Now calling print and function go to the next line if!

20
00:02:21,340 --> 00:02:24,550
A. Don't print if.

21
00:02:29,410 --> 00:02:29,860
OK.

22
00:02:29,980 --> 00:02:39,760
For former, this drink as argument dry earth, and it's because it's case is conversion connector for

23
00:02:39,940 --> 00:02:45,720
string value, this is a person.

24
00:02:46,090 --> 00:02:46,740
Yes.

25
00:02:47,380 --> 00:02:54,760
The art back is less and and said name and venue.

26
00:02:57,310 --> 00:03:01,480
Now let's define some other variables like that.

27
00:03:02,770 --> 00:03:04,990
Number one, No.

28
00:03:05,140 --> 00:03:16,440
Two and number three, integer variable equals five, 10 and 15 now would print a function again.

29
00:03:17,260 --> 00:03:19,780
FMC Dot Plaintiff.

30
00:03:23,830 --> 00:03:34,450
Because we define integer variables, we said Person de la Chase as an emerging characters, plus per

31
00:03:34,570 --> 00:03:42,400
cent the equals per cent the bank and and set these variables here.

32
00:03:42,850 --> 00:03:43,390
No.

33
00:03:44,640 --> 00:03:46,710
One, No.

34
00:03:47,640 --> 00:03:49,800
Two and No.

35
00:03:51,780 --> 00:03:57,420
Three, reform the court, save the project and executed the original.

36
00:04:00,460 --> 00:04:08,140
Now we can see the output go is a programming language and five plus 10 equals 15.

37
00:04:08,380 --> 00:04:13,480
So we could use print at function for formatting variables and display.

38
00:04:13,600 --> 00:04:19,960
Then in order not to prolong the time of decision, we will finish it and we will continue the content

39
00:04:20,200 --> 00:04:21,370
in the next session.

40
00:04:21,550 --> 00:04:22,050
Goodbye.
