1
00:00:14,720 --> 00:00:18,110
Hello and welcome to the Golang programming language course.

2
00:00:18,530 --> 00:00:23,570
In the previous session, we talked about print function and indecision.

3
00:00:23,600 --> 00:00:27,050
We want to talk about the others if empty package concept.

4
00:00:30,890 --> 00:00:32,870
Print and function.

5
00:00:35,530 --> 00:00:43,240
The print and function in go language formats, using the default formats for its utterance and rise

6
00:00:43,240 --> 00:00:51,370
to a standard output, print and function works the same as print function, except that is Apple's

7
00:00:51,370 --> 00:00:54,730
new line at the end of the improved history.

8
00:00:54,910 --> 00:01:01,090
And so whatever the output is, in the end, the cursor will move to the next line.

9
00:01:01,630 --> 00:01:09,430
Also, in case any variables are added to the input stream, then this function will ensure that the

10
00:01:09,430 --> 00:01:12,730
variables are separated by space in between.

11
00:01:13,540 --> 00:01:20,410
Here, the spaces are always added between operations, and a new line is appended at the end.

12
00:01:20,650 --> 00:01:24,280
Moreover, dysfunction is defined under the empty package.

13
00:01:24,550 --> 00:01:29,560
Here you need to import this empty package in order to use this function.

14
00:01:30,160 --> 00:01:38,440
Now you can see the syntax a tree that interface that contains some strings, including a specified

15
00:01:38,440 --> 00:01:41,510
constant variable and return value.

16
00:01:41,830 --> 00:01:45,940
It returns the number of bytes written and in write or encounter.

17
00:01:47,010 --> 00:01:52,260
Let's go to the school program to illustrate the uses of print and function.

18
00:01:54,060 --> 00:02:07,980
First, declaring some extreme variables that name and value equals glue and programming

19
00:02:10,440 --> 00:02:11,220
language.

20
00:02:13,530 --> 00:02:27,330
Now, concrete information, if A. Don't change a set variable name and add this string value like is

21
00:02:27,840 --> 00:02:32,850
a and the itinerary variable a large value.

22
00:02:33,990 --> 00:02:45,570
Now let's define some other variables for the example that number one, number two, number three and

23
00:02:45,570 --> 00:02:46,170
No.

24
00:02:46,410 --> 00:02:49,260
Four and initialize these variables.

25
00:02:49,680 --> 00:03:00,960
Five, 10, 15 and 15 now cutting print and function again and display plus and multiplication of these

26
00:03:00,960 --> 00:03:03,840
variables go to the next line.

27
00:03:04,560 --> 00:03:19,830
If you don't print and set number one plus sit known to sit equals, sit No.

28
00:03:20,640 --> 00:03:24,090
Three and go to the next line.

29
00:03:25,000 --> 00:03:40,850
F.A. Dot print and set number one multiplication number two and set equals and set number four.

30
00:03:42,000 --> 00:03:46,140
OK, reformat the code, save the project and execute the program.

31
00:03:48,850 --> 00:03:52,220
Now we can see the output in the first quote.

32
00:03:52,240 --> 00:03:59,430
It can be seen that the function print is not containing any space within the specified extremes.

33
00:03:59,650 --> 00:04:08,290
Still in output is print space and in the second code it can be seen that the function and is not using

34
00:04:08,290 --> 00:04:11,470
any new line that cost less and is still in the output.

35
00:04:11,470 --> 00:04:17,230
It prints new line in order not to prolong the time of decision to be finished.

36
00:04:17,410 --> 00:04:20,470
And we will continue the content in the next session.

37
00:04:20,710 --> 00:04:21,280
Goodbye.
