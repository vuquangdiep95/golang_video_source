1
00:00:14,390 --> 00:00:20,810
Hello and welcome to the Golden and Programming Languages course in this section devoted to talking

2
00:00:20,810 --> 00:00:22,490
about string concepts.

3
00:00:27,380 --> 00:00:28,970
This strings in go, Lang.

4
00:00:30,840 --> 00:00:39,000
Ingo Language's histories are different from other languages like Java, C++, Python and etc..

5
00:00:40,020 --> 00:00:46,980
It is a sequence of very evil with characters where each and every character is represented by one or

6
00:00:46,980 --> 00:00:51,930
more by using UTF eight and coding or in other wars.

7
00:00:52,140 --> 00:01:00,570
Extremes are the immutable chain of arbitrary bias, including bias with zero value or string is read

8
00:01:00,570 --> 00:01:07,710
only a slice of bias, and the bias of the strings can be represented in the Unicode takes using UTF

9
00:01:08,010 --> 00:01:17,310
eight encoding due to UTF eight, including go language string can contain it takes, which is the mixture

10
00:01:17,310 --> 00:01:23,790
of any language presenting the work without any confusion and limitation of the page.

11
00:01:24,150 --> 00:01:27,870
Generally, extremes are enclosed in double quotes.

12
00:01:29,890 --> 00:01:31,240
This string literal.

13
00:01:32,780 --> 00:01:37,640
In language is strong, literatures are created in two different ways.

14
00:01:38,480 --> 00:01:45,230
First, using double quotes here, they assume these roles are creating using double quotes.

15
00:01:45,740 --> 00:01:51,290
This type of string support escape character, but does not expand multiple lines.

16
00:01:51,830 --> 00:01:56,510
This type of string e-tron's is widely used in goal and programs.

17
00:01:57,890 --> 00:02:06,780
Second, using tactics here of the extremely strong are created using back ticks and also known as road

18
00:02:06,980 --> 00:02:07,390
ROMs.

19
00:02:08,060 --> 00:02:09,830
Roll it rolls do not stop.

20
00:02:09,830 --> 00:02:16,790
All escape characters can expand multiple lines and may contain any character except Bektic.

21
00:02:17,900 --> 00:02:24,820
It is generally used for writing multiple line message in the regular expression and invest in it.

22
00:02:26,030 --> 00:02:30,710
Let's go to this school program to illustrate how to use strings.

23
00:02:34,230 --> 00:02:37,710
First, go to Explorer and create a project folder

24
00:02:41,010 --> 00:02:55,200
for the example strings and create a file name like me that go go to the file and create package name

25
00:02:56,850 --> 00:03:05,220
and create meaningful punch hole, hopefully creating and initializing a variable with the string using

26
00:03:05,220 --> 00:03:08,100
shorthand declaration for the example

27
00:03:10,620 --> 00:03:17,320
name one column equals and set a value for display.

28
00:03:17,340 --> 00:03:26,310
The link came second, creating and initializing every bit with the string, using bad keyboard and

29
00:03:26,310 --> 00:03:29,700
using double code and adding escape character.

30
00:03:30,390 --> 00:03:32,010
Go to the next line.

31
00:03:33,600 --> 00:03:37,410
Define that name to.

32
00:03:39,960 --> 00:03:43,110
Tie this string equals

33
00:03:45,540 --> 00:04:01,440
go through your end and cityscape character like Beckett's left end and language and turn creating an

34
00:04:01,440 --> 00:04:09,180
initializing a variable with a string, using that keyboard, using back ticks as in the it rolls and

35
00:04:09,180 --> 00:04:10,890
adding escape character.

36
00:04:14,650 --> 00:04:16,550
That name.

37
00:04:17,560 --> 00:04:22,570
Three Typekit, this drink he calls back take.

38
00:04:24,520 --> 00:04:37,120
Go through training and sit this gay character like back in snatch and language now displayed these

39
00:04:37,120 --> 00:04:38,290
extreme variables.

40
00:04:39,850 --> 00:05:00,430
If we name one, if the name to display name three, reformat the code and save the projects, go to

41
00:05:00,430 --> 00:05:10,510
the terminal first, go to Project Folder, see the strings and run the program by the client.

42
00:05:10,510 --> 00:05:13,870
Go on the main dot go.

43
00:05:16,250 --> 00:05:18,380
Now we can see the outputs.

44
00:05:19,040 --> 00:05:28,160
The first variable is printed normally gene, and in the second very that we have used escape character.

45
00:05:28,430 --> 00:05:37,310
This causes a part of the case to be transferred to the next line, go programming in a line and language

46
00:05:37,310 --> 00:05:38,300
in another line.

47
00:05:39,140 --> 00:05:46,160
But in the third that we have used around e-tron's and inside it, you have used this Gear character.

48
00:05:46,360 --> 00:05:52,460
Motorola authorized do not support ASCII characters, and the value of the variable is displayed in

49
00:05:52,460 --> 00:05:56,810
full on one line in order not to prolong the time of decision.

50
00:05:56,990 --> 00:06:01,130
We will finish it and we will continue the content in the next session.

51
00:06:01,490 --> 00:06:02,060
Goodbye.
