1
00:00:01,530 --> 00:00:07,800
So now that we have a local Web server listening on Port 80, ready to start and minds not running right

2
00:00:07,800 --> 00:00:10,320
now, and you're shouldn't be either, and if it is, please stop it.

3
00:00:10,920 --> 00:00:18,090
What I want to do is to write code so that every time our scheduled check runs in the background and

4
00:00:18,090 --> 00:00:23,640
we just have one right now listening to or watching our local localhost, Port 884, the HTTP service,

5
00:00:24,390 --> 00:00:31,310
if the status that I have in the database changes after I monitor it, I want this page to be updated.

6
00:00:31,770 --> 00:00:36,990
So in our case, I want the one that displayed right here to change to a zero.

7
00:00:37,110 --> 00:00:42,540
If I start the Web service and it actually finds it and says everything's healthy and I want the healthy

8
00:00:42,540 --> 00:00:44,310
service to be incremented by one.

9
00:00:44,310 --> 00:00:47,250
So this becomes a zero, this becomes a one.

10
00:00:47,640 --> 00:00:48,960
And how are we going to make that happen?

11
00:00:49,620 --> 00:00:55,890
Well, actually, right now, if you look at our code and I go to the file, perform dash checks, don't

12
00:00:55,890 --> 00:01:03,540
go the function that runs every time we run a schedule check has nothing in it.

13
00:01:03,750 --> 00:01:05,220
So it's not going to do anything.

14
00:01:05,250 --> 00:01:10,560
And passing it a host service ID and I'm running a schedule check, but nothing actually happens.

15
00:01:10,780 --> 00:01:14,640
So just to make sure that my schedule is actually running the way that I think it is, I'm going to

16
00:01:14,640 --> 00:01:23,280
put a log print line and then a few stars so I can see things running check for and then I'll just put

17
00:01:23,280 --> 00:01:26,100
the whole service idea here, which is passed as a parameter, this function.

18
00:01:26,340 --> 00:01:31,680
OK, so that will now actually do something I can watch and make sure that the schedule is firing.

19
00:01:32,010 --> 00:01:37,110
And because I'm an impatient individual, I'm going to go to my database and I'm going to look at the

20
00:01:37,110 --> 00:01:43,260
host services table and I'm going to change the schedule number from the default of three minutes to

21
00:01:43,260 --> 00:01:49,140
say ten seconds, which I would never do on a production server, because that's far too frequent and

22
00:01:49,140 --> 00:01:52,170
it's putting unnecessary load on a on a production server.

23
00:01:52,620 --> 00:01:54,110
But it's perfect for development.

24
00:01:54,120 --> 00:01:54,770
Ten seconds.

25
00:01:54,780 --> 00:01:56,850
I can wait that long, so I'll save those changes.

26
00:01:57,490 --> 00:02:02,820
Then I'll go back to my application and I'll stop it if it's running and it is and I'll run it.

27
00:02:04,330 --> 00:02:12,010
So it starts up and I'll go back to my actual Web browser, reload the page to make sure everything's

28
00:02:12,010 --> 00:02:15,340
current and I'll turn monitoring on and monitoring is now starting.

29
00:02:15,730 --> 00:02:19,480
And what I'm going to do is come back here and wait 10 seconds.

30
00:02:23,320 --> 00:02:25,090
There he ran the check for one.

31
00:02:25,480 --> 00:02:26,920
Let's make sure it runs a second time.

32
00:02:33,160 --> 00:02:37,300
And there it is now, Isleton monitoring off, OK?

33
00:02:38,380 --> 00:02:41,380
And when I come back here and watch it again and wait 10 seconds.

34
00:02:43,700 --> 00:02:50,000
Four, five, six, seven, eight, nine, 10.

35
00:02:50,360 --> 00:02:52,390
OK, now I know it's working and that's perfect.

36
00:02:52,400 --> 00:02:57,380
So I'm going to stop my application and I'll do something more useful than simply printing to the log

37
00:02:57,380 --> 00:02:57,660
file.

38
00:02:58,370 --> 00:03:00,860
So what I'm going to do here, I'm passing it a host service.

39
00:03:01,160 --> 00:03:09,020
And what I will actually want to do is to call the test service for host, which is way down here somewhere.

40
00:03:09,050 --> 00:03:11,000
Let's find it test service for hosts.

41
00:03:11,000 --> 00:03:16,830
And it requires the host model and it requires the host service model and returns to strings.

42
00:03:16,880 --> 00:03:19,700
OK, so I can go get the host and go get the host service.

43
00:03:19,710 --> 00:03:20,390
That's easy enough.

44
00:03:20,990 --> 00:03:21,980
So hosts service.

45
00:03:21,980 --> 00:03:29,270
I'll get first because that's the first thing I have and I need to check for an error and that is repo.

46
00:03:30,760 --> 00:03:31,370
Try that again.

47
00:03:31,370 --> 00:03:38,240
Repo db dot get host service by ID and I'll pass it in the parameter.

48
00:03:38,240 --> 00:03:42,110
I've received post service ID and I'll check for an error.

49
00:03:42,290 --> 00:03:48,230
If error is not equal to nil, I'll just log print line error and I'll return because I don't want to

50
00:03:48,230 --> 00:03:49,980
go any further if something's gone wrong.

51
00:03:50,960 --> 00:03:52,490
Now I've got the whole service.

52
00:03:52,520 --> 00:03:53,330
Let's get the host.

53
00:03:53,600 --> 00:04:02,040
Host and error are equal to repo db dot get hosted by ID and I get this from Scott.

54
00:04:02,240 --> 00:04:02,830
Host it.

55
00:04:05,410 --> 00:04:12,970
Now I have the host and I'll just copy my error message and return this and I can run the check, so

56
00:04:12,970 --> 00:04:14,920
I'm going to get two things back from that.

57
00:04:14,920 --> 00:04:15,800
And what am I getting back?

58
00:04:15,820 --> 00:04:16,650
Let's find them again.

59
00:04:17,860 --> 00:04:18,910
Test service for host.

60
00:04:18,940 --> 00:04:21,250
I'm getting back the new status and the message.

61
00:04:21,490 --> 00:04:30,220
OK, so new status and the message are assigned the value of repo test service for host.

62
00:04:30,520 --> 00:04:36,730
Pass it the host and pass it the host service and then I'll just print those out.

63
00:04:36,880 --> 00:04:38,860
OK, so log print line.

64
00:04:39,970 --> 00:04:49,710
New status is new status and message is a message which might be empty, but we'll find out in a minute.

65
00:04:51,040 --> 00:04:53,450
So that should be a comma.

66
00:04:54,460 --> 00:04:58,840
OK, so I've got that information and I'm just going to start my application again.

67
00:04:58,930 --> 00:04:59,470
Run it.

68
00:05:02,600 --> 00:05:03,910
And wait 10 seconds.

69
00:05:07,980 --> 00:05:09,570
Make sure that works, as I expect.

70
00:05:13,670 --> 00:05:16,820
Maybe I stopped my host monitoring, I think I did turn it back on.

71
00:05:21,500 --> 00:05:22,750
And wait 10 seconds.

72
00:05:27,150 --> 00:05:31,530
There it is, so new, says problem and message, is the air connecting?

73
00:05:31,560 --> 00:05:39,090
Now I'm going to switch my terminal, my ID, I have the Hello World app running opened in the background

74
00:05:39,090 --> 00:05:40,830
here or in a different window.

75
00:05:40,830 --> 00:05:41,400
So I'll run it.

76
00:05:41,730 --> 00:05:43,500
I'll say, go, run, man.

77
00:05:43,500 --> 00:05:48,520
Go and quickly switch back to my other one and now it's healthy.

78
00:05:48,600 --> 00:05:53,410
OK, so I know that my service checks are working exactly as I want.

79
00:05:54,570 --> 00:05:59,280
So what I want to do, I'm going to start my application just so it's not doing anything in the background.

80
00:05:59,880 --> 00:06:06,240
What I want to do here is no question that I want to make some changes at this point.

81
00:06:06,660 --> 00:06:08,040
So let's write some comments.

82
00:06:08,250 --> 00:06:17,400
I want, first of all, to update the host service record in the database with status if changed.

83
00:06:19,980 --> 00:06:25,500
And I definitely want to update the last check record.

84
00:06:25,710 --> 00:06:33,210
OK, so back in our database, in my house service, if I look at the structure, I have the status

85
00:06:33,210 --> 00:06:39,360
which is right here, and I also have the date and time of the last check, which defaults to year one,

86
00:06:39,360 --> 00:06:41,550
January the 1st at one second after midnight.

87
00:06:41,940 --> 00:06:43,230
So I definitely want to update that.

88
00:06:43,230 --> 00:06:44,100
And that's really easy.

89
00:06:44,370 --> 00:06:50,340
So I can just I I've already got the host status record right here, HFS, so I just update those.

90
00:06:50,640 --> 00:07:00,300
So after I call test service for host, I'm going to say state status is equal to my new status, which

91
00:07:00,300 --> 00:07:01,290
might not have changed.

92
00:07:01,710 --> 00:07:09,270
And last check is equal to time now and then I just update update the record in the database.

93
00:07:09,570 --> 00:07:14,580
So error equals repo DB dot update.

94
00:07:14,850 --> 00:07:17,370
And what I want to update here is how service.

95
00:07:17,370 --> 00:07:19,140
So I have that somewhere.

96
00:07:19,350 --> 00:07:19,830
There it is.

97
00:07:20,520 --> 00:07:26,130
And I just passed my ho ho service model and I check for an error and I'll just copy and paste this,

98
00:07:27,210 --> 00:07:27,980
put it in here.

99
00:07:28,020 --> 00:07:37,200
Now let's get this comment in the right location because it doesn't belong there and down here it comes.

100
00:07:38,200 --> 00:07:49,900
Right after I do the test house for service there, so this test of the service and we get a response

101
00:07:49,900 --> 00:07:52,990
and then we update the record in the database, and that's all that it is.

102
00:07:53,290 --> 00:07:54,640
It's all that we really need to do.

103
00:07:54,640 --> 00:07:59,290
So I can get rid of this, but I'll leave it there for right now after we've done this.

104
00:07:59,290 --> 00:08:12,490
At this point, we need to make a decision if the host status hosted service has changed broadcast to

105
00:08:12,490 --> 00:08:13,360
all clients.

106
00:08:13,630 --> 00:08:17,710
And I'll put another comment here, because we're also going to want to, if appropriate,

107
00:08:20,020 --> 00:08:25,330
appropriate send email or SMS message.

108
00:08:26,290 --> 00:08:28,090
So we're not going to do that for a little while.

109
00:08:28,720 --> 00:08:33,730
But presumably the people that are actually using software like this to monitor host services don't

110
00:08:33,730 --> 00:08:38,020
spend their entire day and night watching a webpage.

111
00:08:38,020 --> 00:08:43,240
Presumably they're going to be away sometimes and you want to alert them if something has gone wrong

112
00:08:43,240 --> 00:08:45,660
or something has come back that has already gone down.

113
00:08:45,940 --> 00:08:50,980
And the easiest way to do that is to send an email message or a text message, and we'll do that near

114
00:08:50,980 --> 00:08:51,940
the end of the course.

115
00:08:52,180 --> 00:08:58,360
But right now, this is the part that's of interest to us if the whole service status has changed broadcast

116
00:08:58,360 --> 00:08:59,190
to our clients.

117
00:08:59,500 --> 00:09:03,520
So this is the point where we're going to over in our JavaScript file.

118
00:09:03,880 --> 00:09:09,730
We're going to bind to the public channel, listen for a specific event, a service status has changed

119
00:09:09,730 --> 00:09:10,600
and do something.

120
00:09:11,350 --> 00:09:14,020
So we'll get started on that in the next lecture.
