1
00:00:02,910 --> 00:00:07,590
So we're updating the system preferences that allow us to turn monitoring on and off, but we're not

2
00:00:07,590 --> 00:00:10,350
actually turning monitoring on and off.

3
00:00:11,040 --> 00:00:16,260
So I'm in my Jast jet file and I see I missed a tee and error alert.

4
00:00:16,260 --> 00:00:17,420
So I'll add that in there.

5
00:00:18,060 --> 00:00:22,620
What I'm going to do is we have this function already, toggle monitoring, and that's what we want

6
00:00:22,620 --> 00:00:28,260
to use to actually start and stop the monitoring of hosts and host services in the background.

7
00:00:29,280 --> 00:00:36,630
So just to make things faster, I will copy this entire function and paste it in here and I'll change

8
00:00:36,630 --> 00:00:44,580
the URL where I'm instead of set system pref, I'll just change that to toggle monitoring.

9
00:00:45,270 --> 00:00:47,190
OK, so that you, Earl, doesn't exist yet.

10
00:00:47,190 --> 00:00:51,360
So I'm going to copy this part of it and I'll go to my roots file

11
00:00:54,150 --> 00:00:58,750
and right here where I'm setting system preferences, that's the one we just put in recently.

12
00:00:59,400 --> 00:01:03,260
I'll duplicate that and change this to the correct YORO.

13
00:01:03,300 --> 00:01:07,770
And I don't need the slash admin because that's added by the shredder.

14
00:01:08,370 --> 00:01:15,750
And we'll create a new handler, which I'll just call toggle monitoring, which doesn't exist yet.

15
00:01:15,780 --> 00:01:16,530
But that's not a problem.

16
00:01:16,530 --> 00:01:17,340
We can go create it.

17
00:01:18,090 --> 00:01:23,670
So I'm over in my handlers file and I'll create a new function, which I'll call func.

18
00:01:23,680 --> 00:01:26,310
It'll take the repo receiver

19
00:01:29,370 --> 00:01:31,770
and I'll call it toggle monitoring.

20
00:01:32,790 --> 00:01:39,000
And because it's a handler, requires a response writer and a pointer to a request.

21
00:01:42,180 --> 00:01:45,120
OK, so I'll give this a comment.

22
00:01:49,130 --> 00:01:49,790
Turn's.

23
00:01:52,800 --> 00:01:54,960
Monitoring on and off.

24
00:01:55,020 --> 00:01:58,440
Now let's go back to our JavaScript, because we need to do need to make a change there.

25
00:01:59,940 --> 00:02:02,780
Here, I'm not going to post a name and a value.

26
00:02:02,820 --> 00:02:08,670
I do need the CSS RF token, so I delete this one and I'll just pass enabled.

27
00:02:11,400 --> 00:02:19,800
And of course we get that from the parameter pass to this function enabled and back in our handlers.

28
00:02:20,050 --> 00:02:22,260
Let's go find those again right over here.

29
00:02:22,920 --> 00:02:24,750
We'll grab that value enabled.

30
00:02:24,870 --> 00:02:33,450
So enabled is sign the value of our post form dot get enabled just to make sure it all works.

31
00:02:34,260 --> 00:02:42,210
I'll simply log that log print line enabled and I'll just send back a hardcoded JSON response like we

32
00:02:42,210 --> 00:02:44,400
did last time just to make sure everything works.

33
00:02:44,880 --> 00:02:56,880
So we'll say resp, we'll just do it this way via resp is of type JSON response and rasped OK equals

34
00:02:56,880 --> 00:02:59,140
true and we don't need anything else.

35
00:02:59,160 --> 00:03:04,710
So I just need to marshal this and send it out so I'll copy and paste from the previous function.

36
00:03:05,070 --> 00:03:10,170
And this is just to make sure that everything is going to be communicating with each other the way that

37
00:03:10,170 --> 00:03:10,540
it should.

38
00:03:10,560 --> 00:03:11,850
So I'll start my application.

39
00:03:11,850 --> 00:03:14,580
If it's running, I'll start my application.

40
00:03:18,910 --> 00:03:26,380
The comp. I'll make sure IP is running, it's not so I'll start it and all I'll do is put a few blank

41
00:03:26,380 --> 00:03:30,180
lines in there and go look at our localhost localhost 4000.

42
00:03:30,790 --> 00:03:35,890
Apparently I have to log in admin at example, dot com password.

43
00:03:39,340 --> 00:03:45,640
And I will open the JavaScript terminal and I'll turn monitoring on and we should get an 020 CASEVAC

44
00:03:46,210 --> 00:03:48,260
and we got the first one and we got the second one.

45
00:03:48,280 --> 00:03:49,390
Both are 200.

46
00:03:49,390 --> 00:03:52,960
And if we look at the second one, that should be the Torgau monitoring.

47
00:03:53,350 --> 00:03:55,280
And our response is everything's OK.

48
00:03:55,300 --> 00:03:56,460
So they're talking to each other.

49
00:03:56,470 --> 00:03:56,950
That's good.

50
00:03:57,760 --> 00:04:02,660
Now we actually need to do something more than simply return a hardcoded value.

51
00:04:02,920 --> 00:04:07,750
So let's go back here to our toggled monitoring on and off and think about how we're going to make this

52
00:04:07,750 --> 00:04:08,050
work.

53
00:04:09,590 --> 00:04:15,230
So obviously, we're going to be doing something in this handler based upon the value of enabled, if

54
00:04:15,230 --> 00:04:19,960
enabled, is equal to the string value of zero, we're turning monitoring off.

55
00:04:20,360 --> 00:04:24,480
And if it's equal to the string value of one, we're turning monitoring on.

56
00:04:25,250 --> 00:04:32,090
Now, if you'll recall, we actually have back in our main package over here, start monitoring in command

57
00:04:32,090 --> 00:04:32,450
web.

58
00:04:32,640 --> 00:04:37,640
We have the file start monitoring Dudko and that turns monitoring on.

59
00:04:38,630 --> 00:04:42,560
Now, one of the problems we're going to face right now is that we're going to have to do a little bit

60
00:04:42,560 --> 00:04:47,600
of refactoring rather than because we're in a package handlers.

61
00:04:47,600 --> 00:04:51,320
We can't call the function in the main package start monitoring.

62
00:04:51,320 --> 00:04:56,960
So I'm probably going to have to refactor that to move this out of the main package and put it somewhere

63
00:04:56,960 --> 00:04:57,320
else.

64
00:04:57,320 --> 00:05:00,100
We'll put it in handlers because that will make things ever so simple.

65
00:05:00,110 --> 00:05:02,040
So that's the first thing we're going to have to think about.

66
00:05:02,810 --> 00:05:06,590
The second thing we're going to have to think about is exactly what do we want to do?

67
00:05:06,620 --> 00:05:09,170
Well, let's just write some comments here to get things going.

68
00:05:09,410 --> 00:05:12,740
So I'll say I'll do the statement first.

69
00:05:12,740 --> 00:05:20,510
If the enabled is equal to one, then we want to start monitoring.

70
00:05:23,250 --> 00:05:29,590
Otherwise, if it's equal to anything else, zero is the only other option we want to stop monitoring.

71
00:05:29,790 --> 00:05:34,410
Let's do the stop monitoring first because we're already starting it in our main package.

72
00:05:34,410 --> 00:05:37,490
So at least we can stop it without doing any refactoring at the moment.

73
00:05:38,280 --> 00:05:44,670
So if we think about this, first of all, I'm going to say logged print line turning monitoring of.

74
00:05:48,720 --> 00:05:50,760
And up here, I'll just copy this and pasted.

75
00:05:52,420 --> 00:06:02,440
And turn it on, OK, when we actually have our monitoring system running, we have first of all, we

76
00:06:02,440 --> 00:06:04,480
have all the values that are in the Crown package.

77
00:06:04,480 --> 00:06:09,880
So we have something called entries, which will be looking at shortly that allow us to see all of the

78
00:06:09,880 --> 00:06:11,710
entries that are in the monitoring package.

79
00:06:12,040 --> 00:06:17,630
And we also have our monitor map, which is a map stored in our application wide config.

80
00:06:18,160 --> 00:06:23,800
So what we could do I mean, we could do this and it might work is we could simply just do something

81
00:06:23,800 --> 00:06:26,130
as simple as this, turning, monitoring on and off.

82
00:06:26,140 --> 00:06:32,320
So turning it on would be nothing more than going to our repo, going to our app, going to our scheduler

83
00:06:32,560 --> 00:06:33,700
and calling start.

84
00:06:34,950 --> 00:06:41,790
And that would start it up, and here we could just say repo dot app, dot scheduler stop.

85
00:06:43,500 --> 00:06:49,500
And once any existing service is running from our schedule, as soon as that's finished, it will stop

86
00:06:49,500 --> 00:06:51,030
it and this will start it back up.

87
00:06:51,330 --> 00:06:52,590
And that might work.

88
00:06:53,310 --> 00:06:54,720
But I'm not an optimist.

89
00:06:55,290 --> 00:07:02,280
And really what I want to have happen here is to ensure that when I stop the applications monitoring,

90
00:07:02,730 --> 00:07:05,970
I actually empty the map, remove all the entries.

91
00:07:05,970 --> 00:07:08,970
I do everything necessary to turn everything off.

92
00:07:09,000 --> 00:07:12,120
So let's do it that way instead, because I'm just not an optimist.

93
00:07:12,480 --> 00:07:16,950
And I want to make sure that when I stop the scheduling, there's not some leftover thing running in

94
00:07:16,950 --> 00:07:17,640
the background.

95
00:07:17,730 --> 00:07:21,870
And when I start it back up, I'm going to load all of the services I want to monitor.

96
00:07:22,170 --> 00:07:26,400
And there's a reason for that, because when we have a problem service, we actually want to monitor

97
00:07:26,400 --> 00:07:27,180
it more frequently.

98
00:07:27,180 --> 00:07:28,350
But we'll get to that later on.

99
00:07:29,760 --> 00:07:31,790
So let's have a look at the how we're going to do this.

100
00:07:31,800 --> 00:07:35,250
First of all, let's remove everything from the schedule.

101
00:07:35,250 --> 00:07:36,300
And that's really easy.

102
00:07:36,720 --> 00:07:43,050
So I can say, first of all, for and I don't care about the index, but I do care about the value I'm

103
00:07:43,050 --> 00:07:43,920
iterating through.

104
00:07:44,160 --> 00:07:51,720
I'm going to range through four underscore comma X is a sign the value of range and will range through

105
00:07:51,720 --> 00:07:53,460
our repo app.

106
00:07:55,050 --> 00:08:01,620
The monitor map, so that will take me through every entry in our map and all we'll do is remove that

107
00:08:01,620 --> 00:08:03,750
entry that's in the map from the scheduler.

108
00:08:03,750 --> 00:08:08,100
So repo app DOT scheduler remove.

109
00:08:08,100 --> 00:08:11,220
And this allows us to remove something by its ID.

110
00:08:11,220 --> 00:08:16,980
And if you recall the value of X in this case, the contents, not the key, but the value that stored

111
00:08:16,980 --> 00:08:21,240
in the map is the entry ID in the scheduler so that we'll get rid of it.

112
00:08:21,250 --> 00:08:23,330
So that removes everything from our schedule.

113
00:08:23,340 --> 00:08:24,420
So let's put a comment there.

114
00:08:26,220 --> 00:08:30,660
Remove all items in map from schedule.

115
00:08:31,560 --> 00:08:33,390
OK, so that's that's the first step.

116
00:08:33,840 --> 00:08:39,510
The second thing I want to do is to empty the map, empty the map.

117
00:08:40,530 --> 00:08:44,730
So I'm just going to do a similar thing for underscore and I'll call this one.

118
00:08:44,730 --> 00:08:48,180
K is assigned the value of range.

119
00:08:49,080 --> 00:08:56,610
Repo app, dot, monitor, map, and all I'll do is remove that from the map, delete.

120
00:09:00,910 --> 00:09:05,550
Repo app, dot monitor map, and we're going to remove the value.

121
00:09:05,600 --> 00:09:12,370
OK, so now our map is empty now because I'm not an optimist, because I always assume that something

122
00:09:12,370 --> 00:09:13,390
is going to go wrong.

123
00:09:13,450 --> 00:09:15,220
I'm going to do one more step here.

124
00:09:15,340 --> 00:09:22,210
I'm going to say delete all entries from schedule.

125
00:09:26,810 --> 00:09:31,880
To be sure, and I probably don't have to do this, but it's going to take no time to do it and it will

126
00:09:31,880 --> 00:09:33,350
make me sleep better at night.

127
00:09:33,890 --> 00:09:39,800
And again, for underscore and this time I call it I is range and this time around, not ranging through

128
00:09:39,800 --> 00:09:40,730
the monitor map.

129
00:09:41,300 --> 00:09:43,730
I'm going to go through all of the entries in the schedule.

130
00:09:45,890 --> 00:09:50,030
Repo dot app, dot schedule.

131
00:09:53,340 --> 00:09:58,140
Scheduler entries that are scheduled to write entries.

132
00:09:59,400 --> 00:10:03,390
So now I'm ranging through any entries that still exist in our schedule.

133
00:10:03,660 --> 00:10:11,790
All I do is call the method that's built in to my scheduler, repo dot app, dot scheduler, dot, remove,

134
00:10:11,790 --> 00:10:13,980
and this time I'm removing idot ID.

135
00:10:15,150 --> 00:10:18,140
So there's probably nothing in the in that schedule at this point.

136
00:10:18,150 --> 00:10:19,230
No entries left.

137
00:10:19,260 --> 00:10:23,090
But again, I just am not an optimist when it comes to this sort of thing.

138
00:10:23,340 --> 00:10:26,310
So we'll actually remove the manual just to be sure.

139
00:10:27,030 --> 00:10:28,200
So that should be everything.

140
00:10:28,200 --> 00:10:29,960
I need to turn the monitoring off.

141
00:10:29,970 --> 00:10:33,660
So when the toggle is turned off back in our JavaScript.

142
00:10:35,460 --> 00:10:36,330
Right over here.

143
00:10:37,620 --> 00:10:40,180
So this is going to stop all of the monitoring in this section.

144
00:10:40,200 --> 00:10:42,070
The first thing I do is just write it to the console.

145
00:10:42,390 --> 00:10:47,280
The second thing I'm doing is updating the system preferences to turn monitoring live to zero in the

146
00:10:47,280 --> 00:10:47,880
database.

147
00:10:48,150 --> 00:10:54,630
And then I call Torgau Monitoring and Torgau monitoring just passes the value, which is at this point

148
00:10:54,630 --> 00:10:58,530
set to zero after this URL, which goes to this handler.

149
00:10:59,940 --> 00:11:04,760
And at that point it goes through this part of the code.

150
00:11:04,770 --> 00:11:11,500
So its rights to the console, to our log file, then it removes all the items from the monitor map,

151
00:11:11,970 --> 00:11:14,190
from the schedule by going through the monitor map.

152
00:11:14,490 --> 00:11:16,680
Then it empties the monitor map.

153
00:11:17,550 --> 00:11:18,990
And what am I doing here?

154
00:11:19,440 --> 00:11:20,000
Try that again.

155
00:11:20,010 --> 00:11:21,230
I don't need an underscore here.

156
00:11:21,720 --> 00:11:22,620
There, that's better.

157
00:11:24,300 --> 00:11:30,690
Then I empty the monitor map and then I actually just make sure that the schedule has no entries in

158
00:11:30,690 --> 00:11:32,760
it whatsoever and I stop the scheduler.

159
00:11:32,770 --> 00:11:33,600
So this should work.

160
00:11:33,720 --> 00:11:34,920
So let's compile a code.

161
00:11:39,150 --> 00:11:44,580
Hit return a few times to make sure we have some blank lines, go back to our application, monitoring

162
00:11:44,580 --> 00:11:45,200
is on.

163
00:11:45,210 --> 00:11:48,960
So when I turn it off, I'll just go back and clear the log file here.

164
00:11:49,440 --> 00:11:54,150
When I turn it off, it will give me my my my confirmation.

165
00:11:55,280 --> 00:12:02,120
And I get to OK, so to 200 to just perfect and I get turned monitoring off, so that does exactly what

166
00:12:02,120 --> 00:12:02,750
I want.

167
00:12:03,590 --> 00:12:09,350
OK, so the next step is to actually turn it on and that's going to require some refactoring and it's

168
00:12:09,350 --> 00:12:12,620
not difficult, but we'll take care of that in the next lecture.
