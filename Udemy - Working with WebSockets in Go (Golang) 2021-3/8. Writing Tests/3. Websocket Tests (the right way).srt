1
00:00:01,810 --> 00:00:07,000
So this time around, we want to change our test, our test that interacts with handlers that connect

2
00:00:07,000 --> 00:00:12,490
to our pusher compatible server, and we want to modify those tests so they no longer have to connect

3
00:00:12,490 --> 00:00:13,570
to an external service.

4
00:00:14,170 --> 00:00:18,460
And in order to do that, we need to make some changes to our code, but not very many.

5
00:00:18,640 --> 00:00:23,200
And this isn't that difficult and it's incredibly useful any time you're writing tests that have to

6
00:00:23,200 --> 00:00:26,710
interact with some external service because the procedure is basically the same.

7
00:00:27,460 --> 00:00:30,310
So right now, I'm looking at set up dash app abogado.

8
00:00:30,340 --> 00:00:31,300
That's what I'm looking at.

9
00:00:31,600 --> 00:00:36,970
And I'm looking at in my code line 129, the part where I create a pusher client.

10
00:00:37,570 --> 00:00:41,410
And what I'm going to do is look at that type pusher client.

11
00:00:41,410 --> 00:00:47,740
So I'm going to roll my mouse over it and then I'll scroll down and look at the methods that it has.

12
00:00:48,400 --> 00:00:54,100
If I create a type that has all of the public methods, all the ones that start with a capital letter,

13
00:00:54,100 --> 00:00:59,950
the ones that are public, then I can actually replace what I have in my test.

14
00:01:00,430 --> 00:01:06,580
I can replace an actual pusher client with one that seems to be a push her client, but doesn't actually

15
00:01:06,580 --> 00:01:07,540
make an external call.

16
00:01:07,900 --> 00:01:09,160
So let's get started doing that.

17
00:01:09,700 --> 00:01:13,180
First of all, go over to my setup, underscore test, go file.

18
00:01:13,540 --> 00:01:22,180
And at the very bottom, I'm going to create a new type, which I will call dummy WC and it's going

19
00:01:22,180 --> 00:01:22,840
to be a struct.

20
00:01:24,070 --> 00:01:26,500
Now it has to have some methods or some some members.

21
00:01:26,530 --> 00:01:32,140
So let's go back to our setup app and look at what happens when we create a push or client.

22
00:01:32,140 --> 00:01:34,500
And I'll just go straight to that code.

23
00:01:34,990 --> 00:01:36,490
This is what I want right here.

24
00:01:36,490 --> 00:01:42,700
I'm going to copy all of these members and close this and go back to my setup test and just paste them

25
00:01:42,700 --> 00:01:42,970
in there.

26
00:01:43,360 --> 00:01:51,760
OK, so now I have my dummy type in order to make this type satisfy the requirements of being a an actual

27
00:01:52,300 --> 00:01:57,340
something that's compatible with a pusher client, I just need to go create those methods and then substitute

28
00:01:57,340 --> 00:02:00,580
the return values of those methods to be whatever I want.

29
00:02:00,940 --> 00:02:05,680
Now, there's quite a few methods here, and I'm not going to force you to watch me do all of them,

30
00:02:05,890 --> 00:02:06,870
but I'll do a couple.

31
00:02:06,880 --> 00:02:13,190
OK, so let's have a look again back at set up test and are actually the set up app and find that push

32
00:02:13,190 --> 00:02:14,020
your client again.

33
00:02:14,290 --> 00:02:19,780
And let's start with the first method that I see there, which is the first one with a capital letter

34
00:02:19,780 --> 00:02:20,290
trigger.

35
00:02:20,620 --> 00:02:22,330
So let's go look at Trigger.

36
00:02:22,450 --> 00:02:25,120
I'll go in here and I'll find Trigger.

37
00:02:27,100 --> 00:02:27,760
And there it is.

38
00:02:28,050 --> 00:02:30,550
So what I'm going to do is copy this entire method.

39
00:02:31,890 --> 00:02:33,780
And I'll go back to my set up test.

40
00:02:35,290 --> 00:02:41,230
And I'll paste this in here and I'll change the receiver from client, which I can't find because it's

41
00:02:41,230 --> 00:02:50,770
in a totally different package to my dummy WC and I'll just have it return nil because all it returns

42
00:02:50,770 --> 00:02:53,020
is an error and I'll just have it return nil.

43
00:02:53,650 --> 00:02:59,080
Now, that's one method, the method that we're actually using in our test, the one that the the handler

44
00:02:59,080 --> 00:03:01,770
we're testing actually calls is a different one.

45
00:03:01,780 --> 00:03:07,990
It's called Authenticate Presents Channel, and we know that because it tries to authenticate to a president's

46
00:03:07,990 --> 00:03:08,290
channel.

47
00:03:08,320 --> 00:03:14,350
So if we go back to our actual tests here, handlers tests and look at the pusher off, it's actually

48
00:03:14,350 --> 00:03:16,750
trying to authenticate to private channel one.

49
00:03:16,850 --> 00:03:20,080
So that's the method that I actually definitely need to put some different things in.

50
00:03:20,110 --> 00:03:21,130
So let's go get that again.

51
00:03:21,130 --> 00:03:26,920
I'll go back to here and find and I mean go, which is part of the push or package.

52
00:03:27,100 --> 00:03:31,210
And I'll look for Authenticate Presence Channel right here.

53
00:03:32,060 --> 00:03:38,900
So there's the method, I'll copy this and I'll go back to set up Testico and I'll paste this method

54
00:03:38,900 --> 00:03:44,330
in here and all I'm going to do is, again, give it the correct receiver dummy.

55
00:03:44,360 --> 00:03:47,990
We get rid of this return statement.

56
00:03:48,200 --> 00:03:49,910
And in here I need to return some JSON.

57
00:03:49,910 --> 00:03:55,370
So what I'm going to do and I'll do this when I'm actually copying all of the other things over and

58
00:03:55,370 --> 00:03:57,890
modifying because you want to watch me do that for all these methods.

59
00:03:57,890 --> 00:04:01,700
But you'll be able to copy and paste from the source code I put to this lecture.

60
00:04:01,790 --> 00:04:04,890
And as long as I do a couple, you should have no trouble following along.

61
00:04:05,570 --> 00:04:14,060
So what I need here is to create adjacent string, which I'll call J-Star, and then I'll just go copy

62
00:04:14,060 --> 00:04:19,040
and paste the actual JSON that is posted from my Web browser.

63
00:04:19,050 --> 00:04:23,900
I'll go to the inspector, find that necessary, JSON, paste it in here and then it's just a matter

64
00:04:23,900 --> 00:04:24,410
of.

65
00:04:26,150 --> 00:04:26,840
Saying.

66
00:04:27,990 --> 00:04:30,810
Return a slice of bite's.

67
00:04:33,060 --> 00:04:38,460
And what I'm returning is my J-Star, I got to put in a signed statement in their.

68
00:04:40,860 --> 00:04:41,370
And Neil.

69
00:04:42,950 --> 00:04:50,180
Because this returns a slice of bytes and an error, and as long as I return hard coded JSON and nothing

70
00:04:50,180 --> 00:04:53,840
else, and I'll just move this up here so it's a little less ugly than this.

71
00:04:53,840 --> 00:04:56,400
Absolutely will satisfy my requirements.

72
00:04:57,290 --> 00:05:03,860
So what I'm going to do now is pause this video and go and copy all of the necessary methods that have

73
00:05:03,860 --> 00:05:08,870
to be implemented and paste them in here and just make them return as little information as I possibly

74
00:05:08,870 --> 00:05:09,260
can.

75
00:05:09,560 --> 00:05:14,000
And once I'm done that, I'll resume recording and show you what to do next.

76
00:05:14,030 --> 00:05:15,490
So I'll be right back.

77
00:05:16,980 --> 00:05:22,650
So I'm back, I went and implemented all of the necessary methods that are visible, the ones with a

78
00:05:22,650 --> 00:05:28,800
capital letter and as you can see here, I went to my Web browser and I opened the JavaScript console

79
00:05:28,800 --> 00:05:32,610
and found what was sent back to me right here.

80
00:05:32,610 --> 00:05:37,690
And just copy and paste that that Jason right into a string file and return it as a slice of bytes.

81
00:05:38,250 --> 00:05:48,570
So now I have this type which actually will fulfill the requirements for being a a client pusher client

82
00:05:48,570 --> 00:05:48,930
type.

83
00:05:49,740 --> 00:05:53,520
So next, I need to open my model's file and I can put this anywhere I want, but I need to put it in

84
00:05:53,520 --> 00:05:55,590
a different package, not in the main package.

85
00:05:55,590 --> 00:05:59,280
And I'm going to put it in my models just to make things really straightforward.

86
00:05:59,520 --> 00:06:06,150
And what I need to put in here is a type I'm going to define a new type called WSC Client, which is

87
00:06:06,150 --> 00:06:10,850
a name I'm choosing, and it's WebSocket client and it is an interface.

88
00:06:12,300 --> 00:06:17,730
And in here I need to put all of the methods that I defined over here.

89
00:06:18,240 --> 00:06:19,710
So I'll copy Trigger.

90
00:06:23,380 --> 00:06:24,420
And put it in here.

91
00:06:25,920 --> 00:06:27,570
And then I'll copy Trigger Multi.

92
00:06:31,770 --> 00:06:38,130
And put it on the next line, trigger exclusive and don't miss the return types, because that's an

93
00:06:38,130 --> 00:06:39,020
easy thing to do.

94
00:06:40,290 --> 00:06:43,210
And paste that there aren't very many.

95
00:06:43,230 --> 00:06:47,280
So this won't take too long trigger multi exclusive copy.

96
00:06:48,940 --> 00:06:49,780
And Paiste.

97
00:06:51,770 --> 00:06:54,800
Then trigger batch copy.

98
00:06:56,650 --> 00:06:57,490
And Paiste.

99
00:06:59,940 --> 00:07:02,550
Then channels Kopi.

100
00:07:03,690 --> 00:07:04,560
And Paiste.

101
00:07:06,970 --> 00:07:10,420
And channel singular and get its return types copy.

102
00:07:11,650 --> 00:07:12,520
And Paiste.

103
00:07:15,400 --> 00:07:16,840
Then get channel users.

104
00:07:23,470 --> 00:07:26,770
Authenticate, private channel copy.

105
00:07:28,460 --> 00:07:29,120
Paiste.

106
00:07:30,820 --> 00:07:32,410
Authenticate presence channel.

107
00:07:34,270 --> 00:07:34,810
Kopi.

108
00:07:37,150 --> 00:07:38,020
And Paiste.

109
00:07:39,210 --> 00:07:39,770
Almost done.

110
00:07:41,050 --> 00:07:41,650
Web hook.

111
00:07:43,680 --> 00:07:44,310
Kopi.

112
00:07:45,430 --> 00:07:46,160
And paste.

113
00:07:46,670 --> 00:07:52,130
OK, so now I have this type, so what I'm going to do next is there's a typo here somewhere.

114
00:07:54,370 --> 00:07:57,220
Oh yes, I didn't do my sports header.

115
00:07:59,060 --> 00:08:06,590
There are fixes that so that just all that did was add the necessary import up here to net HTP.

116
00:08:06,770 --> 00:08:13,430
OK, so I have this this type defined now and what I'm going to do is go back to my config file where

117
00:08:13,430 --> 00:08:20,630
we define our application config and I'm going to change the type for W.S. client from pusher client

118
00:08:20,750 --> 00:08:25,060
to the new type I just defined, which is model client.

119
00:08:26,920 --> 00:08:33,770
Now if we go back to our setup test, no, our set dash app, we have an error.

120
00:08:33,800 --> 00:08:36,500
And the error is if I roll over, it's a very simple one.

121
00:08:36,500 --> 00:08:40,340
Cannot use W.S. client type Pusha because type does not implement models.

122
00:08:40,340 --> 00:08:46,850
W.S. Client as trigger method has a pointer receiver and all I need to do is change that, put an ampersand

123
00:08:46,850 --> 00:08:50,130
in front of it, make it a reference instead, and that makes that error go away.

124
00:08:51,440 --> 00:08:55,700
So I've made that change and technically I should be able to.

125
00:08:55,700 --> 00:08:57,200
Now where am I?

126
00:08:59,920 --> 00:09:01,600
Yeah, I should be able to run my project.

127
00:09:05,140 --> 00:09:12,400
And it starts without any problems and it starts because the pusher client type, we satisfied that

128
00:09:12,400 --> 00:09:16,810
that necessary interface its interface requirements in the type we just created.

129
00:09:17,170 --> 00:09:25,540
OK, so next step, let's go back to set up go and do a similar thing here where we set up our pusher

130
00:09:25,540 --> 00:09:25,910
client.

131
00:09:25,940 --> 00:09:31,600
So what we're doing right now is using pusher client and that's what's forcing us to make a request

132
00:09:31,600 --> 00:09:32,680
to an external service.

133
00:09:32,830 --> 00:09:34,000
So let's make some changes here.

134
00:09:34,510 --> 00:09:38,100
I'll just do it right over here and we'll delete what we don't need after the fact.

135
00:09:38,470 --> 00:09:42,850
So I'm going to create a new variable which are called DWC for dummy web sockets.

136
00:09:43,540 --> 00:09:46,150
And I'll call it I'll make it of type dummy.

137
00:09:48,930 --> 00:09:55,890
We and I will just put some values in here, RFID, and I can just copy this, because this is we're

138
00:09:55,890 --> 00:09:58,110
never going to use them, but I'm just going to put them in there.

139
00:09:58,110 --> 00:10:00,960
So it gives me some indication as to what it actually does.

140
00:10:01,920 --> 00:10:07,920
Then I can delete the WC client we produced and make this a pointer to.

141
00:10:09,230 --> 00:10:14,530
A reference to DWC, and that satisfies the necessary requirements.

142
00:10:14,830 --> 00:10:21,580
So now I can go back to my actual test, which is in handler's test stock, go and get rid of this comment.

143
00:10:24,470 --> 00:10:29,330
And what should happen at this point is I should be able to I'm going to if my application is running,

144
00:10:29,330 --> 00:10:29,960
I'm going to quit.

145
00:10:30,110 --> 00:10:30,710
It's not.

146
00:10:31,670 --> 00:10:38,030
Good, I'm going to stop my IP server, so it's not raining at all, so I just stop that and I'll go

147
00:10:38,030 --> 00:10:48,020
back to my test folder in CD Internal handlers and type Go Go Test Dashboard.

148
00:10:50,860 --> 00:10:57,490
And everything passed, and that is a much cleaner way of writing any kind of test that depends upon

149
00:10:57,490 --> 00:10:58,540
a remote service.

150
00:10:58,990 --> 00:11:05,650
So that takes care of my example for how to test a handler that interacts with WebSocket using Pusha

151
00:11:05,680 --> 00:11:07,300
or a pucher compatible client.
