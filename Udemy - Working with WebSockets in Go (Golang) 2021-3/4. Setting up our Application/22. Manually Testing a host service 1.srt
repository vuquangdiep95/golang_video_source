1
00:00:00,360 --> 00:00:07,140
So now I want to make this check now button, which actually isn't a button, but acts like one, I

2
00:00:07,140 --> 00:00:13,510
want it to actually go and check the status of the service that I'm currently looking at.

3
00:00:13,530 --> 00:00:15,060
So this is pending.

4
00:00:15,720 --> 00:00:16,010
All right.

5
00:00:16,020 --> 00:00:21,090
When I click this little button, I want to fire a request of using Ajax in the background that will

6
00:00:21,090 --> 00:00:22,950
go to the server and tell it.

7
00:00:22,950 --> 00:00:29,190
I want to test this service and I need to send it some information, say the host service ID.

8
00:00:29,220 --> 00:00:33,230
And just to save some time, I'll probably send the current status as well.

9
00:00:33,300 --> 00:00:35,520
It'll just save us a database to look up on the back end.

10
00:00:36,870 --> 00:00:44,040
Then the back end will actually go and try to connect to that service and get some kind of response.

11
00:00:44,040 --> 00:00:45,360
Either it's it's good.

12
00:00:45,360 --> 00:00:49,980
It's bad, it's morning, whatever it may be, and send that information back to me.

13
00:00:50,220 --> 00:00:51,360
And that's all I want to do.

14
00:00:51,480 --> 00:00:54,740
And it's going to take a couple of steps, but let's get started doing it.

15
00:00:55,230 --> 00:01:02,940
So the first thing I'm going to do is go to my roots file, which is right here, and I'm going to put

16
00:01:02,940 --> 00:01:10,380
a path in here or put a route in here that allows me to perform that check so I can just do it like

17
00:01:10,380 --> 00:01:12,150
this and I'll make it a get request.

18
00:01:12,180 --> 00:01:14,100
We could make it a Gedera post, but it doesn't matter.

19
00:01:14,100 --> 00:01:15,690
I'm going to make an to get for right now.

20
00:01:16,110 --> 00:01:23,060
And what I want to check for is say it'll be slash admin because we're in here and I'll call it perform

21
00:01:23,490 --> 00:01:29,100
check and then I'll pass in the ID of this this whole service.

22
00:01:29,430 --> 00:01:31,980
And after that I'll pass in the old status.

23
00:01:33,660 --> 00:01:41,520
Of this service, and that will go to handlers and we'll go to a handler that doesn't exist yet, Repo

24
00:01:42,240 --> 00:01:44,130
and I'll call it test to check.

25
00:01:46,360 --> 00:01:47,800
And that should be enough.

26
00:01:48,640 --> 00:01:53,100
OK, now we need to create this handler, so I'm going to go back to my internal folder.

27
00:01:53,620 --> 00:01:56,140
I'm going to find handlers and I'll create a new file.

28
00:01:57,560 --> 00:01:59,030
And I would call that file.

29
00:02:00,990 --> 00:02:08,100
Um, perform checks don't go that's as good as name is any, and I will add that to my repository.

30
00:02:09,810 --> 00:02:20,940
So let's go create a handler, Funke Repo is Star Dot or Star DB Repo, and I call this test check and

31
00:02:20,940 --> 00:02:23,340
because it's a handler, requires a response writer.

32
00:02:25,670 --> 00:02:27,830
And it requires have pointed to a request.

33
00:02:29,690 --> 00:02:35,300
OK, so now that handler exists, so if I go back to my roots, that error should go away and it does.

34
00:02:35,910 --> 00:02:41,380
Maybe I'll call old status with a capital S. So it actually won't give me a warning from the formatting.

35
00:02:42,560 --> 00:02:42,950
All right.

36
00:02:42,950 --> 00:02:45,140
So let's see what we're going to do in here.

37
00:02:45,170 --> 00:02:45,810
All right away.

38
00:02:45,830 --> 00:02:53,210
I want to grab my parameter values, so I'll say the host service ID and potentially an error because

39
00:02:53,210 --> 00:02:56,330
I'm going to convert this from a string to an end and I'm ignoring the error.

40
00:02:56,330 --> 00:03:00,410
And you're not going to in production, of course, is equal to stir conv.

41
00:03:03,920 --> 00:03:09,790
I and I want to get the euro parameter, and since I'm using the key router, I can just say Chheda

42
00:03:09,880 --> 00:03:15,110
Euro Perram and hand it the response right after the request.

43
00:03:15,290 --> 00:03:16,930
And I'm looking for it.

44
00:03:17,780 --> 00:03:27,020
OK, that gets me my host service ID and old status is just equal to CZI Euro Perram and I'm looking

45
00:03:27,020 --> 00:03:32,390
for I have to hand it the pointer to the request and I'm looking for old status and I capitalize that

46
00:03:32,410 --> 00:03:40,670
s so all of that so I can actually compile this log print line, try that again, print line on a log

47
00:03:41,690 --> 00:03:44,600
post service ID and old status.

48
00:03:44,870 --> 00:03:49,100
OK, so now what am I going to do in this request?

49
00:03:49,400 --> 00:03:53,990
Well, the first thing I have to do is to use that ID to get the host service.

50
00:03:55,700 --> 00:03:58,760
Then is there anything else that I need to do?

51
00:03:58,780 --> 00:04:00,460
Do I need the host information?

52
00:04:00,470 --> 00:04:01,190
I'm not sure.

53
00:04:01,580 --> 00:04:03,230
Let's just think about how this is going to work.

54
00:04:03,230 --> 00:04:05,180
So I'll just say get hosed.

55
00:04:05,690 --> 00:04:06,950
I may need that information.

56
00:04:08,240 --> 00:04:14,570
So what I want to do next is I want to test the service and I don't want to do that in this handler

57
00:04:14,570 --> 00:04:17,720
because I'm going to be testing services for multiple places.

58
00:04:17,960 --> 00:04:20,840
So I'll read another function to actually test that service.

59
00:04:21,650 --> 00:04:30,650
And then I want to create Jason a response and send the Jason to client to the request, whatever made

60
00:04:30,650 --> 00:04:31,300
that request.

61
00:04:31,910 --> 00:04:34,610
So this stuff I'm not going to worry about right now.

62
00:04:34,760 --> 00:04:40,730
I just want to manually send the information back and and make sure that everything is hooked up correctly.

63
00:04:40,760 --> 00:04:42,080
And I do this all the time.

64
00:04:42,080 --> 00:04:46,010
I'll create the necessary fetch on the template.

65
00:04:46,400 --> 00:04:48,920
I'll send the request off to this handler.

66
00:04:48,920 --> 00:04:52,970
And I have this handler send something back just to make sure that everything works.

67
00:04:53,690 --> 00:04:55,580
So let's just manually do this.

68
00:04:56,450 --> 00:05:02,510
Let's say let's create a variable which I'll call resp, and that will be assigned the value of JSON

69
00:05:02,510 --> 00:05:04,700
resp, which I haven't created yet.

70
00:05:04,700 --> 00:05:06,860
Have I know I better create that type.

71
00:05:07,280 --> 00:05:11,720
Let's create a type that will actually allow us to send information back to the client.

72
00:05:11,720 --> 00:05:18,770
So I call this type Jason Response, Jason Rasp, and it will be a struct and it's going to have some

73
00:05:18,770 --> 00:05:19,350
information.

74
00:05:19,370 --> 00:05:21,320
So OK, which will be a bool.

75
00:05:23,060 --> 00:05:26,040
And in Jason, I want that to be cold, OK?

76
00:05:26,060 --> 00:05:30,650
Lower case, definitely don't want to send that information back to let them know whether or not the

77
00:05:30,650 --> 00:05:32,180
request actually succeeded.

78
00:05:32,780 --> 00:05:34,790
I'm probably going to have some kind of message.

79
00:05:34,790 --> 00:05:35,720
I'll make that a string.

80
00:05:35,720 --> 00:05:38,390
And then Jason, I'll call that message.

81
00:05:40,420 --> 00:05:46,150
I'm probably going to have a service, I'd like to know what kind of service we're dealing with when

82
00:05:46,150 --> 00:05:49,900
we send it back, because I might need that on the client end and that will be an INT.

83
00:05:50,380 --> 00:05:55,960
And in Jason, I'll call that service underscore ID.

84
00:05:57,660 --> 00:05:59,600
Probably going to want the whole service tidy.

85
00:06:02,260 --> 00:06:07,420
Which will be Adient and Jason, I'll call that post service ID.

86
00:06:09,690 --> 00:06:17,070
Probably going to have the host study, which will be an end, and in Jason, I'll call that host study.

87
00:06:19,290 --> 00:06:25,410
And old status, let's say, will hand back the old status, what was the status before we performed

88
00:06:25,410 --> 00:06:25,910
the check?

89
00:06:26,520 --> 00:06:30,450
That is just a string and I'll call that in Jason.

90
00:06:31,440 --> 00:06:39,090
Old status and the new service, a new status, its new status.

91
00:06:39,820 --> 00:06:40,950
And again, that's just a string.

92
00:06:41,520 --> 00:06:42,990
And I'll call that in, Jason.

93
00:06:47,760 --> 00:06:48,750
New status.

94
00:06:51,080 --> 00:06:52,730
And last check.

95
00:06:55,240 --> 00:07:01,240
So we're going to be performing this and I want to send back the timestamp for the last check.

96
00:07:02,690 --> 00:07:07,700
And it'll be of type type times time and in Jason, I will call that.

97
00:07:11,490 --> 00:07:17,310
Last underscore check, OK, let's format this and see if we have everything we need.

98
00:07:17,460 --> 00:07:22,830
Now, this may be more information than I actually need, but I may need all of it and there's no problem

99
00:07:22,830 --> 00:07:23,310
sending it.

100
00:07:23,310 --> 00:07:24,890
It's just a very small JSON file.

101
00:07:25,230 --> 00:07:27,690
So we're sending back whether or not the request took place.

102
00:07:28,260 --> 00:07:28,770
That's good.

103
00:07:28,770 --> 00:07:29,640
Whether we succeeded.

104
00:07:29,640 --> 00:07:31,020
So, OK, that will be false.

105
00:07:31,020 --> 00:07:35,130
If something went wrong, the message will be whatever message we're sending back.

106
00:07:35,130 --> 00:07:40,380
And there might be an error message, it might be a success message, whatever it may be, the service

107
00:07:40,380 --> 00:07:43,080
ID that tells me what kind of service I'm checking.

108
00:07:43,080 --> 00:07:47,410
We just have one HDP with an idea of one the host service ID.

109
00:07:47,430 --> 00:07:52,800
I know that at the point of request and I need that to look up the host service, the host ID will be

110
00:07:52,800 --> 00:07:54,690
sending will be sending that back.

111
00:07:54,690 --> 00:07:55,860
Whether we need it or not.

112
00:07:55,860 --> 00:07:56,910
We're going to send it back.

113
00:07:57,630 --> 00:08:02,970
And old status and new status, very straightforward if it was pending and a change to healthy I send

114
00:08:02,970 --> 00:08:06,450
back pending for the old status and healthy for the new status.

115
00:08:06,810 --> 00:08:11,400
Last check is the date and time, the time stamp of when we perform this check.

116
00:08:11,430 --> 00:08:12,480
So now I have some information.

117
00:08:12,480 --> 00:08:14,070
I can send it back, send back.

118
00:08:14,700 --> 00:08:19,170
So back down here in my test check where I'm just wiring things up and making sure that they work.

119
00:08:19,440 --> 00:08:24,480
This will be type of of type JSON resp and we'll just send OK.

120
00:08:26,100 --> 00:08:34,380
We'll set that to true and for message will set that to test message, and this should be enough for

121
00:08:34,380 --> 00:08:37,620
me to actually make the request and send that information back.

122
00:08:38,370 --> 00:08:41,150
So let's turn this into Jason out.

123
00:08:41,310 --> 00:08:48,630
Underscore is a sign the value of Jason Marshall in debt and we're going to Marshall RESP and we'll

124
00:08:48,630 --> 00:08:52,520
just use nothing for the second parameter and a few spaces for the third parameter.

125
00:08:53,310 --> 00:08:54,710
So now we have our out variable.

126
00:08:54,720 --> 00:08:56,010
Let's set our header correctly.

127
00:08:58,480 --> 00:09:08,950
Header set and we're sending back content type of application, Jason, and we just write that to our

128
00:09:08,950 --> 00:09:12,410
response writers, so w dot right out.

129
00:09:13,450 --> 00:09:18,560
OK, so this should give us enough information to make sure that this is actually working.

130
00:09:19,750 --> 00:09:26,560
So let's go back to our host jet page and find the part where we're performing a check.

131
00:09:27,880 --> 00:09:29,320
And I'm going to add a parameter here.

132
00:09:29,320 --> 00:09:31,810
I'm going to call it old status, OK?

133
00:09:33,050 --> 00:09:42,080
Which means when I call this right up here, underspending, so we're underpinning services, we want

134
00:09:42,080 --> 00:09:47,810
to actually say check now, not just the ID, we also want pass pending.

135
00:09:49,040 --> 00:09:54,980
OK, so that, I believe, is formatted correctly, but you can't use double quotes and inside of double

136
00:09:54,980 --> 00:09:56,840
quotes will change that to single quotes.

137
00:09:58,540 --> 00:09:59,260
And that should be right.

138
00:09:59,440 --> 00:10:03,620
OK, so down here, I actually want to do more than just click it.

139
00:10:03,880 --> 00:10:07,300
I actually want to do a fetch so we can just say fetch.

140
00:10:09,670 --> 00:10:13,690
With our you are you are all and I can't remember that what that was, but I'll look it up in a minute

141
00:10:14,710 --> 00:10:17,980
and I need to pass two other pieces of information.

142
00:10:17,980 --> 00:10:23,430
So the pieces of information I want to send are going to be right from our you are out.

143
00:10:23,440 --> 00:10:25,180
So let's go to our roots and see what that you were.

144
00:10:25,180 --> 00:10:29,650
I was perform check old status or ID and old status.

145
00:10:29,860 --> 00:10:35,500
So let's go back here, find our host yet just paste that in there and get rid of this.

146
00:10:35,680 --> 00:10:40,750
This is not going to be an I.D. like that will just manually put it in.

147
00:10:40,870 --> 00:10:45,630
It's our ID from the parameters pass to this function, plus a slash.

148
00:10:47,290 --> 00:10:47,860
Plus.

149
00:10:50,310 --> 00:10:54,070
Old status, so that is what we're going to be calling.

150
00:10:54,090 --> 00:11:01,950
That's the URL, and then we want a dot then response which will change to Jason.

151
00:11:02,280 --> 00:11:03,060
Response.

152
00:11:03,780 --> 00:11:04,320
Jason.

153
00:11:08,720 --> 00:11:11,360
And then we want to do something with that response then.

154
00:11:12,580 --> 00:11:18,890
I'll just call this a data which is going to go to a function.

155
00:11:20,530 --> 00:11:25,270
And we need to close this off, all right, and all we'll do here is say console.

156
00:11:27,990 --> 00:11:28,530
Log.

157
00:11:30,790 --> 00:11:40,510
OK, followed by day two, OK, I have a typo here, response, response that works better.

158
00:11:42,100 --> 00:11:46,870
And then I'll say message, DataDot message.

159
00:11:49,480 --> 00:11:51,680
And that will let me know whether this is actually working or not.

160
00:11:51,700 --> 00:11:53,860
So let's stop our application.

161
00:11:54,370 --> 00:11:56,710
Oops, I just stopped it, but ah, start that back up.

162
00:11:57,790 --> 00:11:58,960
Stop our application.

163
00:11:59,200 --> 00:12:00,400
Run our application.

164
00:12:03,510 --> 00:12:10,230
Go back to our Web browser, open a JavaScript terminal, clear the console, reload the page.

165
00:12:11,040 --> 00:12:16,380
Apparently, I have to log in now admin at example, dot com password.

166
00:12:18,100 --> 00:12:18,760
Log in.

167
00:12:19,760 --> 00:12:25,940
That's better clear the console, go to our local host, look at the pending services and see what we

168
00:12:25,940 --> 00:12:29,630
got wrong, even though I haven't changed the case for this, this is still clickable.

169
00:12:29,630 --> 00:12:33,300
So hopefully this will fire off an AJAX request in the background.

170
00:12:34,070 --> 00:12:34,610
Wait a second.

171
00:12:34,620 --> 00:12:35,340
Let me remember.

172
00:12:35,540 --> 00:12:38,930
I think I missed one thing here before I do this.

173
00:12:39,410 --> 00:12:39,830
Yes.

174
00:12:39,830 --> 00:12:41,400
It's not perform check.

175
00:12:41,420 --> 00:12:44,510
It's admin, perform check.

176
00:12:45,110 --> 00:12:52,070
OK, let's reload this page, clear the console, go to our pending tab and try to check now.

177
00:12:53,030 --> 00:12:55,850
And it gave me OK, true messages, text message.

178
00:12:55,850 --> 00:12:58,490
OK, I know everything is hooked up properly and that's good.

179
00:12:59,000 --> 00:13:04,400
So the next step is to go back to her handlers which are under perform checks.

180
00:13:04,400 --> 00:13:09,200
No, I actually want to do this stuff, get the host service, figure out whether or not I need the

181
00:13:09,200 --> 00:13:11,900
house and send the information back to the client.

182
00:13:11,900 --> 00:13:13,390
That's not just hardcoded.

183
00:13:13,400 --> 00:13:15,620
That actually comes from our test function.

184
00:13:16,100 --> 00:13:21,650
So this means we need to create a function to actually test the service and pass it, the necessary

185
00:13:21,650 --> 00:13:26,570
information to see whether or not the service is alive and send the response back appropriately.

186
00:13:26,870 --> 00:13:30,380
OK, so we'll start that in the next lecture.
