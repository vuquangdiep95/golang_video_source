1
00:00:01,120 --> 00:00:06,550
So let's get around to actually sending messages, so when someone has a username in here and they have

2
00:00:06,550 --> 00:00:12,490
typed in a message, it should appear here prepend ID with their username and everyone should see that.

3
00:00:12,760 --> 00:00:14,570
And this is not terribly difficult.

4
00:00:14,980 --> 00:00:20,500
So the first thing I want to do is when someone types a message and presses enter or return, that should

5
00:00:20,500 --> 00:00:20,830
work.

6
00:00:20,830 --> 00:00:22,400
But I probably should put a button here, too.

7
00:00:22,420 --> 00:00:23,680
So let's go do that right now.

8
00:00:24,250 --> 00:00:28,870
I'll go back to my home jet or find the places where I'm entering them.

9
00:00:28,870 --> 00:00:37,750
And right here I will put in an hour and then I'll put in a trough equals JavaScript void just so nothing

10
00:00:37,750 --> 00:00:38,290
happens.

11
00:00:38,290 --> 00:00:46,980
But if I don't have something in the tag, this part class equals button button outline secondary button

12
00:00:47,030 --> 00:00:49,090
outlines secondary.

13
00:00:49,090 --> 00:00:49,960
I think that's how it goes.

14
00:00:50,620 --> 00:00:51,580
Gundry

15
00:00:53,800 --> 00:00:57,550
send message and I'll give this an ID.

16
00:00:57,700 --> 00:01:02,490
If I didn't have the RF tag then this part would not work properly.

17
00:01:03,460 --> 00:01:08,410
So we'll give this idea of send button.

18
00:01:09,340 --> 00:01:17,320
OK, so I created that send button and down here in my JavaScript I need to create a function and I

19
00:01:17,320 --> 00:01:22,480
know it doesn't, doesn't need to be my ADD event listeners, so I'll put it down below that and my

20
00:01:22,480 --> 00:01:28,540
function will be called send message function, send message.

21
00:01:31,870 --> 00:01:32,230
All right.

22
00:01:32,740 --> 00:01:33,550
So what do I want.

23
00:01:33,560 --> 00:01:35,080
Send a message to do.

24
00:01:35,620 --> 00:01:37,840
Well, let's create some JSON data.

25
00:01:38,770 --> 00:01:44,260
We know we're sending this through our sockets, so it has to be sent in the form of Jado of Jason data,

26
00:01:45,010 --> 00:01:45,640
Jason.

27
00:01:46,420 --> 00:01:48,880
And we'll give it some action, Jason.

28
00:01:51,250 --> 00:01:57,760
Jason, data action and I'm going to call this one broadcast because it's something kind of broadcast

29
00:01:57,760 --> 00:02:05,960
to all users broadcast and I need to give a username so I'll know who the message is from Jason Data.

30
00:02:07,060 --> 00:02:11,770
Username is equal to document

31
00:02:14,500 --> 00:02:23,440
get element by ID and the ID is username and I want the value from that and like using my username and

32
00:02:23,440 --> 00:02:26,830
the message will be, I'll just duplicate this line to make it a little easier.

33
00:02:28,120 --> 00:02:35,120
The data message will be document element, get element by ID, message value.

34
00:02:35,590 --> 00:02:39,460
OK, and we're going to put a check in here to make sure that both of these have been populated before

35
00:02:39,460 --> 00:02:41,710
we try to send the message, but we're not going to do it in this function.

36
00:02:43,510 --> 00:02:48,730
And finally, we'll say socket dot send.

37
00:02:52,350 --> 00:03:00,060
Jason Stringfellow, Jason Data, and that will send their data and now we want to reset this message

38
00:03:00,060 --> 00:03:02,900
thing to empty so they don't have to delete it themselves.

39
00:03:03,300 --> 00:03:04,770
So we'll just copy this part.

40
00:03:07,330 --> 00:03:08,470
And pasted in there.

41
00:03:09,340 --> 00:03:11,930
And say equals nothing.

42
00:03:13,270 --> 00:03:14,650
So that's our message function.

43
00:03:15,220 --> 00:03:22,360
Now, I want to be able to have this person click the button, which we defined right here to send it.

44
00:03:22,510 --> 00:03:27,430
OK, so I can just I could just put the JavaScript there, but I'm going to do a listener instead.

45
00:03:27,710 --> 00:03:32,740
And I also want people just to be able to hit enter because a lot of people that touch type don't like

46
00:03:32,740 --> 00:03:38,050
taking their hand off the keypad or where they are on the keyboard in order to hit the return key or

47
00:03:38,050 --> 00:03:39,840
to scroll down and click on the button.

48
00:03:39,850 --> 00:03:40,280
That's it.

49
00:03:41,350 --> 00:03:43,630
So we're going to have two ways of sending this.

50
00:03:43,630 --> 00:03:50,320
So let's handle the first case right now, let's say when someone is actually going to press the return

51
00:03:50,320 --> 00:03:50,550
key.

52
00:03:50,830 --> 00:03:56,830
So back in my document at event listener, at the very bottom of it, I'm going to put another listener

53
00:03:56,830 --> 00:04:05,710
in there and I'll say document get element by ID message, which is the place where you type messages

54
00:04:07,570 --> 00:04:09,940
at event listener and the event listener.

55
00:04:09,970 --> 00:04:10,980
I'm going to use this key down.

56
00:04:11,710 --> 00:04:21,610
So when someone presses the keys, this this listener will fire function event and if event dot code

57
00:04:21,970 --> 00:04:23,700
equals exactly enter.

58
00:04:25,570 --> 00:04:29,140
In other words, they have pressed the enter key then.

59
00:04:30,390 --> 00:04:38,760
I will say, if not socket, in other words, if they're not connected, I'll just say console log,

60
00:04:39,180 --> 00:04:39,960
no connection,

61
00:04:43,210 --> 00:04:46,430
and we could do some other error handling in their display and alert, whatever it may be.

62
00:04:46,440 --> 00:04:54,060
But for right now, I'm just going to say logged the log file and I'll return false so we don't go anywhere

63
00:04:54,060 --> 00:04:54,360
else.

64
00:04:56,370 --> 00:05:01,360
But if we get past that, then we want to say event prevent default.

65
00:05:01,860 --> 00:05:04,650
Don't try to submit a form which some browsers might try to do.

66
00:05:04,650 --> 00:05:11,160
And it's not going to hurt anything to stop this and eventually stop propagation again.

67
00:05:11,160 --> 00:05:15,900
Same idea to handle every possible browser I can think of and finally send the message.

68
00:05:17,120 --> 00:05:23,340
OK, so this part should we should be able to reload the page at least and not see any JavaScript errors.

69
00:05:23,340 --> 00:05:24,890
Let's make sure we didn't get anything wrong.

70
00:05:25,500 --> 00:05:27,930
I'll clear the screen, reload the page.

71
00:05:28,350 --> 00:05:30,870
And the only error I have is there's no Fabi control.

72
00:05:30,870 --> 00:05:31,600
Everything is great.

73
00:05:31,650 --> 00:05:34,920
OK, so at least that part seems to work now.

74
00:05:34,920 --> 00:05:41,070
We need to handle a situation where we actually get this part, get the send a message.

75
00:05:43,140 --> 00:05:49,710
So let's see if make sure that that's actually going to fire Trevor test no JavaScript errors, but

76
00:05:49,710 --> 00:05:50,370
it did clear it out.

77
00:05:50,370 --> 00:05:50,790
Perfect.

78
00:05:50,790 --> 00:05:52,330
So that's exactly what I wanted to do.

79
00:05:53,400 --> 00:05:58,080
So now we need to go back to our handlers and we need to trap for the action broadcast.

80
00:05:58,350 --> 00:05:59,550
So let's do that.

81
00:05:59,550 --> 00:06:00,510
Let's go to our handlers.

82
00:06:00,780 --> 00:06:07,590
Let's find the part where we're handling our actions right here and let's do a new one case broadcast.

83
00:06:09,780 --> 00:06:12,200
And what do we want to do in the case broadcast?

84
00:06:12,210 --> 00:06:13,440
Well, it's actually pretty simple.

85
00:06:14,010 --> 00:06:19,620
All we really need to do is to, first of all, set up a response action.

86
00:06:20,940 --> 00:06:22,590
And I'm going to make that broadcast again.

87
00:06:23,010 --> 00:06:30,480
This is the one we're sending back to the clients and we want to response to that message equal to.

88
00:06:30,480 --> 00:06:35,040
And what I'm going to do here is actually format a string pre pending the user's name.

89
00:06:35,460 --> 00:06:47,340
So format s, print F and I'll put percent s actually I'll put Strohm percent s strong to build their

90
00:06:47,340 --> 00:06:55,770
name and then another string and little put in there is a username that's the first placeholder.

91
00:06:55,770 --> 00:07:02,310
So that'll be between the strong tags and E message which will be right here at the end.

92
00:07:02,700 --> 00:07:07,500
And I just broadcast that broadcast to all response.

93
00:07:08,460 --> 00:07:14,730
OK, so now we've handled the case where we get this broadcast at the server, but we also need to handle

94
00:07:14,730 --> 00:07:20,280
the case where we get the broadcast message on the client and that is actually handled right here.

95
00:07:20,280 --> 00:07:27,570
Right now we have one case list users, so let's give it another case, case broadcast.

96
00:07:30,900 --> 00:07:32,280
And what do I want to do in here?

97
00:07:32,670 --> 00:07:38,760
Well, if you recall, back up here, we have this ID output equals chat box.

98
00:07:38,790 --> 00:07:40,710
So let's get a reference to this chat box.

99
00:07:40,710 --> 00:07:44,400
That's where we're going to be putting the messages and I'll get it right here.

100
00:07:45,090 --> 00:07:49,290
Let O equal document get limited by ID.

101
00:07:49,590 --> 00:07:52,770
And it's called CheckBox was Checkbook's.

102
00:07:55,360 --> 00:07:55,870
Where is it?

103
00:07:57,540 --> 00:07:58,920
Output, not chatterbox.

104
00:08:02,980 --> 00:08:06,940
OK, so that's where we're going to put our output, so now I have a reference to it so I can use it

105
00:08:06,940 --> 00:08:08,690
anywhere I want in the application.

106
00:08:09,640 --> 00:08:12,390
So down here under broadcast, what do I want to do?

107
00:08:12,790 --> 00:08:17,170
All I want to do is append the HTML to whatever's in there already.

108
00:08:17,170 --> 00:08:18,880
So odah html.

109
00:08:22,170 --> 00:08:29,820
Equals Odon Interreg tml plus, and then I want to put something in here, so what I want to put in

110
00:08:29,820 --> 00:08:31,680
here is dated message

111
00:08:35,070 --> 00:08:42,930
and return and then break so that in theory should work.

112
00:08:43,020 --> 00:08:44,160
Let's stop our application.

113
00:08:47,660 --> 00:08:58,520
And let's go back to this window and hit return and go back to Crumm and hit return and logging in as

114
00:08:59,660 --> 00:09:00,180
Wilma.

115
00:09:01,290 --> 00:09:02,720
OK, so Wilma's logged in now.

116
00:09:02,720 --> 00:09:09,250
We'll go back to Firefox and log in as Betty and we have Wilma and Betty and I will try sending a message.

117
00:09:09,290 --> 00:09:13,190
This is a message from Betty.

118
00:09:13,850 --> 00:09:17,480
Now, this button doesn't work because we haven't hooked it up yet, but this one does.

119
00:09:18,440 --> 00:09:20,540
And I get a message showing up down here.

120
00:09:20,540 --> 00:09:24,220
And hopefully when I go over to Chrome, I get a message here as well.

121
00:09:24,620 --> 00:09:26,110
So now we can send messages.

122
00:09:26,240 --> 00:09:27,260
That's pretty straightforward.

123
00:09:27,260 --> 00:09:29,300
But I'd also like to put a couple of checks in.

124
00:09:29,630 --> 00:09:36,350
I'd like to make sure that this and this are populated before you hit return here or before you click

125
00:09:36,350 --> 00:09:36,950
the button here.

126
00:09:36,960 --> 00:09:39,720
I want to make sure that error checking is in there, and that's pretty easy.

127
00:09:39,740 --> 00:09:47,990
So let's go back to our JavaScript code on the home page and we have the function send message so we

128
00:09:47,990 --> 00:09:53,290
could put a check in here, but we could also just come up here and put another listener in.

129
00:09:54,020 --> 00:09:57,580
So we named that button send button.

130
00:09:57,590 --> 00:09:59,330
So let's put a listener on send button.

131
00:10:00,470 --> 00:10:07,250
So I'll do that inside my document ready, which is starts right here at that event.

132
00:10:07,250 --> 00:10:08,950
Listener And it ends right here.

133
00:10:08,960 --> 00:10:21,720
So right after this document and get it by idee Senba add event listener click function.

134
00:10:24,410 --> 00:10:26,540
So first of all let's do some checks.

135
00:10:27,200 --> 00:10:31,400
So I'm going to put other two other selectors up here just to save myself some typing.

136
00:10:31,400 --> 00:10:41,360
So I'll put this one as user field and that's going to be a user name and I'll have another one message

137
00:10:41,360 --> 00:10:46,910
field which will be message just to say some typing.

138
00:10:46,910 --> 00:10:51,710
And down here I'm going to do some checks if and I'll have two conditions.

139
00:10:52,460 --> 00:10:57,440
User field, dot value, not value.

140
00:11:14,780 --> 00:11:22,490
So if either of those are empty, we'll just say alert, fill out user and message and you can put whatever

141
00:11:22,490 --> 00:11:25,550
you want in there and we'll just say return false.

142
00:11:26,720 --> 00:11:29,470
Let's just see if that works, because I think there might be a typo in there.

143
00:11:31,490 --> 00:11:32,360
No, that was good.

144
00:11:32,570 --> 00:11:40,670
OK, so that gives us one condition, Phillip, user and message otherwise else send a message.

145
00:11:41,610 --> 00:11:44,050
OK, so that works quite well.

146
00:11:44,660 --> 00:11:47,890
So we're putting a An event listener on the button.

147
00:11:48,260 --> 00:11:50,190
But what about on send a message.

148
00:11:50,210 --> 00:11:51,170
Well let's just see.

149
00:11:51,180 --> 00:12:00,980
So send a message when we put the listener on this, we can just for right now copy this and find the.

150
00:12:03,130 --> 00:12:04,510
Listener for.

151
00:12:06,880 --> 00:12:07,820
Send message.

152
00:12:07,840 --> 00:12:11,740
There it is, send button and that's message.

153
00:12:15,940 --> 00:12:20,770
OK, and take this and put it down here, and that should work.

154
00:12:20,890 --> 00:12:25,570
So let's try this, let's reload this and just try sending a message that didn't work and let's click

155
00:12:25,570 --> 00:12:27,960
in here and send a message that didn't work as well.

156
00:12:28,000 --> 00:12:28,480
Perfect.

157
00:12:29,440 --> 00:12:31,930
So that gives us our basic chat functionality.

158
00:12:31,930 --> 00:12:34,780
And it seems to me that this is relatively straightforward.

159
00:12:34,810 --> 00:12:39,610
There's more JavaScript on the client side than there is go code because the gorilla websocket package

160
00:12:39,610 --> 00:12:44,450
is so robust, but the JavaScript itself is not that complex.

161
00:12:44,710 --> 00:12:48,110
So our chat functionality is actually starting to look pretty good.

162
00:12:48,280 --> 00:12:53,290
We still have some a few things I want to do just to make sure it's a little more robust and we'll take

163
00:12:53,290 --> 00:12:55,420
care of those in the next few lecture's.
