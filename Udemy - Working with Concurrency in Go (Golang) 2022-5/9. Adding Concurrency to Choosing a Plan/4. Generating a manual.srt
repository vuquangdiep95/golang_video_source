1
00:00:01,150 --> 00:00:01,630
Okay.

2
00:00:01,630 --> 00:00:07,390
So now we're sending on an email with a rather simplistic invoice, and the next step is to generate

3
00:00:07,390 --> 00:00:08,230
a manual.

4
00:00:08,230 --> 00:00:12,700
And as I said in the last lecture, this one's a little more complex, but it's not that difficult.

5
00:00:12,850 --> 00:00:20,470
We actually want to open an existing PDF, write some information to it, and then send that PDF to

6
00:00:20,470 --> 00:00:20,950
the user.

7
00:00:21,640 --> 00:00:27,400
Now there's many ways to write PDFs in Go or in any other language you can use a service.

8
00:00:28,120 --> 00:00:30,040
The one that I like to use is this one.

9
00:00:30,040 --> 00:00:34,270
We have to go get a couple of packages, so let's open your terminal and make sure you're at the root

10
00:00:34,270 --> 00:00:39,580
level of your project and go and get and I'm going to paste it in because I have it on my clipboard

11
00:00:40,450 --> 00:00:49,240
github dot com slash p hp dave one one slash go f pdf go get that.

12
00:00:49,750 --> 00:00:52,570
And this is a library that allows us to write PDF files.

13
00:00:52,600 --> 00:00:58,870
Okay, then I'm going to hit the up arrow and get a second one and this is the same URL.

14
00:00:58,870 --> 00:01:06,400
And then at the end I add slash contrib for contribution slash go f p d.

15
00:01:06,400 --> 00:01:06,910
All right.

16
00:01:07,960 --> 00:01:14,110
So one is a library that allows us to create a PDF and the second one is one that allows us to open

17
00:01:14,110 --> 00:01:16,950
an existing PDF and use that as a template.

18
00:01:16,960 --> 00:01:18,670
And of course, that's what we're going to do.

19
00:01:19,390 --> 00:01:21,280
So I have those libraries installed now.

20
00:01:21,310 --> 00:01:22,540
That means I have access to them.

21
00:01:23,140 --> 00:01:29,800
So back in handler's dot go in the handler we're working on right now, the one that subscribes the

22
00:01:29,800 --> 00:01:30,760
user to a plan.

23
00:01:31,270 --> 00:01:35,320
The next step, of course, is to actually go and generate that PDF.

24
00:01:35,590 --> 00:01:37,330
Now we need one to work with.

25
00:01:37,870 --> 00:01:42,100
If you go to the course resources for this lecture, you'll see a PDF file you can download.

26
00:01:42,100 --> 00:01:49,000
And it's not terribly exciting, but it's an example of just a PDF that we can open and work on.

27
00:01:49,030 --> 00:01:55,750
So it's called Manual Dot PDF and put it as I have at the root level of your project in a folder called

28
00:01:55,750 --> 00:01:56,320
PDF.

29
00:01:56,440 --> 00:01:59,590
So inside of pdf I have manual dot pdf.

30
00:02:00,130 --> 00:02:03,550
Okay, very simple file and we'll be seeing it before too long.

31
00:02:04,520 --> 00:02:09,890
So right after this go funk that we worked on last time, let's just write another go funk.

32
00:02:10,430 --> 00:02:13,160
Now, I could and I'm sure that you've already noticed this.

33
00:02:13,610 --> 00:02:19,940
I could have taken all of that logic right here in this first go funk, where I defer and I create an

34
00:02:19,940 --> 00:02:21,590
invoice and then do an email.

35
00:02:21,620 --> 00:02:24,320
I could have put all of that into a function, but I didn't.

36
00:02:25,160 --> 00:02:31,040
And that was entirely a decision on my point, because I'm going to assume that get invoice is its own

37
00:02:31,370 --> 00:02:35,540
functionality and has a lot more logic in it than just returning a string.

38
00:02:36,680 --> 00:02:39,050
So we'll do the same thing here for manuals.

39
00:02:39,080 --> 00:02:43,580
So once again, I need to update my weight group by adding one to it.

40
00:02:43,850 --> 00:02:50,330
So after wait, don't add add one again.

41
00:02:50,420 --> 00:02:51,380
I'm just doing one thing.

42
00:02:52,280 --> 00:02:55,090
And then inside of this, of course, I want to defer app.

43
00:02:55,100 --> 00:02:55,780
Don't wait.

44
00:02:56,420 --> 00:02:57,080
Not done.

45
00:02:58,820 --> 00:02:59,230
Okay.

46
00:02:59,240 --> 00:03:01,730
And then make sure that my weight group is updated appropriately.

47
00:03:02,780 --> 00:03:04,490
And inside of this is pretty straightforward.

48
00:03:05,270 --> 00:03:07,700
So the first thing I'm going to do is get a PDF.

49
00:03:08,120 --> 00:03:10,730
When I call a function that doesn't exist yet.

50
00:03:10,940 --> 00:03:14,330
App dot and we're going to generate a menu.

51
00:03:16,010 --> 00:03:16,330
Okay.

52
00:03:16,730 --> 00:03:20,990
And once again, to generate a manual, I'm probably going to need the user and I'm probably going to

53
00:03:20,990 --> 00:03:21,550
need to plan.

54
00:03:22,590 --> 00:03:24,040
So this function doesn't exist.

55
00:03:24,060 --> 00:03:28,110
So just like we did last time, let's come down here and work on this function before we do anything

56
00:03:28,110 --> 00:03:28,440
else.

57
00:03:28,950 --> 00:03:37,200
Funk app with a receiver of pointer to config and this one is called generate manual and it takes you

58
00:03:37,230 --> 00:03:43,440
which is a type data point user and plan which is app type pointer to data plan.

59
00:03:45,030 --> 00:03:50,370
And it's going to return a pointer to make sure you get this typed right.

60
00:03:50,910 --> 00:04:01,160
Go f pdf dot and the one I want is actually called f pdaf right there.

61
00:04:02,640 --> 00:04:02,990
Okay.

62
00:04:03,870 --> 00:04:05,250
So that did the import for me.

63
00:04:05,970 --> 00:04:12,210
And now inside of this function, what we're going to do is define a PDF, set its size and its margins

64
00:04:12,210 --> 00:04:13,010
and things like that.

65
00:04:13,020 --> 00:04:21,600
So let's create a variable called PO and that comes from go f pdf which I find really hard to type dot

66
00:04:21,600 --> 00:04:25,140
new and I'll specify a few things about it.

67
00:04:25,290 --> 00:04:27,000
It's in portrait, okay?

68
00:04:27,600 --> 00:04:30,300
And it's going to be we're going to count things in millimeters.

69
00:04:31,020 --> 00:04:32,430
It's letter sized paper.

70
00:04:33,150 --> 00:04:37,340
And the last parameter I'm going to leave empty is unimportant for our purposes.

71
00:04:37,400 --> 00:04:37,800
Okay.

72
00:04:38,580 --> 00:04:40,950
Both pdf i do find that hard to type.

73
00:04:40,960 --> 00:04:43,620
Go f pdf.

74
00:04:44,070 --> 00:04:44,550
That's better.

75
00:04:46,290 --> 00:04:46,650
Okay.

76
00:04:46,750 --> 00:04:47,490
We have that now.

77
00:04:47,490 --> 00:04:54,990
We'll set some margins, pdf dot set margins and I'll set them to reasonable defaults.

78
00:04:54,990 --> 00:04:55,380
Okay.

79
00:04:55,410 --> 00:04:57,720
Ten, 13 and ten.

80
00:04:57,750 --> 00:05:00,150
And those are all in millimeters because that's how we're measuring things.

81
00:05:01,710 --> 00:05:06,060
Now I want to import an existing PDF so I'll create an importer.

82
00:05:06,090 --> 00:05:09,420
It's just a variable name I'm choosing right now and that's a sign.

83
00:05:09,420 --> 00:05:17,010
The value of this one is go fp d i dot new importer right there.

84
00:05:17,190 --> 00:05:17,540
Okay.

85
00:05:19,200 --> 00:05:20,340
And it takes no parameters.

86
00:05:20,370 --> 00:05:21,750
So we have an importer variable.

87
00:05:22,080 --> 00:05:28,120
Now I'm going to simulate the amount of time it might take to actually create a PDF.

88
00:05:28,140 --> 00:05:32,040
You have a really complex PDF and you're doing a lot of substitutions and maybe some math.

89
00:05:32,550 --> 00:05:34,600
It might take a second or two to produce this.

90
00:05:34,620 --> 00:05:41,370
So just to give us a little simulation of a complex task for sleep for ten.

91
00:05:41,370 --> 00:05:44,100
No, five times timed out second.

92
00:05:44,380 --> 00:05:46,000
So I'll make this take 5 seconds.

93
00:05:46,020 --> 00:05:46,350
Okay.

94
00:05:47,220 --> 00:05:48,150
So we have our importer.

95
00:05:48,270 --> 00:05:55,170
Now I'm going to create a variable T, which I'll think of as template, and that comes from importer

96
00:05:55,770 --> 00:05:57,870
dot import a page.

97
00:05:58,620 --> 00:06:02,160
Importer dot import page right there.

98
00:06:04,800 --> 00:06:05,610
Into PDF.

99
00:06:05,610 --> 00:06:06,660
That's my first argument.

100
00:06:06,660 --> 00:06:08,670
And then the location of that page.

101
00:06:08,670 --> 00:06:15,450
Well, it's in a dot slash pdf slash menu dot pdf.

102
00:06:15,630 --> 00:06:16,950
That's the one I want to import.

103
00:06:16,980 --> 00:06:18,440
Okay, not finished.

104
00:06:18,450 --> 00:06:21,990
There's another parameter which is one page number one.

105
00:06:22,290 --> 00:06:24,420
And the last one is the.

106
00:06:25,370 --> 00:06:30,680
The box and this is weird, but this is because we're working with PDFs and they have their own logic.

107
00:06:30,950 --> 00:06:35,090
We need to call it Media Box with a capital M and a capital B.

108
00:06:35,380 --> 00:06:36,380
Can I have this T?

109
00:06:37,160 --> 00:06:39,350
And it looks like I have a typo there somewhere.

110
00:06:39,860 --> 00:06:41,630
Which pdf did it import for me?

111
00:06:43,270 --> 00:06:43,640
Okay.

112
00:06:43,700 --> 00:06:46,630
So it's not that one did the wrong import for me.

113
00:06:46,640 --> 00:06:49,010
I have multiple versions of this imported.

114
00:06:49,190 --> 00:06:55,100
You shouldn't contrib slash go fp the.

115
00:06:57,870 --> 00:07:06,210
And go f pd f slash contrib slash and go a pdf there.

116
00:07:06,260 --> 00:07:06,620
Okay.

117
00:07:06,660 --> 00:07:11,340
Probably you didn't have that multiple versions of go FPI installed, but I've been working with it

118
00:07:11,340 --> 00:07:13,500
for a long time and that was an over.

119
00:07:13,740 --> 00:07:15,720
So this is the correct one.

120
00:07:15,720 --> 00:07:17,970
Now let's get back down to our function right here.

121
00:07:18,570 --> 00:07:23,430
So I now have my importer and my T is my template I'm going to be working with.

122
00:07:23,850 --> 00:07:27,300
So the next step is to add a page to our new PDF variable.

123
00:07:27,310 --> 00:07:32,340
So it's simple enough PDF to add page and page right there.

124
00:07:32,910 --> 00:07:34,320
So now we have one page in there.

125
00:07:35,420 --> 00:07:39,240
And now we tell it to use the imported template for that page.

126
00:07:39,290 --> 00:07:40,490
So we'll say importer

127
00:07:43,070 --> 00:07:47,960
dot use imported template right there.

128
00:07:49,990 --> 00:07:57,450
Using PDF with a variable t, we just created an zero and zero and 215.9.

129
00:07:57,460 --> 00:07:59,500
This is just getting it centered on the page proper.

130
00:07:59,860 --> 00:08:03,040
So those are the dimensions that those are the coordinates we're going to put it on.

131
00:08:03,200 --> 00:08:03,460
Okay.

132
00:08:04,390 --> 00:08:09,790
So now we've imported that, that template manual dot PDF that we just write on top of it.

133
00:08:09,800 --> 00:08:19,720
So I'll say PDF and I set my X and y coordinates and you do this again, set x, you do this by getting

134
00:08:19,720 --> 00:08:23,350
it a ruler and measuring where you want something to appear on the page.

135
00:08:23,620 --> 00:08:24,760
So I've done that for you.

136
00:08:25,120 --> 00:08:27,820
X should be 75 pdf to set.

137
00:08:27,820 --> 00:08:31,750
Y should be 150.

138
00:08:32,200 --> 00:08:32,530
Okay.

139
00:08:34,700 --> 00:08:38,750
And now I can do things like setting the font, so I'll just choose one that I'm pretty sure is installed

140
00:08:38,750 --> 00:08:40,040
on every computer out there.

141
00:08:40,100 --> 00:08:41,570
PDF to set font.

142
00:08:43,930 --> 00:08:45,220
And I'm going to choose the font.

143
00:08:45,430 --> 00:08:49,410
Arial and it's not going to be bold or italics.

144
00:08:49,420 --> 00:08:52,030
So I leave that empty and I'll make the point size 12.

145
00:08:52,380 --> 00:08:55,360
Okay, so I now have a font and now I just write things.

146
00:08:55,360 --> 00:08:59,980
So the syntax is a little awkward for this if you've never worked with it before, but it does make

147
00:08:59,980 --> 00:09:00,400
sense.

148
00:09:00,400 --> 00:09:01,660
PDF to multi.

149
00:09:01,660 --> 00:09:05,770
So we want to write a cell that may span multiple lines.

150
00:09:06,340 --> 00:09:11,440
Zero is the first parameter, four is the spacing, so the first one was the width zero.

151
00:09:11,440 --> 00:09:13,750
Just figure out how why you need to be on your own.

152
00:09:14,080 --> 00:09:16,000
Four is the spacing between lines.

153
00:09:16,960 --> 00:09:19,030
And then I put string to I want to put there.

154
00:09:19,030 --> 00:09:27,040
So I'll put the user's name format or s print s s print F and I format string is percent s and space

155
00:09:27,040 --> 00:09:30,070
percent s and then I get the users first name and last name.

156
00:09:30,070 --> 00:09:33,130
So you got first name and you don't last name.

157
00:09:34,510 --> 00:09:34,910
Okay.

158
00:09:34,930 --> 00:09:37,840
So that's the, the, the string that I want printed.

159
00:09:38,350 --> 00:09:40,000
I want nothing else applied to it.

160
00:09:40,180 --> 00:09:41,320
I want to center it.

161
00:09:41,620 --> 00:09:45,910
You can use L for left C for center R for right and false.

162
00:09:45,910 --> 00:09:47,260
Don't apply any shading to this.

163
00:09:47,260 --> 00:09:49,960
So okay, so we have that now.

164
00:09:49,960 --> 00:09:57,430
I'll print a blank line pdf dot l n and it does require some kind of argument so I'll make five five.

165
00:09:57,430 --> 00:09:58,030
Mm.

166
00:09:58,090 --> 00:10:00,280
That's a good space and then I'll print another one.

167
00:10:00,610 --> 00:10:01,150
PDF.

168
00:10:01,420 --> 00:10:02,290
Multi cell.

169
00:10:03,280 --> 00:10:06,460
Multi cell again with zero and four.

170
00:10:06,460 --> 00:10:08,920
And this time I'll just print out the name of the user guide.

171
00:10:09,370 --> 00:10:11,740
So again, use format s print f.

172
00:10:12,970 --> 00:10:21,790
Now my format string is percent s space user guide, not guild guide and the same for the last thing.

173
00:10:21,850 --> 00:10:25,900
Nothing C and no shading.

174
00:10:26,740 --> 00:10:27,100
Okay.

175
00:10:27,820 --> 00:10:29,830
And then I return the pdf.

176
00:10:31,420 --> 00:10:36,190
So now I have my pdf constructed and I received it and the variable up here.

177
00:10:36,280 --> 00:10:43,000
Now I'll just write it to a file so I'll write it to a temporary folder at the root level of my application

178
00:10:43,060 --> 00:10:45,070
and I'll have to create that folder, but I'll do that in a moment.

179
00:10:45,400 --> 00:10:53,740
So we'll just say error is a sign the value of pdf dot output file and close.

180
00:10:54,130 --> 00:10:54,400
Okay.

181
00:10:55,990 --> 00:11:04,270
And we're going to print it with a specific name format, sprint F and I'm going to use a format string

182
00:11:04,840 --> 00:11:07,720
of dot slash, temp slash.

183
00:11:09,540 --> 00:11:15,570
Then percent d which will be the ID of this user underscore manual dot pdf.

184
00:11:15,780 --> 00:11:21,690
That way you know you're never going to have one user generating two manuals at the same instant.

185
00:11:21,750 --> 00:11:27,660
So this way I know that by pretending at the user I.D. at the beginning of this file name, that it

186
00:11:27,660 --> 00:11:30,240
actually won't overwrite somebody else's file.

187
00:11:31,460 --> 00:11:34,250
And my substitution for that is user id.

188
00:11:35,870 --> 00:11:36,230
Okay.

189
00:11:37,070 --> 00:11:40,760
So we check for an error if errors not equal to nil.

190
00:11:40,790 --> 00:11:42,320
And now we have somewhere to send this error.

191
00:11:44,240 --> 00:11:48,740
We just go to app dot error channel and that receives here.

192
00:11:49,490 --> 00:11:51,260
I don't want to go any further, so I'll return.

193
00:11:52,920 --> 00:11:53,260
Okay.

194
00:11:54,290 --> 00:11:59,270
But if that all works according to plan, then let's create a message.

195
00:11:59,420 --> 00:12:06,860
MSG is a sign the value that again, MSG is a sign the value of type message.

196
00:12:07,160 --> 00:12:09,320
We'll fill in and fill in its necessary fields.

197
00:12:09,350 --> 00:12:09,710
Okay.

198
00:12:10,190 --> 00:12:12,800
So two will be user dot email.

199
00:12:12,810 --> 00:12:13,730
Same as before.

200
00:12:14,480 --> 00:12:18,380
Subject will be your manuals manual.

201
00:12:19,130 --> 00:12:19,520
Okay.

202
00:12:21,930 --> 00:12:35,130
The data will be, just say your user manual is attached and then I want to add an attachment.

203
00:12:35,550 --> 00:12:40,440
Now I just wrote a PDF file named in the case of this user.

204
00:12:40,470 --> 00:12:47,460
One underscore manual dot pdf, which is great for my purposes, but it would be more useful if I could

205
00:12:47,460 --> 00:12:53,760
actually attach that message or attach this file to that message and just call it manual dot pdf.

206
00:12:53,910 --> 00:12:59,370
Now I could, you know, split on the underscore and hope for the best, but let's go back over to our

207
00:12:59,370 --> 00:13:00,480
mailer for a minute.

208
00:13:01,110 --> 00:13:06,050
Let's fix this so we can actually embed attachments in an email with a custom name.

209
00:13:06,060 --> 00:13:10,290
And let's also take care of something that was a bit of an oversight when I wrote this a while ago.

210
00:13:10,710 --> 00:13:12,900
So, first of all, let's go to the top of this file.

211
00:13:13,350 --> 00:13:16,500
And in this type message, we have attachments.

212
00:13:17,520 --> 00:13:24,690
Let's put in another one called Attachments Map, because sometimes you want to attach something and

213
00:13:24,690 --> 00:13:25,740
override the name.

214
00:13:26,250 --> 00:13:28,380
So attachment, I think it's singular.

215
00:13:28,380 --> 00:13:36,780
So it's closer to the other attachment map and that's going to be a map with a key of string and a value

216
00:13:36,780 --> 00:13:37,230
of string.

217
00:13:37,710 --> 00:13:39,090
Okay, so let's save that.

218
00:13:39,930 --> 00:13:41,340
So we have this type.

219
00:13:42,750 --> 00:13:47,510
This is going to allow me to construct a map with two pieces of string information.

220
00:13:47,520 --> 00:13:49,110
One is the key and one is the value.

221
00:13:49,500 --> 00:13:55,680
And this allows me to take advantage of a second way of actually embedding attachments in an email message.

222
00:13:56,700 --> 00:14:02,340
So let's go down to where we're attaching our our attachments, which is.

223
00:14:05,230 --> 00:14:06,400
Right down here.

224
00:14:06,640 --> 00:14:07,030
Okay.

225
00:14:07,750 --> 00:14:09,400
And let's add another thing here.

226
00:14:09,670 --> 00:14:17,110
If the length of MSG dot attachment map is greater than zero, if that map is not empty, then we'll

227
00:14:17,110 --> 00:14:19,180
go to for another for loop.

228
00:14:19,970 --> 00:14:22,570
In this case, we will want both the key and the value.

229
00:14:23,200 --> 00:14:27,940
When we range through the MSG attachment map.

230
00:14:30,840 --> 00:14:34,620
And it's very much it's very similar to how we add attachments right here.

231
00:14:34,620 --> 00:14:35,820
But we actually do it like this.

232
00:14:36,240 --> 00:14:38,010
Email it at attachment.

233
00:14:41,440 --> 00:14:46,810
And we can actually give it the value, which is the physical name or the name of the physical file

234
00:14:46,810 --> 00:14:47,650
stored somewhere.

235
00:14:47,950 --> 00:14:50,290
And key is what we're going to call it when we add the attachment.

236
00:14:50,590 --> 00:14:50,890
Okay.

237
00:14:51,400 --> 00:14:56,740
Now, the only other situation we need to take into account here is if we're sending an email and that

238
00:14:56,740 --> 00:14:57,910
map is not.

239
00:14:58,210 --> 00:14:59,110
It doesn't exist.

240
00:14:59,110 --> 00:15:02,260
It's just an unknown initialized map, and we'll get an error.

241
00:15:02,290 --> 00:15:10,840
So we need to come back up here to the top and we can say if MSG dot attachment map equals nil.

242
00:15:12,500 --> 00:15:19,850
Then msg attachment map equals make map string string.

243
00:15:19,940 --> 00:15:24,020
Now I'm not sure I have to do that, but you know, it's not going to hurt to do this.

244
00:15:24,470 --> 00:15:26,540
And I'm a built in suspenders kind of guy.

245
00:15:26,570 --> 00:15:31,250
I just want to make sure that what I'm trying to arrange through a map, that it actually is an initialized

246
00:15:31,250 --> 00:15:32,480
map, even if it's empty.

247
00:15:32,660 --> 00:15:32,990
Okay.

248
00:15:33,470 --> 00:15:34,280
So that's one thing.

249
00:15:34,460 --> 00:15:38,360
Now, the other thing that I want to draw to your attention, and I'm sure at least some of you noticed

250
00:15:38,360 --> 00:15:45,590
this when we're passing data to our email templates, we're actually not doing it in a very effective

251
00:15:45,590 --> 00:15:46,010
way.

252
00:15:46,220 --> 00:15:46,700
Okay.

253
00:15:47,330 --> 00:15:53,540
To start with, what we're doing here is we're creating a map of string INI and storing message data

254
00:15:53,540 --> 00:15:53,960
in it.

255
00:15:54,440 --> 00:16:00,830
So basically, if when I'm sending an email, if I specify message data map to be something, I'm completely

256
00:16:00,830 --> 00:16:03,260
overwriting that and that's not appropriate.

257
00:16:04,190 --> 00:16:07,550
So instead, let's comment this up and we'll get rid of it in a minute.

258
00:16:08,480 --> 00:16:15,440
Instead, we'll do it like this if the length of MSG data map is equal to zero.

259
00:16:15,980 --> 00:16:17,630
Then try that again.

260
00:16:18,110 --> 00:16:20,180
Put this parentheses where it belongs.

261
00:16:21,890 --> 00:16:23,120
That makes a little more sense.

262
00:16:23,690 --> 00:16:24,890
Then we'll create a data map.

263
00:16:24,980 --> 00:16:35,100
So we'll say message data map is equal to make map string any.

264
00:16:35,690 --> 00:16:37,250
Very similar to what I'm doing up here.

265
00:16:37,290 --> 00:16:37,570
Okay.

266
00:16:37,640 --> 00:16:45,160
Just making a an initialized empty string, and then I add down here, instead of overwriting everything,

267
00:16:45,170 --> 00:16:52,370
I'll say message that data map with message that key which I have to spell.

268
00:16:52,370 --> 00:16:52,640
Right.

269
00:16:54,750 --> 00:16:58,680
That's better is equal to my short data.

270
00:16:59,490 --> 00:17:04,140
That way I can have more than one thing in that map, and I can pass multiple bits of information of

271
00:17:04,140 --> 00:17:05,610
any kind to a template.

272
00:17:06,780 --> 00:17:09,360
And that was just sloppy coding on my part.

273
00:17:10,320 --> 00:17:11,280
Quite a while ago now.

274
00:17:11,430 --> 00:17:13,380
In any case, it's taken care of at the moment.

275
00:17:13,410 --> 00:17:18,570
So let's go back to our handlers, and now we can add an actual attachment with the custom name.

276
00:17:18,720 --> 00:17:19,080
Okay.

277
00:17:19,530 --> 00:17:21,930
So we can say attachment map right there.

278
00:17:23,370 --> 00:17:27,410
It's equal to the type map, string, string.

279
00:17:27,720 --> 00:17:33,280
And we just populate one value in there and we'll say we're going to call this manual PDS.

280
00:17:34,140 --> 00:17:36,690
That's what it's going to be named when we attach it.

281
00:17:37,110 --> 00:17:41,670
And we're going to attach the same thing we have right here, format as print.

282
00:17:42,090 --> 00:17:43,200
All of that.

283
00:17:43,200 --> 00:17:46,680
So I can copy this pasted in here.

284
00:17:46,710 --> 00:17:50,010
And it takes a column, not a comma and a comma at the end.

285
00:17:50,270 --> 00:17:51,480
Okay, so now we have the message.

286
00:17:53,010 --> 00:17:54,300
And now we'll say apt.

287
00:17:54,480 --> 00:17:58,050
Send mail, send email, we'll send message.

288
00:17:58,950 --> 00:18:01,370
And while we're at it, just test the errors charm.

289
00:18:01,410 --> 00:18:04,350
Remember that that application wide error channel we had.

290
00:18:05,190 --> 00:18:08,160
Let's say test app error champ.

291
00:18:08,460 --> 00:18:13,950
Now we can do that just by saying app error can not get sent.

292
00:18:14,580 --> 00:18:15,780
Errors dot new.

293
00:18:16,320 --> 00:18:20,220
And that should do the import for me some custom error.

294
00:18:21,070 --> 00:18:21,330
Okay.

295
00:18:22,980 --> 00:18:25,260
So now we generated a manual.

296
00:18:25,260 --> 00:18:29,100
So put this comment right up here where it needs to go.

297
00:18:29,410 --> 00:18:30,630
So it's in the right place.

298
00:18:35,030 --> 00:18:40,430
So if you look at our code now, when we get to this, this handler subscribe to plan.

299
00:18:40,520 --> 00:18:42,770
First of all, we get the ID as a string.

300
00:18:42,920 --> 00:18:46,700
We convert the idea of the plan the user is choosing to an integer.

301
00:18:47,240 --> 00:18:50,120
Then we get the plan from the database by plan ID.

302
00:18:50,930 --> 00:18:53,930
If we can't find that plan, we give them an error.

303
00:18:54,470 --> 00:18:57,350
But assuming we get past that, we get the user from the session.

304
00:18:57,410 --> 00:19:02,750
If we can't find the user in the session, that means somehow they went to this plan's page while they

305
00:19:02,750 --> 00:19:03,620
were logged in.

306
00:19:04,010 --> 00:19:08,420
Then maybe they walked away and had a coffee and went for a walk and took the dog inside, came back

307
00:19:08,420 --> 00:19:08,840
inside.

308
00:19:08,870 --> 00:19:10,250
Their session had timed out.

309
00:19:10,630 --> 00:19:12,680
That's the only way you can get this error.

310
00:19:13,910 --> 00:19:18,110
But whatever the case may be, we take them back to the login page if we've lost their session.

311
00:19:18,830 --> 00:19:23,900
Then we add one of the weight group and we fire off a go routine that'll run very, very quickly.

312
00:19:23,900 --> 00:19:26,810
In our case, that generates and emails an invoice.

313
00:19:27,920 --> 00:19:31,400
And then we generate a manual again.

314
00:19:31,400 --> 00:19:32,750
We add one to our weight group.

315
00:19:33,140 --> 00:19:35,300
We decrement it with a defer thing here.

316
00:19:35,810 --> 00:19:42,530
And we run this function in the background and that generates a PDF and emails it off to the user.

317
00:19:42,530 --> 00:19:44,900
And then it has a little test of our error chain as well.

318
00:19:45,070 --> 00:19:48,800
Okay, so what happens next?

319
00:19:48,890 --> 00:19:52,970
Well, what happens next, of course, is we need to subscribe a user to account.

320
00:19:53,000 --> 00:19:58,040
I'm going to skip that right now and I'm going to redirect let's do the redirect because that I can

321
00:19:58,040 --> 00:20:02,240
do without any worry about populating your database with spurious information.

322
00:20:03,470 --> 00:20:15,110
So we'll say after session dot put using our dot context and we'll put it in a flash message and we'll

323
00:20:15,110 --> 00:20:21,980
say subscribed, which isn't true because we haven't actually subscribed yet, but we just want to see

324
00:20:21,980 --> 00:20:23,960
if the PDF and email actually work.

325
00:20:24,650 --> 00:20:34,190
And then we do a redirect issue of redirect using W in our to slash members, slash plans and hdp dot

326
00:20:34,190 --> 00:20:35,180
status C other.

327
00:20:35,960 --> 00:20:36,220
Okay.

328
00:20:37,580 --> 00:20:40,940
So if everything goes according to plan, this should work.

329
00:20:41,120 --> 00:20:46,430
The only thing I have to do now or it's not going to work is to come back to the root level of my application

330
00:20:46,760 --> 00:20:53,120
and create a new folder called Temp Temp because we're going to be writing our PDFs to that temporary

331
00:20:53,120 --> 00:20:53,660
directory.

332
00:20:53,840 --> 00:20:54,190
Okay.

333
00:20:55,220 --> 00:20:59,920
Now, we've written quite a bit of code since the last time we actually tried to run anything.

334
00:20:59,930 --> 00:21:02,180
So undoubtedly there's a problem in there somewhere.

335
00:21:02,510 --> 00:21:07,250
But in the next lecture, we'll try to fire things up and see if we got anything wrong.

336
00:21:07,370 --> 00:21:08,960
Okay, let's move on.
