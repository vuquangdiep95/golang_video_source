1
00:00:00,960 --> 00:00:04,500
So let's put some of what we've covered so far into practice.

2
00:00:04,530 --> 00:00:11,100
You can watch me do this over and over and over, and until you've done it yourself a few hundred times,

3
00:00:11,100 --> 00:00:14,040
it's really not going to be of much use to you.

4
00:00:14,280 --> 00:00:16,320
So I have a simple challenge for you.

5
00:00:16,620 --> 00:00:21,900
If you go to the course resources for this lecture, you'll see a file you can download called challenge

6
00:00:21,900 --> 00:00:29,610
dash one dot zip download that, unzip it and open up that folder in Visual Studio code and you'll see

7
00:00:29,670 --> 00:00:32,520
a file called Mango that looks just like this.

8
00:00:32,730 --> 00:00:36,390
And the challenge is pretty straightforward, and I don't think you'll have much difficulty with it,

9
00:00:36,450 --> 00:00:38,100
but let's give it a try in any case.

10
00:00:38,940 --> 00:00:41,640
So what I want you to do is to take this program.

11
00:00:41,680 --> 00:00:42,750
I can run it right now.

12
00:00:43,170 --> 00:00:50,040
If I open up my terminal and type go run dot, all it does is print out Hello Universe, hello Cosmos

13
00:00:50,040 --> 00:00:52,050
and hello world in that order.

14
00:00:52,200 --> 00:00:59,700
Okay, now what I want you to do is to modify this code so that every one of the calls to update message.

15
00:00:59,700 --> 00:01:04,500
And in this example and on this example, it's on line 27.

16
00:01:04,500 --> 00:01:06,190
I have a typo there, but it doesn't matter.

17
00:01:06,190 --> 00:01:06,900
It's just a comment.

18
00:01:07,620 --> 00:01:08,850
Lines 27.

19
00:01:08,970 --> 00:01:10,500
Lines 39.

20
00:01:10,500 --> 00:01:11,310
Line 33.

21
00:01:11,340 --> 00:01:15,270
Every call to update message should run as a go routine.

22
00:01:15,270 --> 00:01:19,970
In other words, it should run concurrently with the current go routine, which is main.

23
00:01:20,100 --> 00:01:21,900
Okay, so that's the first change.

24
00:01:22,470 --> 00:01:27,120
And I want you also to implement weight groups so that the program runs properly.

25
00:01:27,120 --> 00:01:32,640
In other words, you run the program and it every time you run it, it's always going to print these

26
00:01:32,640 --> 00:01:35,340
three messages in exactly that order.

27
00:01:35,490 --> 00:01:35,940
Okay.

28
00:01:37,320 --> 00:01:43,080
And I'd also like you to write a test for all three functions for this program.

29
00:01:43,080 --> 00:01:45,840
So you're going to create a file called Main Underscore Test.

30
00:01:45,840 --> 00:01:46,500
Don't go.

31
00:01:46,500 --> 00:01:52,380
And you're right, three tests, one for the update message, which of course, is running as a go routine,

32
00:01:53,190 --> 00:01:57,030
one for print message that's a bit simple and one for main.

33
00:01:57,120 --> 00:02:02,940
So you're going to use the same kind of logic I used in that test I wrote in the last lecture to capture

34
00:02:02,940 --> 00:02:07,620
standard out and don't forget to set standard out back to what it's supposed to be when you're done.

35
00:02:08,280 --> 00:02:10,920
So this should not be too difficult for you.

36
00:02:10,920 --> 00:02:14,520
It might take you a couple of tries to get it running properly, but you should have everything you

37
00:02:14,520 --> 00:02:17,670
need at your disposal in order to complete this challenge.

38
00:02:18,030 --> 00:02:20,160
And if you run into problems, don't worry.

39
00:02:20,160 --> 00:02:22,620
I'll show you how I solved that in the next lecture.

40
00:02:22,800 --> 00:02:23,160
All right.

41
00:02:23,280 --> 00:02:23,880
Good luck.
