1
00:00:00,840 --> 00:00:06,570
So this time around I want to add some code that will send some email using our new concurrency code.

2
00:00:06,780 --> 00:00:12,660
And I think the simplest place to do that is here in handlers dot go in this function post, log in

3
00:00:12,660 --> 00:00:13,110
page.

4
00:00:13,830 --> 00:00:18,870
If you scroll down here a bit where we have this comment check password, the first thing we do is we

5
00:00:18,870 --> 00:00:25,170
try to get a value invalid password by calling password matches a method that's available on the user

6
00:00:25,170 --> 00:00:25,470
type.

7
00:00:26,070 --> 00:00:29,370
Now the first error check is just to see if something goes wrong.

8
00:00:29,580 --> 00:00:34,320
We don't actually know if we have a valid password or not when this fails, so I'll ignore that one.

9
00:00:34,800 --> 00:00:40,740
But in the second case, if we get valid password back at this point, I know whether or not the user

10
00:00:40,740 --> 00:00:42,000
has typed the correct password.

11
00:00:42,060 --> 00:00:49,350
So what I'll do is if that check fails, if valid password is false, I'll send an email notification.

12
00:00:49,380 --> 00:00:53,550
Now, of course, in production you want to keep track of the number of log ins and only send it after

13
00:00:53,550 --> 00:00:55,200
the third check or something like that.

14
00:00:55,380 --> 00:00:56,820
But I just want to test out my email.

15
00:00:57,510 --> 00:00:59,700
So how do we use our new helper function?

16
00:00:59,940 --> 00:01:01,470
Apks send email?

17
00:01:01,620 --> 00:01:03,060
Well, the first thing we need is a message.

18
00:01:03,210 --> 00:01:05,820
So let's create a message of type message.

19
00:01:06,240 --> 00:01:11,520
Okay, and I'll leave the from name and from from fields empty.

20
00:01:11,520 --> 00:01:15,180
So I'll use the defaults, but I'll send this to the user.

21
00:01:15,180 --> 00:01:17,220
And of course in this case just email.

22
00:01:17,220 --> 00:01:22,500
We have that variable, we get it way back up earlier in this function and we'll give it a subject.

23
00:01:23,850 --> 00:01:32,520
We'll just call this field, log in attempt and we'll give it some data and the data will just be invalid,

24
00:01:32,610 --> 00:01:33,900
log in attempt.

25
00:01:34,050 --> 00:01:37,950
And of course you might put a more specific or more sophisticated message there, but I just want to

26
00:01:37,950 --> 00:01:38,520
try this out.

27
00:01:39,570 --> 00:01:44,850
So now that I have a message variable, all I have to do now is call that helper function app, dot,

28
00:01:44,880 --> 00:01:51,840
send email and hand it to chemistry and that goes off in the background if everything goes according

29
00:01:51,840 --> 00:01:52,290
to plan.

30
00:01:52,590 --> 00:01:55,170
So are we ready to try this out?

31
00:01:55,170 --> 00:02:00,690
Have we done absolutely everything necessary to write good concurrent code?

32
00:02:01,110 --> 00:02:03,210
Think that through, don't run this right now.

33
00:02:03,210 --> 00:02:04,410
Just think that through.

34
00:02:04,410 --> 00:02:07,020
Is there anything else we need to do?

35
00:02:07,320 --> 00:02:13,860
Well, in point of fact, and I'm sure you've thought of this already, back over in main doggo, if

36
00:02:13,860 --> 00:02:19,290
we look here in the main function, we have this listen for shutdown.

37
00:02:19,350 --> 00:02:28,020
And if we go to that function that actually calls another function after we get the appropriate signal,

38
00:02:28,230 --> 00:02:32,310
either a SEGUINTE or a C term and we're ready to shut down the application.

39
00:02:32,850 --> 00:02:39,270
We first call app dot shutdown and this is where we perform any cleanup tasks.

40
00:02:39,360 --> 00:02:42,690
So we have a little bit of cleanup to do at this point.

41
00:02:42,720 --> 00:02:47,100
Our wait group is waiting and that's good, but we actually have some more cleanup to do.

42
00:02:47,160 --> 00:02:52,710
So we'll take care of that in the next lecture and then we'll try this code out and see if it actually

43
00:02:52,710 --> 00:02:53,280
functions.
