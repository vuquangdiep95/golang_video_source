1
00:00:01,370 --> 00:00:06,890
This time around, I want to turn our attention to a considerably more sophisticated problem to solve.

2
00:00:06,890 --> 00:00:12,380
And it's the sort of problem I would regularly give to students in first year computer science to figure

3
00:00:12,380 --> 00:00:16,730
out on their own when we're dealing with concurrent or parallel programming.

4
00:00:17,210 --> 00:00:21,770
Now, this is called the producer consumer problem, and this is the Wikipedia page entry for it.

5
00:00:21,770 --> 00:00:25,880
And I'll put a link to this in the course resources and you can read about this at your leisure.

6
00:00:26,330 --> 00:00:32,390
But as you can see here, it says, In computing, the producer consumer problem, also known as the

7
00:00:32,390 --> 00:00:38,570
bounded buffer problem, is a family of problems just described by Dijkstra in 1965.

8
00:00:38,570 --> 00:00:40,210
So it's been around for a long time.

9
00:00:40,220 --> 00:00:45,710
And the great thing about this is that it gives us an opportunity to apply what we've learned so far

10
00:00:46,070 --> 00:00:47,870
to a much more sophisticated problem.

11
00:00:48,290 --> 00:00:53,600
So I'm going to go back to my I.D. and I've created a new window and opened a folder named Producer

12
00:00:53,600 --> 00:00:57,020
Consumer, and now create a government file just to get started.

13
00:00:57,270 --> 00:01:03,620
Okay, so in my terminal I'll say go mod in it and I'll just call it producer underscore consumer.

14
00:01:05,070 --> 00:01:08,840
It doesn't matter what I call it here, I still want to spell it right.

15
00:01:09,320 --> 00:01:10,970
Okay, so I created a government file.

16
00:01:11,240 --> 00:01:19,160
Now I'll create a new go file called, not surprisingly, in Mango and it's in Package Main and it has

17
00:01:19,160 --> 00:01:19,880
a main function.

18
00:01:20,930 --> 00:01:23,300
So think of me and like I did last time.

19
00:01:23,300 --> 00:01:28,040
What I'm going to do initially is just write some comments to figure out what we're going to do here.

20
00:01:28,670 --> 00:01:34,820
The problem I'm presenting to you my version of the producer consumer problem is based upon a pizzeria.

21
00:01:35,090 --> 00:01:42,590
So you have a pizzeria which has some people who make pizzas and that will be the producer in our producer

22
00:01:42,590 --> 00:01:43,400
consumer problem.

23
00:01:44,060 --> 00:01:50,960
Then we have a customer, one or more customers who at fairly regular intervals will place orders and

24
00:01:50,960 --> 00:01:51,950
they're the consumers.

25
00:01:51,950 --> 00:01:53,060
So they place the order.

26
00:01:53,060 --> 00:01:55,940
The order goes to the pizzeria, they try to make the pizza.

27
00:01:55,940 --> 00:01:59,810
Something might go wrong, somebody might quit, they might run out of an ingredient, whatever the

28
00:01:59,810 --> 00:02:02,720
case may be, but they'll try to make the pizza.

29
00:02:03,320 --> 00:02:09,620
And our goal here is to ensure that we write a solution to the producer consumer problem.

30
00:02:09,740 --> 00:02:14,780
Now, that's a very general description, but as we go through, you'll see just how complex this problem

31
00:02:14,780 --> 00:02:15,470
can be.

32
00:02:15,680 --> 00:02:16,040
Okay.

33
00:02:16,790 --> 00:02:19,550
So the first thing I'm going to do, I'll write some comments.

34
00:02:19,640 --> 00:02:24,920
What I'm going to do initially is see the random number generator.

35
00:02:25,130 --> 00:02:27,800
This will use pseudo random numbers.

36
00:02:27,800 --> 00:02:32,510
And if we don't seed the random number generator, which is one line of code, we'll get the same result

37
00:02:32,510 --> 00:02:33,050
every time.

38
00:02:33,050 --> 00:02:35,420
So a generator, that's the first thing I'll do.

39
00:02:36,620 --> 00:02:40,820
Then I'll print out a message saying the program is starting.

40
00:02:41,090 --> 00:02:47,510
Okay, then I'll create a producer and I'll have to describe that using some kind of data structure.

41
00:02:47,510 --> 00:02:49,280
But I'm going to have to create a producer, okay?

42
00:02:50,930 --> 00:02:55,340
And then I'll have to run the producer in the background.

43
00:02:56,090 --> 00:02:59,390
In other words, run the producer as its own go routine.

44
00:02:59,600 --> 00:03:00,010
Okay.

45
00:03:00,740 --> 00:03:05,180
And then I'll have to create and run consumer.

46
00:03:09,470 --> 00:03:13,520
Now, this will be one or more customers.

47
00:03:13,910 --> 00:03:17,570
One customer would be rather tedious, so obviously it'll be more than one customer.

48
00:03:17,570 --> 00:03:23,330
But we're going to create that consumer and we're going to run it each time the consumer places.

49
00:03:23,330 --> 00:03:24,620
In order for pizzas.

50
00:03:24,950 --> 00:03:29,870
For a pizza, we'll have to send that request off to the consumer and then see what the result is.

51
00:03:29,930 --> 00:03:32,120
Okay, so that's what's going to happen.

52
00:03:32,240 --> 00:03:38,660
And then finally after that and that's one comment actually represents a fair bit of code will print

53
00:03:39,920 --> 00:03:41,630
out the ending message.

54
00:03:42,800 --> 00:03:43,130
Okay.

55
00:03:44,000 --> 00:03:48,680
Now these comments give me an overall sense of what this main function is going to do.

56
00:03:49,040 --> 00:03:52,010
But obviously we're going to have to have more than just the main function.

57
00:03:52,280 --> 00:03:57,680
One of the things we're definitely going to need are a few types, okay, and a few constants.

58
00:03:57,680 --> 00:04:03,350
So let's say when we're going to run this, let's define one constant up here const and I'll call this

59
00:04:03,350 --> 00:04:06,320
one number of pizzas.

60
00:04:06,500 --> 00:04:08,600
How many pizzas are we going to try to make?

61
00:04:08,600 --> 00:04:11,330
And we'll make that equal to ten, just to keep things simple to start with.

62
00:04:11,330 --> 00:04:11,720
Okay.

63
00:04:12,590 --> 00:04:14,210
We'll also declare a couple of variables.

64
00:04:14,210 --> 00:04:20,810
We're going to have pizzas made, which will give us the running total of how many pizzas we've made.

65
00:04:21,470 --> 00:04:26,420
And pizzas failed because sometimes when we try to produce something, we're going to fail.

66
00:04:26,420 --> 00:04:27,260
For whatever reason.

67
00:04:27,260 --> 00:04:28,610
We've run out of some resource.

68
00:04:28,610 --> 00:04:34,760
Whatever the case may be, we might not succeed and I might have total, which will just be pizzas made

69
00:04:34,760 --> 00:04:36,860
and pizzas failed and added together.

70
00:04:36,980 --> 00:04:38,750
And these are all going to be integers.

71
00:04:38,930 --> 00:04:44,150
Okay, so we have that and we'll also have to have a type for a producer.

72
00:04:44,540 --> 00:04:48,700
If we're going to create a producer, we'll have a type four and it'll just be a struct and it's only

73
00:04:48,710 --> 00:04:49,820
going to have a couple of fields.

74
00:04:50,600 --> 00:04:53,480
But these fields will be something you haven't seen yet.

75
00:04:53,480 --> 00:04:56,750
And this is our first introduction to channels.

76
00:04:56,810 --> 00:04:57,200
Okay.

77
00:04:57,230 --> 00:05:00,380
And I'll be talking more about channels in more detail in the next section.

78
00:05:00,780 --> 00:05:01,890
But this will get us started.

79
00:05:02,460 --> 00:05:10,980
And channels are really far more powerful than new taxes and weight groups because they allow one go

80
00:05:10,980 --> 00:05:14,520
routine to exchange data with another go routine.

81
00:05:14,550 --> 00:05:15,750
They can talk to each other.

82
00:05:16,230 --> 00:05:20,910
Remember, once we use that keyword, go to send a go routine off into the background.

83
00:05:21,840 --> 00:05:22,950
We actually can't talk to it.

84
00:05:23,100 --> 00:05:25,470
All we can do is wait to see if it's finished.

85
00:05:25,620 --> 00:05:28,620
That's all we can do with the tools we have at our disposal right now.

86
00:05:28,710 --> 00:05:31,320
So instead, let's put a couple of channels in here.

87
00:05:31,890 --> 00:05:33,450
I'll make one called Data.

88
00:05:33,660 --> 00:05:38,220
And to create a channel to describe the channel, you just use the keyword channel.

89
00:05:38,400 --> 00:05:43,830
But then each channel has to have some kind of type, and I'm going to call this one something that

90
00:05:43,830 --> 00:05:44,610
doesn't exist yet.

91
00:05:44,640 --> 00:05:45,990
Pizza order.

92
00:05:46,500 --> 00:05:48,990
The producer is going to receive an order for pizza.

93
00:05:48,990 --> 00:05:50,700
And we'll make that pizza order in just a minute.

94
00:05:50,750 --> 00:05:55,500
Okay, then we're going to have another channel, which I'll call quick.

95
00:05:55,920 --> 00:06:01,530
When we're finished making pizzas, for whatever reason, we're going to send some information to the

96
00:06:01,530 --> 00:06:04,920
quick channel and something else is going to receive it and do something with it.

97
00:06:05,220 --> 00:06:09,200
But in this case, it's a channel of channels here.

98
00:06:09,880 --> 00:06:10,200
Okay.

99
00:06:10,950 --> 00:06:14,970
So we have one channel that holds a channel of errors.

100
00:06:15,360 --> 00:06:15,550
Okay.

101
00:06:15,690 --> 00:06:16,290
So there.

102
00:06:17,250 --> 00:06:18,620
Now, this this doesn't make sense.

103
00:06:18,660 --> 00:06:21,700
Don't despair when we go through channels in more detail.

104
00:06:21,720 --> 00:06:22,760
It will become clear.

105
00:06:22,770 --> 00:06:24,390
But for right now, let's just follow along.

106
00:06:25,140 --> 00:06:26,370
So we have our producer type.

107
00:06:27,180 --> 00:06:31,650
Let's create another type called pizza order.

108
00:06:32,070 --> 00:06:33,810
The one that I referred to there on line eight.

109
00:06:33,930 --> 00:06:37,830
And again, it's just a struct and we need the information for a particular pizza.

110
00:06:37,860 --> 00:06:39,630
Number one, what order is this?

111
00:06:39,660 --> 00:06:43,770
So I'll call it pizza number, and that's just going to be an integer.

112
00:06:43,860 --> 00:06:47,010
So the first one will be one, the next one will be two, so on and so forth.

113
00:06:47,880 --> 00:06:51,420
Then we're going to have a message with respect to that order.

114
00:06:51,720 --> 00:06:57,780
Either succeeded, it failed, whatever it was, but we need to give some kind of feedback to whatever

115
00:06:57,780 --> 00:06:58,920
places this order.

116
00:06:58,950 --> 00:06:59,880
So that'll just be a string.

117
00:07:01,170 --> 00:07:03,300
And finally, we'll have a Boolean success.

118
00:07:03,360 --> 00:07:05,280
Did we successfully make this pizza?

119
00:07:05,310 --> 00:07:06,660
If true, we did.

120
00:07:06,840 --> 00:07:08,370
If false, we did not.

121
00:07:08,610 --> 00:07:15,990
Okay, so now we have a main function that just consists of some comments and we have a type producer

122
00:07:15,990 --> 00:07:19,230
and we have a type pizza order and we have a couple of constants up here.

123
00:07:20,160 --> 00:07:24,240
One constant number of pizzas and a few variables, all of type it.

124
00:07:24,720 --> 00:07:26,610
So this is enough to get us started.

125
00:07:26,850 --> 00:07:33,090
In the next lecture, we'll start actually implementing the code necessary to solve the producer consumer

126
00:07:33,090 --> 00:07:33,510
problem.

127
00:07:33,650 --> 00:07:35,040
Okay, so let's move on.
