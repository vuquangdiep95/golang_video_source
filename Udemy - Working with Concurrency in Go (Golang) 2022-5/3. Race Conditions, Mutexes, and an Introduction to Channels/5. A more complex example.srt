1
00:00:01,170 --> 00:00:07,530
So let's try a slightly more complex example of a situation where syntactic mutex might be useful.

2
00:00:08,010 --> 00:00:11,370
Now what I'm going to do is just delete everything that's in main dog.

3
00:00:11,370 --> 00:00:13,320
Go here in the project.

4
00:00:13,320 --> 00:00:18,300
I was working on the last lecture and then because this test doesn't make sense anymore, I'll just

5
00:00:18,300 --> 00:00:19,080
delete that.

6
00:00:19,200 --> 00:00:20,250
So we'll delete that.

7
00:00:20,490 --> 00:00:23,160
Move it to the trash and back in mean don't go.

8
00:00:23,790 --> 00:00:24,180
Okay.

9
00:00:24,270 --> 00:00:30,060
We need some kind of situation, some kind of problem to solve where it makes sense to use.

10
00:00:30,060 --> 00:00:36,120
And this is a totally arbitrary decision on my part, both weight groups and Sync Dump mutex.

11
00:00:36,360 --> 00:00:42,570
So what I'm going to do is I'm going to write a program that will project how much money someone's going

12
00:00:42,570 --> 00:00:45,870
to make in the next year, the next 52 weeks.

13
00:00:45,990 --> 00:00:49,770
Okay, so I'm going to have a main function, so -- me.

14
00:00:50,940 --> 00:00:53,250
So let's just write some comments to figure what we're going to do.

15
00:00:53,400 --> 00:00:57,900
I'm trying to figure out how much money somebody is going to make in, say, 52 weeks.

16
00:00:57,910 --> 00:00:58,230
Right?

17
00:00:58,650 --> 00:00:59,910
So I'll need some variables.

18
00:00:59,910 --> 00:01:05,430
So a variable for bank balance, there's spell balance, right?

19
00:01:07,050 --> 00:01:11,580
And once I'm done with that, I want to print out starting values.

20
00:01:12,270 --> 00:01:13,440
How much do I have to start with?

21
00:01:13,620 --> 00:01:14,010
Okay.

22
00:01:14,070 --> 00:01:16,050
And we'll make that zero just to make it easy.

23
00:01:17,040 --> 00:01:20,700
And then we want to define weekly revenue.

24
00:01:20,790 --> 00:01:23,480
How much money do you make in a week and where does it come from?

25
00:01:23,490 --> 00:01:27,040
And we'll have multiple sources of income just to give us something to work with.

26
00:01:27,140 --> 00:01:39,030
Okay, then I want to loop through 52 weeks, which is one year, and print out how much is me.

27
00:01:42,900 --> 00:01:45,660
And I'm also going to keep a running total.

28
00:01:47,640 --> 00:01:48,600
So that that'll be a loop.

29
00:01:49,290 --> 00:01:55,470
And inside the loop will do all that magic and at the very end will print out final balance.

30
00:01:56,340 --> 00:01:58,800
Okay, so this seems pretty straightforward.

31
00:01:58,950 --> 00:02:01,590
So we're going to have multiple sources of income.

32
00:02:01,620 --> 00:02:07,560
We're going to loop through 52 weeks in a year and add up how much we're making from each of those sources

33
00:02:07,770 --> 00:02:12,460
to get a final balance, a very simple and admittedly highly contrived problem.

34
00:02:12,480 --> 00:02:14,250
But we're just trying to illustrate a concept here.

35
00:02:15,390 --> 00:02:17,850
So the first thing I'll do is I'll define a weight group.

36
00:02:17,970 --> 00:02:21,660
I'm going to need one of those, so I'll make that a package level variable silver.

37
00:02:21,660 --> 00:02:25,350
WG, which is a type Cinque Dot weight group.

38
00:02:25,860 --> 00:02:26,010
Okay.

39
00:02:26,190 --> 00:02:27,520
So that imported sync form.

40
00:02:27,540 --> 00:02:28,170
That's good.

41
00:02:28,200 --> 00:02:29,790
I'm at uni, but I haven't.

42
00:02:30,990 --> 00:02:31,740
And in go.

43
00:02:31,740 --> 00:02:35,550
It's very common to group bits of data that are related into one struct.

44
00:02:35,550 --> 00:02:40,230
So we'll define a type which I'll call income and it's a struct and it will have two fields.

45
00:02:40,320 --> 00:02:42,330
First of all, what's the source?

46
00:02:42,330 --> 00:02:43,680
Where are you getting this money from?

47
00:02:43,680 --> 00:02:44,910
And that will just be descriptive.

48
00:02:44,910 --> 00:02:45,720
It's just a string.

49
00:02:46,320 --> 00:02:48,810
And then how much do you make from that source?

50
00:02:48,810 --> 00:02:50,940
In any given week, I'll call that amount.

51
00:02:51,330 --> 00:02:53,820
And just to make the math easy, I'll make it an integer.

52
00:02:54,000 --> 00:02:56,760
Okay, so there is my type.

53
00:02:57,810 --> 00:03:00,450
Now let's define some variables down here.

54
00:03:00,520 --> 00:03:03,000
Start with inside the main function.

55
00:03:03,000 --> 00:03:08,070
I'll have one variable called bank balance and it's going to be an integer.

56
00:03:08,520 --> 00:03:13,410
And of course, because I'm defining that variable and not giving anything to it, it has a default

57
00:03:13,410 --> 00:03:16,980
starting value of zero, which is exactly what I need it to be.

58
00:03:17,220 --> 00:03:18,690
No, I'll printed some messages.

59
00:03:18,690 --> 00:03:26,460
So under that comment where I say print out starting values, I'll just say format, print F and I want

60
00:03:26,470 --> 00:03:30,060
to do the import format or print F, that's better.

61
00:03:30,900 --> 00:03:40,320
Now it's important for me and I'll just print out, say initial account balance and then a colon, a

62
00:03:40,320 --> 00:03:44,490
dollar sign, a percent D placeholder for integer and .00.

63
00:03:44,820 --> 00:03:45,090
Okay.

64
00:03:46,020 --> 00:03:47,850
And my substitution is bank balance.

65
00:03:48,030 --> 00:03:50,340
And of course, that's going to be putting zero in there.

66
00:03:50,550 --> 00:03:51,090
No problem.

67
00:03:51,180 --> 00:03:57,870
So we've printed out a message now opened to blank line format of print one, and that gives me a blank

68
00:03:57,870 --> 00:03:58,140
line.

69
00:03:59,320 --> 00:04:03,960
I want to define my weekly revenue and of course that's going to use that type I just set up called

70
00:04:03,960 --> 00:04:06,000
income and we'll just make up some values here.

71
00:04:06,090 --> 00:04:15,690
So I'll say my incomes plural is a sign the value of a slice of income and I'll just give it some value.

72
00:04:15,730 --> 00:04:23,670
So the first one will be in curly brackets, the source, and that will be say your mean job, whatever

73
00:04:23,670 --> 00:04:24,930
this person job is.

74
00:04:24,990 --> 00:04:25,310
Okay.

75
00:04:26,400 --> 00:04:29,310
And the amount how much money does this person make in a week?

76
00:04:29,310 --> 00:04:30,360
Well, $500.

77
00:04:30,810 --> 00:04:31,440
Easy math.

78
00:04:32,400 --> 00:04:34,260
Okay, now let's duplicate this a few times.

79
00:04:34,260 --> 00:04:35,310
Say three more times.

80
00:04:35,310 --> 00:04:36,360
One, two, three.

81
00:04:36,360 --> 00:04:38,400
And we'll just put in three additional sources.

82
00:04:39,510 --> 00:04:41,490
So the second source might be gifts.

83
00:04:41,520 --> 00:04:45,570
Maybe this person's grandmother gives them $10 a week.

84
00:04:45,750 --> 00:04:46,140
Okay.

85
00:04:47,010 --> 00:04:48,150
And the third one.

86
00:04:48,210 --> 00:04:50,070
Well, it's not can't have two main jobs.

87
00:04:50,070 --> 00:04:52,350
Let's make this a part time job.

88
00:04:52,380 --> 00:04:54,810
Lots of people have to work more than one job these days.

89
00:04:55,110 --> 00:04:58,260
So this person's a dog walker and they make a pretty good one.

90
00:04:58,260 --> 00:05:00,600
$50 a week for walking dogs.

91
00:05:01,560 --> 00:05:04,290
And the final one is this person has some investments.

92
00:05:04,980 --> 00:05:09,900
Investments and will make that they have really good investments.

93
00:05:09,900 --> 00:05:11,280
They're making $100 a week.

94
00:05:11,610 --> 00:05:11,940
Okay.

95
00:05:12,540 --> 00:05:14,070
So now I have my income.

96
00:05:15,090 --> 00:05:18,960
Now the next thing I want to do is just to loop through this.

97
00:05:19,140 --> 00:05:20,580
So we'll say.

98
00:05:21,630 --> 00:05:22,140
Four.

99
00:05:23,010 --> 00:05:24,280
And indexes.

100
00:05:24,360 --> 00:05:26,940
I income is what we're looping through.

101
00:05:28,380 --> 00:05:29,520
And those are populated.

102
00:05:29,670 --> 00:05:30,750
When I range through.

103
00:05:30,780 --> 00:05:32,070
Not the 52 weeks.

104
00:05:32,130 --> 00:05:32,730
Not yet.

105
00:05:32,910 --> 00:05:34,170
That's range through income.

106
00:05:34,500 --> 00:05:34,860
Okay.

107
00:05:35,610 --> 00:05:37,050
We'll get to the 52 weeks in a minute.

108
00:05:37,990 --> 00:05:44,560
So now I have those two variables I the current iteration and income, which is the current value of

109
00:05:44,560 --> 00:05:46,470
the slices, strings, incomes.

110
00:05:46,760 --> 00:05:49,060
Okay, so what do I want to do in here?

111
00:05:49,090 --> 00:05:53,230
Well, actually, at this point, here's where I want to do the 52 week calculation.

112
00:05:53,710 --> 00:05:58,360
But I want to do the 52 week calculation for each of the sources one at a time.

113
00:05:59,050 --> 00:06:04,930
Now, I can go and write another function out there and just call that as a go routine by putting the

114
00:06:04,930 --> 00:06:06,170
go keyword in front of it.

115
00:06:06,190 --> 00:06:08,500
But this time I'll just inline the function go.

116
00:06:08,890 --> 00:06:10,300
We're going to go a funk.

117
00:06:10,690 --> 00:06:12,550
And that's going to take two parameters.

118
00:06:13,000 --> 00:06:13,510
All right.

119
00:06:13,600 --> 00:06:17,230
Which is an integer and income, which is a type income.

120
00:06:19,660 --> 00:06:20,080
Okay.

121
00:06:20,800 --> 00:06:21,970
So that's my function.

122
00:06:22,180 --> 00:06:27,760
And I'll close it off right now, and I need to populate it with those two values I'm sending as parameters.

123
00:06:27,800 --> 00:06:29,140
And those are called I in income.

124
00:06:29,980 --> 00:06:30,170
Okay.

125
00:06:31,340 --> 00:06:33,220
So this is going to run in the background.

126
00:06:33,280 --> 00:06:34,570
And what do I want to do here?

127
00:06:34,600 --> 00:06:38,650
Well, here's where I actually want to go through all 52 weeks.

128
00:06:38,890 --> 00:06:42,670
So I'll put in a for loop for week is assigned the value of one.

129
00:06:42,760 --> 00:06:50,650
My first week week is less than equal to 52 and again 52.

130
00:06:52,580 --> 00:06:56,720
And will increment week one time each the each time through the loop.

131
00:06:57,080 --> 00:06:57,410
Okay.

132
00:06:58,250 --> 00:06:59,540
So what are we going to do here?

133
00:06:59,570 --> 00:07:02,660
Well, to start with, I'll get the current bank balance.

134
00:07:02,780 --> 00:07:09,380
Camp is a sign the value of bank balance, which the very first time through will be zero.

135
00:07:10,190 --> 00:07:17,540
And then I add to that whatever the income for this current income source is for the current week plus

136
00:07:17,540 --> 00:07:24,830
easy camp plus equals, I'm going to add to the current value of temp, which is bank balance income

137
00:07:24,830 --> 00:07:25,370
date amount.

138
00:07:25,850 --> 00:07:26,240
Okay.

139
00:07:27,110 --> 00:07:30,860
And now I set bank balance to ten.

140
00:07:31,490 --> 00:07:35,570
So in theory, I've added some value to my bank balance.

141
00:07:35,750 --> 00:07:36,170
Okay.

142
00:07:36,770 --> 00:07:38,030
And then we'll printed a message.

143
00:07:38,120 --> 00:07:49,760
So we'll say format dot, print f and my format string is on week percent D you earned whatever the

144
00:07:49,760 --> 00:07:50,600
value is.

145
00:07:50,870 --> 00:07:54,590
Dollar sign percent d .00.

146
00:07:56,220 --> 00:08:02,340
From a percent s whatever the sources and of course print out doesn't actually put a carriage returning.

147
00:08:02,340 --> 00:08:04,350
So we have to put a slash in in like that.

148
00:08:05,010 --> 00:08:10,230
And my substitutions for those are weak and income.

149
00:08:10,470 --> 00:08:10,860
I'm out.

150
00:08:12,670 --> 00:08:15,040
And the last one is income source.

151
00:08:15,990 --> 00:08:16,160
Okay.

152
00:08:16,360 --> 00:08:17,200
So that prints it out.

153
00:08:19,150 --> 00:08:24,570
Now, of course, the one thing that you immediately spot here is that we need some weight groups.

154
00:08:24,580 --> 00:08:26,950
Otherwise this program's never going to finish.

155
00:08:27,050 --> 00:08:28,540
Okay, so let's go up here.

156
00:08:28,540 --> 00:08:31,180
We've got our sync weight group already defined in a variable.

157
00:08:31,180 --> 00:08:37,660
WG So what I need to do initially is to add the appropriate number of weight groups, and of course

158
00:08:37,660 --> 00:08:39,940
that's going to be the length of my income.

159
00:08:39,940 --> 00:08:47,170
So all I do here is say WG again WG and len of incomes.

160
00:08:48,190 --> 00:08:49,450
So now I have defined my weight group.

161
00:08:49,660 --> 00:08:50,010
Okay.

162
00:08:51,100 --> 00:08:57,160
And down here when I'm going through this particular function, after this inline function is done,

163
00:08:57,190 --> 00:08:59,770
I need to decrement that by one and we know how to do that.

164
00:09:00,430 --> 00:09:01,150
Defer.

165
00:09:01,360 --> 00:09:02,400
WG done.

166
00:09:03,400 --> 00:09:03,720
Okay.

167
00:09:04,840 --> 00:09:11,500
And of course, outside of this main loop, the, the big one that starts on line 35, we wait for all

168
00:09:11,500 --> 00:09:12,100
our weight groups.

169
00:09:12,190 --> 00:09:13,270
WG to wait.

170
00:09:14,440 --> 00:09:14,800
Okay.

171
00:09:16,390 --> 00:09:20,480
And the last step, apparently, or at least it appears to be, is to print out the results.

172
00:09:20,500 --> 00:09:34,930
So format print F final bank balance column dollar sign percent D 0.0 0 a.m. i.

173
00:09:34,930 --> 00:09:37,260
Substitution is just electrons.

174
00:09:38,110 --> 00:09:38,440
Okay.

175
00:09:39,490 --> 00:09:42,330
And then I'll print a blank format of print line.

176
00:09:45,250 --> 00:09:49,630
Now, when I write this code, it all seems to make perfect sense.

177
00:09:50,050 --> 00:09:52,240
I have my weight groups to find up here.

178
00:09:52,270 --> 00:09:53,080
No problem.

179
00:09:53,380 --> 00:09:56,920
I'm adding the appropriate number of entries to my weight group.

180
00:09:57,520 --> 00:10:02,410
I have the defer weight group done and I'm pretty things that once everything is finished, I wait for

181
00:10:02,410 --> 00:10:03,790
them down here and printed the balance.

182
00:10:04,420 --> 00:10:10,480
But if we run this so I'll clear the screen in my terminal and type go run dot.

183
00:10:12,440 --> 00:10:14,120
Everything seemed to work pretty well.

184
00:10:14,660 --> 00:10:21,290
I have 3000 or 34,320 and everything appeared to work pretty well here.

185
00:10:21,850 --> 00:10:23,540
Got lots of messages coming out.

186
00:10:23,600 --> 00:10:24,020
Okay.

187
00:10:25,100 --> 00:10:30,230
But if I clear the screen and type, go run dash race dot.

188
00:10:31,370 --> 00:10:33,680
I get an error message up at the top here.

189
00:10:34,490 --> 00:10:35,300
It says.

190
00:10:37,590 --> 00:10:38,850
Warning data race.

191
00:10:39,330 --> 00:10:46,530
And again, that data race is because I'm accessing this variable bank balance from multiple go routines

192
00:10:46,530 --> 00:10:49,380
running at the same time, potentially at the same instant.

193
00:10:49,710 --> 00:10:54,690
But certainly there's going to be an overlap of of of accesses to that particular shared resource.

194
00:10:54,750 --> 00:10:55,650
So I need to fix that.

195
00:10:56,100 --> 00:10:59,520
And of course, here's where we use center mutex.

196
00:10:59,820 --> 00:11:00,660
So how do we do that?

197
00:11:00,960 --> 00:11:03,720
Well, let's go back into our main function.

198
00:11:03,870 --> 00:11:08,460
And right after I define bank balance, let's create a new tax.

199
00:11:08,670 --> 00:11:14,640
And I'll call this one bar balance of type sync dot mutex.

200
00:11:16,830 --> 00:11:17,160
Okay.

201
00:11:17,580 --> 00:11:19,980
And I call it balance because that's what I'm locking in.

202
00:11:19,980 --> 00:11:21,330
Unlocking is the bank balance.

203
00:11:22,560 --> 00:11:27,630
So now where do I actually lock and unlock this particular resource?

204
00:11:27,960 --> 00:11:32,700
Just pause the video and think about where the appropriate place to put that lock.

205
00:11:33,030 --> 00:11:35,550
Command and that unlock command might be.

206
00:11:35,730 --> 00:11:38,130
And I'm sure you're not going to have any difficulty figuring this out.

207
00:11:38,370 --> 00:11:39,210
So give it a second.

208
00:11:39,240 --> 00:11:42,090
I'm going to pause here for a moment, give you a chance to think about this.

209
00:11:42,630 --> 00:11:46,230
You can pause the video and let's give it a try.

210
00:11:47,750 --> 00:11:50,000
Hopefully you've figured out where that's supposed to go.

211
00:11:50,210 --> 00:11:50,570
Okay.

212
00:11:50,810 --> 00:11:57,050
I'm going to put it right here inside of the inner for loop, not the outer for a loop, but inside

213
00:11:57,050 --> 00:11:59,990
of this inner for loop inside of the function itself.

214
00:12:00,380 --> 00:12:03,590
Here's where I need to lock my access to the bank balance.

215
00:12:03,980 --> 00:12:09,650
So the very first thing I do in this for loop is just call balance, dot lock.

216
00:12:11,000 --> 00:12:16,040
And when I'm done working with balance, I go balance the unlock.

217
00:12:17,270 --> 00:12:23,750
And now when I put my terminal and clear the screen and type go run dash race dot.

218
00:12:25,500 --> 00:12:26,850
There should be no warning.

219
00:12:26,850 --> 00:12:28,620
And in fact, there is not.

220
00:12:29,160 --> 00:12:32,550
And of course, the other thing to note here and I just keep stressing this because it's important to

221
00:12:32,550 --> 00:12:33,870
know how concurrency works.

222
00:12:34,440 --> 00:12:38,430
I'm not getting all of the information in any sequential fashion.

223
00:12:38,430 --> 00:12:38,750
Okay.

224
00:12:39,180 --> 00:12:40,590
For a part time job.

225
00:12:40,660 --> 00:12:42,240
Everything's coming in order.

226
00:12:42,270 --> 00:12:45,360
But notice how a main job is interspersed here.

227
00:12:45,360 --> 00:12:46,790
And then we switch to investments.

228
00:12:46,800 --> 00:12:48,060
Then we go back to main job.

229
00:12:48,240 --> 00:12:52,620
And that's because these these routines, these go routines are actually running concurrently.

230
00:12:53,190 --> 00:12:58,080
And of course, that means that you can't depend upon getting these results in a particular order.

231
00:12:58,560 --> 00:13:03,630
But in any case, we've actually successfully solved our race problem.

232
00:13:03,780 --> 00:13:07,770
Here's a simple program that uses both weight groups and sync up mutex.

233
00:13:07,770 --> 00:13:10,740
And now there is no potential race condition.

234
00:13:11,310 --> 00:13:12,960
All right, let's move on.
