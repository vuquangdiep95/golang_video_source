1
00:00:01,270 --> 00:00:06,670
So at this point we have the absolute bare bones of our project kind of sketched out using comments

2
00:00:06,670 --> 00:00:11,230
and leave to find one constant and a few variables and a couple of types.

3
00:00:11,830 --> 00:00:15,760
Now let's get started making this functional, and it's going to take a little while because there's

4
00:00:15,760 --> 00:00:18,910
a fair bit to do here, but none of it is terribly complicated.

5
00:00:19,360 --> 00:00:25,390
So first thing here, the main function I say, see the random number generator, and that's pretty

6
00:00:25,390 --> 00:00:31,750
simple from the rand package, which is built right into the standard library local seed.

7
00:00:32,110 --> 00:00:38,680
And that did the import for me and we're going to see that using time dot now dot Unix nano.

8
00:00:40,070 --> 00:00:43,040
And I need to import the time package time dot now.

9
00:00:44,720 --> 00:00:45,260
That's better.

10
00:00:45,860 --> 00:00:48,140
Dot dot Unix nano.

11
00:00:48,950 --> 00:00:52,970
And that will ensure that we don't get the same results every time we run the program.

12
00:00:53,180 --> 00:00:53,480
Okay.

13
00:00:54,080 --> 00:00:55,940
And now I say print out a message.

14
00:00:55,970 --> 00:00:56,780
Well, that's pretty easy.

15
00:00:56,780 --> 00:00:57,470
We can do that.

16
00:00:57,860 --> 00:01:03,350
But to make things a little more interesting, I'd like to add some color to our output for this program.

17
00:01:03,740 --> 00:01:08,360
And there are lots of ways of doing that with a console application in go, but one that's used by a

18
00:01:08,360 --> 00:01:10,060
lot of people, including myself.

19
00:01:10,070 --> 00:01:14,690
And I'll take you to my web browser is this 140 slash color.

20
00:01:15,080 --> 00:01:18,930
So this is nice because it works on Windows.

21
00:01:18,950 --> 00:01:19,960
It works on Macs.

22
00:01:19,970 --> 00:01:20,930
It works on Linux.

23
00:01:20,990 --> 00:01:24,050
So let's go get that just to make things a little easier to read.

24
00:01:24,170 --> 00:01:28,250
So I'll open my terminal and clear the screen and go and get.

25
00:01:28,610 --> 00:01:33,990
And it's github dot com slash f 80 I h slash C hello.

26
00:01:35,420 --> 00:01:37,610
And then we'll go and get it and adds it to my go mod.

27
00:01:37,640 --> 00:01:38,030
Okay.

28
00:01:38,030 --> 00:01:38,840
So now it's available.

29
00:01:39,740 --> 00:01:43,100
So now that I can print out messages with color, let's do so.

30
00:01:43,460 --> 00:01:48,140
So here, after this comment, I'll just use the color package I just imported.

31
00:01:48,230 --> 00:01:51,530
And it's as simple as saying color dot and then the color you want.

32
00:01:51,560 --> 00:01:55,670
And in my case, I'll go with Cyan to start with, see why.

33
00:01:55,740 --> 00:02:01,980
And, and I'll just print out the pizza, which always the spelling of this word bothers me.

34
00:02:02,360 --> 00:02:06,530
Pizzeria That way the pizzeria is open for business.

35
00:02:08,800 --> 00:02:13,850
Then I'll duplicate this line and just change all of these to hyphens so it's underlined.

36
00:02:13,940 --> 00:02:14,360
Okay.

37
00:02:16,040 --> 00:02:20,030
And of course, this has absolutely nothing to do with functionality, but it will allow us to read

38
00:02:20,030 --> 00:02:22,130
things more easily once we get going here.

39
00:02:22,850 --> 00:02:24,830
So I've seeded the random number generator.

40
00:02:25,040 --> 00:02:30,560
I've printed this out, and the next thing I need to do is to create a producer.

41
00:02:30,770 --> 00:02:37,310
Well, if you recall, the type producer up here has two fields data, which is Chan Pizza Order.

42
00:02:37,730 --> 00:02:41,330
And then quit, which is, oddly enough, Chan Chan error.

43
00:02:41,510 --> 00:02:42,830
Okay, well, I can create that.

44
00:02:43,340 --> 00:02:45,770
We'll see why we have a chain of Chan before too long.

45
00:02:45,770 --> 00:02:46,240
So don't.

46
00:02:46,250 --> 00:02:48,110
Don't worry about that.

47
00:02:48,830 --> 00:02:51,290
I'm going to create a pizza job.

48
00:02:51,800 --> 00:02:52,620
That's what I'm going to call it.

49
00:02:53,240 --> 00:02:56,270
And it's going to be a reference to a producer.

50
00:02:56,660 --> 00:02:57,710
Then I'll fill in its fields.

51
00:02:58,370 --> 00:02:59,300
So data.

52
00:02:59,900 --> 00:03:01,820
And here I need to make a channel.

53
00:03:02,120 --> 00:03:07,550
Now, just like you make a map, you have to make a channel using the built in keyword make.

54
00:03:07,940 --> 00:03:13,220
I want to make a chan and the type you can see up there in producer on line 15 is pizza order.

55
00:03:13,820 --> 00:03:15,170
So it's a chan of pizza order.

56
00:03:15,380 --> 00:03:19,220
Okay, so there's my first field and my second one is a quit.

57
00:03:19,970 --> 00:03:26,330
And this is just make a chan of chan a channel of channels of type error.

58
00:03:27,110 --> 00:03:27,440
Okay.

59
00:03:27,530 --> 00:03:31,550
So now I have created my producer, and then I need to run it.

60
00:03:31,790 --> 00:03:32,180
Okay.

61
00:03:32,180 --> 00:03:33,860
I need to run the producer in the background.

62
00:03:33,860 --> 00:03:35,930
And that means I'm going to have to have some kind of function.

63
00:03:36,500 --> 00:03:39,080
Now, this function, I'm going to call Pizzeria.

64
00:03:39,290 --> 00:03:42,410
So I'll make the function here and just leave it empty.

65
00:03:43,220 --> 00:03:51,440
So func and I'll call this one pizzeria and it's going to take one parameter, which I'll call pizza

66
00:03:51,440 --> 00:03:51,770
maker.

67
00:03:52,790 --> 00:03:54,920
It doesn't matter what I call it, but I'm going to call a pizza maker.

68
00:03:56,000 --> 00:03:58,310
And it's a pointer to a producer.

69
00:03:59,090 --> 00:03:59,420
Okay.

70
00:03:59,480 --> 00:04:01,040
So I'll just leave that empty for right now.

71
00:04:02,240 --> 00:04:09,830
Now, down here, when I say run the producer in the background, all I'm going to do is say, Go pizzeria.

72
00:04:10,130 --> 00:04:12,020
With the pizza job I just created.

73
00:04:12,500 --> 00:04:12,860
Okay.

74
00:04:13,760 --> 00:04:18,350
Now, this doesn't do anything so far, but you can see the logic here is pretty straightforward.

75
00:04:18,410 --> 00:04:23,420
We're going to generate our random numbers randomly, or at least pseudo randomly by seeding the ran

76
00:04:23,420 --> 00:04:24,020
package.

77
00:04:24,410 --> 00:04:25,610
Then we print out a message.

78
00:04:26,000 --> 00:04:33,530
Then we create one producer, which is a pointer to the type of producer, and we populate its two required

79
00:04:33,530 --> 00:04:34,850
fields with channels.

80
00:04:34,880 --> 00:04:36,980
So we make a chain of pizza order.

81
00:04:37,490 --> 00:04:39,570
Then we make a chain chain error.

82
00:04:39,590 --> 00:04:43,340
And that's just so we'll have a convenient method of closing the channel when we're done with it.

83
00:04:43,340 --> 00:04:49,490
Because once you create a channel, when you're finished with it, the golden rule is you must close

84
00:04:49,490 --> 00:04:49,610
it.

85
00:04:49,760 --> 00:04:50,150
Okay.

86
00:04:50,180 --> 00:04:54,830
So this gives us a means of closing the channel and then we run that producer in the background.

87
00:04:55,430 --> 00:05:00,140
Now let's go out and have a look at the actual producer.

88
00:05:00,890 --> 00:05:02,570
The two things that we need to worry about.

89
00:05:03,080 --> 00:05:07,100
The first one is, why am I using that chain of channels?

90
00:05:07,190 --> 00:05:11,120
Well, it just gives me, as I said a moment ago, a means of closing the channel.

91
00:05:11,660 --> 00:05:18,920
So what I'm going to do is go up here after pizza order and before my empty pizzeria function, I'm

92
00:05:18,920 --> 00:05:26,780
going to create a thunk that has the receiver of P pointer to producer, not pizza order producer.

93
00:05:27,410 --> 00:05:34,130
And that means any type of producer now has access to the function I'm about to write.

94
00:05:34,840 --> 00:05:39,140
I'm going to call this close because that's what I'm using it for, is to close a channel and it potentially

95
00:05:39,140 --> 00:05:39,320
return.

96
00:05:39,500 --> 00:05:39,920
An error.

97
00:05:40,250 --> 00:05:40,650
Okay.

98
00:05:41,720 --> 00:05:45,650
And all I have to do is to create a channel, and I'll use that.

99
00:05:45,650 --> 00:05:47,480
Make an error again.

100
00:05:47,900 --> 00:05:48,310
Okay.

101
00:05:48,320 --> 00:05:51,100
This is just a means of sending back an error if something goes wrong.

102
00:05:51,920 --> 00:05:52,550
And then.

103
00:05:53,910 --> 00:05:54,940
From the receiver.

104
00:05:54,960 --> 00:05:57,600
P dot quit.

105
00:05:58,140 --> 00:06:02,760
So it's channel that that type has the one called quit.

106
00:06:03,660 --> 00:06:09,510
I had the channel to it to want to just create it and then I return on the next line.

107
00:06:10,380 --> 00:06:13,860
I return an error, if any.

108
00:06:14,460 --> 00:06:19,920
Now that will be nil if I close the channel successfully, but it won't be nil if I tried to close the

109
00:06:19,920 --> 00:06:21,370
channel and something went wrong.

110
00:06:21,420 --> 00:06:26,550
So this is now available to any variable of the type producer.

111
00:06:26,640 --> 00:06:28,260
That's why I have that channel chat.

112
00:06:28,460 --> 00:06:28,740
Okay.

113
00:06:29,430 --> 00:06:33,080
Now what do I want to do in this function pizzeria?

114
00:06:33,090 --> 00:06:38,010
The one that I'm calling from line 50 down here when I run the producer in the background.

115
00:06:38,430 --> 00:06:40,470
What is this producer supposed to do?

116
00:06:40,980 --> 00:06:42,720
Well, let's read some comments and figure it out.

117
00:06:43,260 --> 00:06:51,270
Number one, let's keep track of which pizza we are making or at least trying to match.

118
00:06:51,540 --> 00:06:56,340
And I'm going to do that just by having a variable, some integer, and then I'll just keep track of

119
00:06:56,340 --> 00:06:56,490
it.

120
00:06:57,240 --> 00:07:07,170
And after that, we want to run forever or until we receive a quick notification.

121
00:07:07,410 --> 00:07:11,670
And we're going to get that from the quick channel that's part of the producer type.

122
00:07:12,380 --> 00:07:13,620
And we want to run forever.

123
00:07:13,620 --> 00:07:14,500
And what do we want to do?

124
00:07:14,540 --> 00:07:15,510
We're running forever.

125
00:07:15,720 --> 00:07:16,980
We want to try to make pizzas.

126
00:07:17,280 --> 00:07:17,670
Okay.

127
00:07:18,120 --> 00:07:20,070
So we're going to try to make pizzas.

128
00:07:23,790 --> 00:07:26,160
And again, this is running in the background.

129
00:07:27,210 --> 00:07:34,200
So that means that we're going to have to have a for loop in a for loop with some condition that lets

130
00:07:34,200 --> 00:07:35,040
us get out of there.

131
00:07:35,190 --> 00:07:40,230
Now, if you think it through, the only thing the pizzeria knows about or the producer knows about

132
00:07:40,830 --> 00:07:49,470
is the channel data, which is going to receive orders for pizzas and the channel quit, which tells

133
00:07:49,470 --> 00:07:50,970
us we're all done making pizzas.

134
00:07:50,970 --> 00:07:51,570
So quit.

135
00:07:51,570 --> 00:07:56,700
In other words, stop the go routine pizzeria that's running in the background.

136
00:07:57,480 --> 00:08:00,450
So when we think about it, we're going to have a for loop.

137
00:08:00,600 --> 00:08:02,340
So we'll just have a for loop like this.

138
00:08:02,640 --> 00:08:07,590
And inside of that, for loop, we're going to try to make a pizza.

139
00:08:09,270 --> 00:08:09,660
Okay.

140
00:08:10,800 --> 00:08:15,710
And then when we try to make that pizza, we're going to get something back.

141
00:08:15,720 --> 00:08:19,890
We're going to get some indication as to whether the pizza was made, whether something went wrong,

142
00:08:19,890 --> 00:08:20,910
whatever it was.

143
00:08:21,510 --> 00:08:24,360
So we're going to check to see if we got a pizza back.

144
00:08:25,410 --> 00:08:32,790
Then we have to decide, did we actually make the pizza successfully or did something go wrong or did

145
00:08:32,790 --> 00:08:33,270
we quit?

146
00:08:33,300 --> 00:08:38,100
So we're going to have to have some kind of decision structure in here, and that's going to allow us

147
00:08:38,100 --> 00:08:43,670
to have a look at a really important thing in the world of channels in Go.

148
00:08:43,680 --> 00:08:45,510
And it's called the Select Statement.

149
00:08:45,540 --> 00:08:52,260
It allows us to determine what action to take based upon what kind of information we're getting back

150
00:08:52,380 --> 00:08:53,340
from a given channel.

151
00:08:53,640 --> 00:08:55,950
Okay, so this gets us started.

152
00:08:56,130 --> 00:08:58,370
I can actually run this program and nothing will happen.

153
00:08:58,380 --> 00:08:59,830
It will just print out a message.

154
00:09:00,000 --> 00:09:00,780
Let's give it a try.

155
00:09:01,170 --> 00:09:02,310
So let's open the terminal.

156
00:09:02,340 --> 00:09:03,800
Clear the screen and type.

157
00:09:03,810 --> 00:09:05,640
Go run dot.

158
00:09:07,470 --> 00:09:09,260
And it gave me that opening message.

159
00:09:09,260 --> 00:09:10,820
And actually it did more than that.

160
00:09:10,850 --> 00:09:12,950
All I can see is that it printed this out.

161
00:09:13,310 --> 00:09:19,130
But if you look at the logic in the program, what actually happened was we seeded a random number generator.

162
00:09:19,220 --> 00:09:20,610
We printed out the message.

163
00:09:20,630 --> 00:09:21,920
We created a producer.

164
00:09:22,400 --> 00:09:30,740
Then we ran this this go pizzeria runs the pizzeria function as its own go routine concurrently beside

165
00:09:30,740 --> 00:09:32,060
the main go routine.

166
00:09:32,600 --> 00:09:34,730
And we handed it a new pizza job.

167
00:09:34,880 --> 00:09:39,170
And then, of course, there was nothing to stop the program from continuing on at that point.

168
00:09:39,560 --> 00:09:44,870
So even though we have this infinite for loop up here in the pizzeria function, it just terminates

169
00:09:45,020 --> 00:09:50,090
and this go routine just dies because the program stopped execution.

170
00:09:50,360 --> 00:09:55,100
But let's make it a little more useful, or at least start making it a little more useful in the next

171
00:09:55,100 --> 00:09:55,550
lecture.
