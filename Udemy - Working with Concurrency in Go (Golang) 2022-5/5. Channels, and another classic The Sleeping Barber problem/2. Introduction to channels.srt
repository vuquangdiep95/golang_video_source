1
00:00:00,920 --> 00:00:04,310
So some time ago we had a brief introduction to channels.

2
00:00:04,310 --> 00:00:09,170
And at that point I ask you just to follow along, because we'll be talking about channels in more detail

3
00:00:09,170 --> 00:00:09,740
later on.

4
00:00:10,040 --> 00:00:12,800
And now we're going to talk about channels in more detail.

5
00:00:13,490 --> 00:00:19,550
So I've opened a new window in Visual Studio code, and I just opened a folder called Simple Dash Channels,

6
00:00:19,550 --> 00:00:20,510
and right now it's empty.

7
00:00:20,540 --> 00:00:26,690
So let's open our terminal in Visual Studio code and just type go mod in a call line.

8
00:00:26,690 --> 00:00:28,040
Simple dash channels.

9
00:00:28,070 --> 00:00:29,030
It doesn't matter what you call.

10
00:00:29,900 --> 00:00:31,280
So that creates my go monster.

11
00:00:32,060 --> 00:00:35,480
And now I'll create a new mango file.

12
00:00:36,050 --> 00:00:36,920
Mango.

13
00:00:37,460 --> 00:00:41,090
And of course, that's in package, man.

14
00:00:43,070 --> 00:00:45,050
And I'll create a main function.

15
00:00:45,290 --> 00:00:46,040
Thank me.

16
00:00:46,820 --> 00:00:52,820
And what we're going to do this time, it's just a really simple program that demonstrates how channels

17
00:00:52,820 --> 00:00:53,660
work in go.

18
00:00:54,500 --> 00:01:01,490
And as I said quite some time ago now, channels are just a means of allowing one go routine to communicate

19
00:01:01,490 --> 00:01:01,970
with another.

20
00:01:02,120 --> 00:01:04,340
And I'll give you an example as to why that's important.

21
00:01:05,390 --> 00:01:10,220
So right now in this program, I just have an empty main function and I'm going to create another function

22
00:01:10,220 --> 00:01:14,210
up here, funk and I'll just call it shout and you'll see why later on.

23
00:01:14,210 --> 00:01:18,410
And at the moment it doesn't take any parameters at all and it doesn't return anything.

24
00:01:19,130 --> 00:01:24,200
And all it has inside this function is a for loop that just goes forever.

25
00:01:24,530 --> 00:01:29,180
And for now, I'll just have it print something to the console format or print line

26
00:01:32,120 --> 00:01:34,250
and I'll just say executing loop.

27
00:01:35,030 --> 00:01:35,390
Okay.

28
00:01:36,650 --> 00:01:40,100
So there's this function isn't called yet, it doesn't do anything.

29
00:01:40,100 --> 00:01:46,550
And if I come down here and call this the way it normally would without with a concurrency, I just

30
00:01:46,550 --> 00:01:50,270
say shout, okay, no problem.

31
00:01:50,270 --> 00:01:53,960
You know exactly what's going to happen here if I put my terminal and type go wrong.

32
00:01:53,960 --> 00:02:01,580
Dot It's going to print that executing loop endlessly and it never exits and that makes perfect sense.

33
00:02:01,580 --> 00:02:03,110
That's exactly what it's supposed to do.

34
00:02:03,590 --> 00:02:12,830
Okay, but if I put the keyword, go in front of this and then I want to keep the program going.

35
00:02:13,280 --> 00:02:19,400
So I'll say time dot sleep and I'll sleep for say ten times timed out second again.

36
00:02:19,430 --> 00:02:21,380
You know exactly what's going to happen here.

37
00:02:22,760 --> 00:02:25,340
The program starts, we go to the main function.

38
00:02:25,730 --> 00:02:32,540
It says, Start the function, shout in its own go routine and this runs in the background.

39
00:02:32,630 --> 00:02:32,810
Okay.

40
00:02:32,840 --> 00:02:34,250
And then we sleep for 10 seconds.

41
00:02:34,280 --> 00:02:37,550
So if I run this right now, we'll have exactly the same as what we did last time.

42
00:02:38,270 --> 00:02:41,810
But if I was to wait for 10 seconds, the program would terminate.

43
00:02:42,440 --> 00:02:49,340
The problem is that the main function now has absolutely no way of communicating with that one that's

44
00:02:49,340 --> 00:02:50,130
running in the background.

45
00:02:50,150 --> 00:02:53,090
And as you can see, the program terminated because 10 seconds went by.

46
00:02:53,960 --> 00:02:57,890
Channels allow us to communicate between go routines.

47
00:02:57,950 --> 00:03:03,830
And as you recall, the main function in any go program is, in fact, its own go routine.

48
00:03:04,700 --> 00:03:06,520
So channels are nothing more than pipes.

49
00:03:06,530 --> 00:03:07,740
You might think of them like that.

50
00:03:08,030 --> 00:03:13,670
There are ways of pushing data to a go routine or getting data from another go routine.

51
00:03:14,660 --> 00:03:15,950
So how do we make that work?

52
00:03:16,430 --> 00:03:22,460
Well, to start with, I'm going to create two channels and I'll call them ping and Pong, so I'll create

53
00:03:22,460 --> 00:03:23,020
two channels.

54
00:03:23,030 --> 00:03:29,450
The first one is called Ping and I make a channel with the keyword make and I just say it's channel

55
00:03:29,450 --> 00:03:32,000
and every channel has to take some kind of type.

56
00:03:32,420 --> 00:03:35,420
So in this case, I'll make this a channel of type string.

57
00:03:35,720 --> 00:03:38,120
That's the only thing this channel can take.

58
00:03:38,780 --> 00:03:41,420
Then I'll duplicate this line and call the second one.

59
00:03:41,540 --> 00:03:42,050
Pong.

60
00:03:43,370 --> 00:03:43,760
Okay.

61
00:03:43,760 --> 00:03:44,840
So now I have two channels.

62
00:03:44,880 --> 00:03:46,580
I have an error because I'm not using them yet.

63
00:03:47,030 --> 00:03:51,020
But I do have two channels, one called Ping and one called Pong.

64
00:03:52,130 --> 00:03:54,590
And now I'm going to pass those channels.

65
00:03:54,770 --> 00:03:59,500
Ping and pong to that go routine show.

66
00:03:59,690 --> 00:04:00,140
Okay.

67
00:04:00,650 --> 00:04:02,960
So up here, of course, I have to accept those types.

68
00:04:03,410 --> 00:04:10,340
So I'll say Ping, I'll call them the same thing, which is a type chain string and pong, which is

69
00:04:10,340 --> 00:04:12,170
also a type channel string.

70
00:04:12,830 --> 00:04:13,220
Okay.

71
00:04:14,840 --> 00:04:22,010
So now I've passed these two channels that I created here on the lines 15 and 16 to that function shout,

72
00:04:22,010 --> 00:04:23,420
which is running as a go routine.

73
00:04:23,450 --> 00:04:24,650
So now we have these channels.

74
00:04:24,860 --> 00:04:26,000
Let's do something with them.

75
00:04:26,120 --> 00:04:26,540
Okay.

76
00:04:27,500 --> 00:04:30,600
So instead of printing out executing loop, let's do it.

77
00:04:30,600 --> 00:04:34,260
But let's get a value from a channel.

78
00:04:34,400 --> 00:04:38,510
In other words, inside this endless for loop, the one that never exits.

79
00:04:39,490 --> 00:04:43,180
I'm going to accept a value from the channel called Ping.

80
00:04:44,110 --> 00:04:49,150
Ping will be the channel we get data on in the shut function and pong will be the data we send channel

81
00:04:49,180 --> 00:04:50,920
to inside the ship function.

82
00:04:51,430 --> 00:04:53,740
So how do I get a value from a channel?

83
00:04:53,860 --> 00:04:54,490
It's simple.

84
00:04:54,520 --> 00:04:55,450
I declare a variable.

85
00:04:55,540 --> 00:04:57,250
I'll call it SW because it's a string.

86
00:04:58,120 --> 00:04:59,830
That's a sign the value of.

87
00:05:00,580 --> 00:05:01,990
And there's my operator.

88
00:05:02,050 --> 00:05:02,560
Okay.

89
00:05:02,920 --> 00:05:04,210
And I put the channel after it.

90
00:05:04,450 --> 00:05:10,030
This means when you get something from the channel ping put it in the variable sw.

91
00:05:10,250 --> 00:05:10,570
Okay.

92
00:05:11,050 --> 00:05:18,580
So once I have that, what I'm going to do here is write it to the channel PO and how do I write information

93
00:05:18,580 --> 00:05:19,480
to a channel?

94
00:05:19,750 --> 00:05:27,220
These are almost exactly the same syntax, but to the channel pong, I'm going to send whatever I get

95
00:05:27,400 --> 00:05:32,320
from the channel ping, but I'll do a little operation just so I know that the date is being changed.

96
00:05:33,350 --> 00:05:38,180
So this function is called shout and we'll just shout by converting everything to uppercase and putting

97
00:05:38,180 --> 00:05:40,190
some exclamation marks after it.

98
00:05:40,340 --> 00:05:48,020
And I'll just use the format as part of its function and I'll give it a format string percent s and

99
00:05:48,020 --> 00:05:54,050
then say three exclamation marks and my substitution will be from the strings package, which is part

100
00:05:54,050 --> 00:05:55,130
of the standard library.

101
00:05:55,520 --> 00:05:57,500
I'll convert everything to uppercase.

102
00:05:58,220 --> 00:05:59,200
And when am I converting?

103
00:05:59,210 --> 00:06:00,050
I'm converting.

104
00:06:00,380 --> 00:06:02,120
Yes, that string I got a moment ago.

105
00:06:03,680 --> 00:06:04,070
Okay.

106
00:06:04,400 --> 00:06:11,360
So this is now waiting to receive something from the channel pane and it's sending it back on the channel

107
00:06:11,360 --> 00:06:11,900
pong.

108
00:06:11,930 --> 00:06:14,510
But of course, I have to send something to that channel.

109
00:06:15,290 --> 00:06:17,120
So let's make this a little more interesting.

110
00:06:18,200 --> 00:06:19,490
We're going to start it in the back.

111
00:06:19,640 --> 00:06:23,900
We're going to create our two channels, and we're going to start this go routine in the background.

112
00:06:23,990 --> 00:06:29,660
And then instead of time, dot sleep, let's just put a four statement here for actually let's put some

113
00:06:29,660 --> 00:06:30,630
instructions first.

114
00:06:30,650 --> 00:06:35,540
So format dot, print line and I'll print out some instructions for the end user.

115
00:06:36,290 --> 00:06:45,170
So I'll say type something and press enter and then I'll put enter Q to quit.

116
00:06:45,680 --> 00:06:49,820
We'll make this a little simple little program that allows people to type things in.

117
00:06:49,970 --> 00:06:50,360
Okay.

118
00:06:51,500 --> 00:06:53,570
So there's my instructions printed on the line.

119
00:06:54,260 --> 00:06:59,210
Now I'll put an analyst for loop here and I'll print a prompt

120
00:07:02,180 --> 00:07:04,070
just to let people know they should type something in.

121
00:07:04,190 --> 00:07:06,360
And that's as simple as saying format or print.

122
00:07:06,380 --> 00:07:07,760
Not print line, but print.

123
00:07:08,510 --> 00:07:11,090
And I'll print out this symbol with the space.

124
00:07:12,200 --> 00:07:13,040
So there's my prompt.

125
00:07:14,000 --> 00:07:18,900
Now I want to get user input and I'll just use the scanner for that.

126
00:07:18,920 --> 00:07:28,970
So I'll create a variable per user input of type string and then I'll read whatever the user typed into

127
00:07:28,970 --> 00:07:29,220
that.

128
00:07:29,240 --> 00:07:32,330
So I'll ignore the two return parameters because I don't care about those.

129
00:07:33,320 --> 00:07:36,430
That's equal to from the format package scan.

130
00:07:37,610 --> 00:07:38,000
Okay.

131
00:07:39,370 --> 00:07:42,670
And we're going to scan it into user input.

132
00:07:43,000 --> 00:07:44,320
That variable it just declared.

133
00:07:44,770 --> 00:07:46,360
So it allows me to type something in.

134
00:07:47,400 --> 00:07:47,670
Now.

135
00:07:47,670 --> 00:07:50,750
We'll check to see if the user typed a Q to quit.

136
00:07:50,760 --> 00:07:51,660
And that's easy enough.

137
00:07:52,440 --> 00:07:53,760
If user input

138
00:07:56,460 --> 00:07:59,760
is equal to and to convert everything to lowercase just to make it simple.

139
00:07:59,760 --> 00:08:05,040
So it doesn't matter if the type an uppercase Q or a lowercase Q string start to lower.

140
00:08:07,480 --> 00:08:09,670
Q Then they want to quit.

141
00:08:10,360 --> 00:08:12,460
So user wants to quit, so I just break out of the loop.

142
00:08:13,930 --> 00:08:19,180
Otherwise here's where I'm going to send something to that channel, and we'll do it exactly the same

143
00:08:19,180 --> 00:08:20,820
as we did up here in line 13.

144
00:08:20,890 --> 00:08:23,260
But I'm not sending it to the Pong Channel.

145
00:08:24,010 --> 00:08:25,740
I'm sending it to the ping channel.

146
00:08:25,750 --> 00:08:30,160
So ping gets user input, whatever the user typed.

147
00:08:30,580 --> 00:08:31,030
Okay.

148
00:08:31,840 --> 00:08:35,230
And then I wait for a response.

149
00:08:35,830 --> 00:08:39,460
So what I'm doing is sending something to the ping channel.

150
00:08:39,460 --> 00:08:45,100
I'm sending user input, whatever the user typed to the ping channel and then I wait on the Pong channel.

151
00:08:45,640 --> 00:08:50,530
And that's as simple as saying whatever the response is, that's just a variable name I'm choosing.

152
00:08:50,920 --> 00:08:54,550
It's assigned whatever comes in from pool.

153
00:08:56,660 --> 00:08:57,050
Okay.

154
00:08:57,080 --> 00:08:58,670
Now I have to do something with that variable.

155
00:08:58,880 --> 00:09:01,880
So I'll set format the print line

156
00:09:04,940 --> 00:09:09,830
response column and then a comma and then whatever the responses.

157
00:09:11,780 --> 00:09:16,670
And once I get outside of this loop, when someone's typed a queue to get out to quit, in other words,

158
00:09:17,210 --> 00:09:18,300
here's a golden rule.

159
00:09:18,320 --> 00:09:21,540
And I've said it before, and I'll be saying it repeatedly as time goes on.

160
00:09:21,560 --> 00:09:24,060
When you're done with channels, close them.

161
00:09:24,080 --> 00:09:25,820
Otherwise, you're going to have a resource leak.

162
00:09:26,360 --> 00:09:28,850
So I'll print out a message format or print line.

163
00:09:31,370 --> 00:09:34,580
I'll just say all the closing channels.

164
00:09:36,320 --> 00:09:37,490
And how do you close the channel?

165
00:09:37,670 --> 00:09:43,820
It's as simple as saying Close the channel, ning ping and close the channel name path.

166
00:09:44,870 --> 00:09:46,550
So I'm all done with those channels.

167
00:09:47,480 --> 00:09:48,590
So let's go through this again.

168
00:09:49,610 --> 00:09:54,770
When the program begins execution, the first thing that executes, as always, is the main function.

169
00:09:55,010 --> 00:09:57,920
The very first thing I do is create two channels.

170
00:09:57,950 --> 00:09:58,730
I'll put in a comment.

171
00:09:59,330 --> 00:10:01,070
Create two channels.

172
00:10:02,030 --> 00:10:04,040
Both of these channels, one is named Ping.

173
00:10:04,040 --> 00:10:05,000
One is named Pong.

174
00:10:05,330 --> 00:10:07,550
They only accept strings.

175
00:10:07,660 --> 00:10:08,090
Okay.

176
00:10:08,960 --> 00:10:12,500
Then I take those two channels and pass them to the function.

177
00:10:12,500 --> 00:10:18,860
Shout with the keyword go which sends start this function up here running in the background and just

178
00:10:18,860 --> 00:10:19,610
run forever.

179
00:10:19,730 --> 00:10:22,540
And it will because it is a for loop with no exit condition.

180
00:10:22,550 --> 00:10:23,750
So that will run forever.

181
00:10:25,070 --> 00:10:26,360
So that's running in the background.

182
00:10:26,540 --> 00:10:27,770
Then I just print out a message.

183
00:10:28,160 --> 00:10:32,990
Then I have my for loop starting on line 26 when I print out a prompt.

184
00:10:33,260 --> 00:10:33,680
Okay.

185
00:10:33,710 --> 00:10:34,970
And I've printed on one line.

186
00:10:35,210 --> 00:10:39,920
So the carriage return or the entry point will stay right beside this prompt symbol.

187
00:10:40,520 --> 00:10:46,640
Then I use format dot scan line to read whatever the user types into this string user input.

188
00:10:47,240 --> 00:10:50,810
I check to see if the user typed the queue if they did jump out of this loop.

189
00:10:51,020 --> 00:10:54,890
If they didn't, then take whatever they typed, send it to ping.

190
00:10:55,340 --> 00:10:58,010
Ping receives it or send it to the ping channel.

191
00:10:58,220 --> 00:11:03,650
And the show function listens to the ping channel, gets whatever it receives, stores it in variable

192
00:11:03,650 --> 00:11:11,270
s, converts it to uppercase, adds three exclamation marks and sends that string back on the Pong Channel.

193
00:11:12,020 --> 00:11:18,410
And down here, once I've sent it to the ping channel, I wait for a response from the Pong channel

194
00:11:18,550 --> 00:11:19,250
I printed out.

195
00:11:19,580 --> 00:11:20,630
That's all there is to it.

196
00:11:20,750 --> 00:11:26,930
So when I run the program now, I'll open the terminal and clear the screen and type go run dock.

197
00:11:28,460 --> 00:11:31,760
And I have imported not used time, so I have to save this first.

198
00:11:32,030 --> 00:11:32,900
And that will get rid of it.

199
00:11:33,050 --> 00:11:33,680
There we are.

200
00:11:34,070 --> 00:11:34,760
There the screen.

201
00:11:34,790 --> 00:11:35,810
Try it one more time.

202
00:11:36,140 --> 00:11:36,410
Go.

203
00:11:36,410 --> 00:11:36,980
Run, Dot.

204
00:11:38,320 --> 00:11:42,400
So it prints out the prompt the little instructions type something at press enter.

205
00:11:42,430 --> 00:11:48,790
So if I type Trevor and hit return it should send it to the ping channel, get received in the show

206
00:11:48,800 --> 00:11:53,290
function, get converted to uppercase and sent back with three exclamation points.

207
00:11:53,860 --> 00:11:55,900
And it did it sent it back.

208
00:11:56,350 --> 00:11:58,690
Then if I type hello.

209
00:11:59,050 --> 00:12:04,690
Which I spelled wrong but like that that should get converted to uppercase and sent back.

210
00:12:04,810 --> 00:12:05,830
And it does it.

211
00:12:05,830 --> 00:12:11,200
When I type a q it should quit and say all done and it closes the channels.

212
00:12:12,350 --> 00:12:18,020
So that, I think, is a pretty simple explanation for how channels work.

213
00:12:18,290 --> 00:12:23,570
Here we have two channels and we use them, and when we're done with them, we close them down here

214
00:12:23,570 --> 00:12:25,640
in line 44 and 45.

215
00:12:25,790 --> 00:12:26,030
Okay.

216
00:12:27,080 --> 00:12:30,410
Now, there's one more thing that will make your life easier in some cases.

217
00:12:30,740 --> 00:12:35,060
It's also possible when you're declaring parameters in a function like this.

218
00:12:35,510 --> 00:12:40,520
To specify a channel is being send only or is being receive only.

219
00:12:41,330 --> 00:12:46,790
So when you think it through, we're only ever receiving on the ping channel and we're all only ever

220
00:12:46,790 --> 00:12:48,500
sending on the Pong Channel.

221
00:12:48,950 --> 00:12:52,280
So how do I make this a receive only channel?

222
00:12:52,500 --> 00:12:54,260
Well, you just put a little arrow here like this.

223
00:12:54,800 --> 00:13:03,470
Now, that's a receive only channel, and this one is a send only channel, and that's all you have

224
00:13:03,470 --> 00:13:03,800
to do.

225
00:13:03,840 --> 00:13:09,740
Now, that's absolutely not necessary, but it does prevent you from accidentally trying to send to

226
00:13:09,740 --> 00:13:12,080
a channel that you're intending to receive upon.

227
00:13:12,290 --> 00:13:12,650
Okay.

228
00:13:13,490 --> 00:13:15,380
So if I run this again, it should still work.

229
00:13:15,860 --> 00:13:16,940
So let's go the screen.

230
00:13:17,060 --> 00:13:20,210
Go around forever.

231
00:13:20,810 --> 00:13:23,150
It worked in queue and it quits.

232
00:13:23,400 --> 00:13:23,750
Okay.

233
00:13:24,560 --> 00:13:31,040
So that's the simplest scenario of using channels you can send on channels or you can receive on channels

234
00:13:31,370 --> 00:13:36,500
and make sure that once you declare them and use them and are done with them, that you close them.

235
00:13:36,650 --> 00:13:37,040
Okay.

236
00:13:37,730 --> 00:13:38,000
All right.

237
00:13:38,030 --> 00:13:44,000
Let's move on to a slightly more complex example using channels and then eventually, before too long

238
00:13:44,360 --> 00:13:47,210
will be using channels in the sleeping barber problem.
