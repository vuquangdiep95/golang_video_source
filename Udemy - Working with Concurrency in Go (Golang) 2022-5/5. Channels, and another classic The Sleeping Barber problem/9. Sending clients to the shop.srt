1
00:00:01,210 --> 00:00:04,270
So we're getting much closer to having this problem solved.

2
00:00:04,510 --> 00:00:06,880
The next step, of course, is to add clients.

3
00:00:07,030 --> 00:00:09,610
But I thought I'd just go over this little bit of code here.

4
00:00:09,610 --> 00:00:11,380
Inside what line?

5
00:00:11,380 --> 00:00:12,040
73.

6
00:00:12,040 --> 00:00:13,340
73 in my case.

7
00:00:13,360 --> 00:00:13,720
Okay.

8
00:00:14,290 --> 00:00:18,150
You might have been asking yourself, what exactly does this time after time open do?

9
00:00:18,160 --> 00:00:20,890
And all that does is block until.

10
00:00:21,860 --> 00:00:28,640
Time open passes, so time after, which is 10 seconds, in our case, a duration set in our variable

11
00:00:28,640 --> 00:00:29,300
right up here.

12
00:00:29,600 --> 00:00:36,350
Time open is 10/2, but I still need to keep this time sleep because, well, when the main program

13
00:00:36,350 --> 00:00:41,360
exits, when the main function exits any existing go routines, they just die.

14
00:00:41,450 --> 00:00:44,480
So we actually do need to add clients before we can see anything.

15
00:00:44,830 --> 00:00:46,850
And fortunately, adding clients is pretty easy.

16
00:00:48,110 --> 00:00:51,800
Now our clients can just takes a string.

17
00:00:51,860 --> 00:00:57,080
If you recall this, right here are clients chan in the tight barber shop.

18
00:00:57,290 --> 00:01:02,450
It takes client chan, which is a channel of strings and all we're sending that is the name of the client

19
00:01:02,570 --> 00:01:09,350
and we're going to name our clients with the singularly unimpressive names of client one, client two,

20
00:01:09,350 --> 00:01:10,250
client three.

21
00:01:10,490 --> 00:01:13,100
So I'll just create a variable clients assigned the value of one.

22
00:01:13,370 --> 00:01:13,760
Okay?

23
00:01:14,390 --> 00:01:18,620
And now we need to start adding clients and we're going to do this as a go routine as well.

24
00:01:18,740 --> 00:01:21,170
So go func which I have to spell.

25
00:01:21,170 --> 00:01:21,470
Right.

26
00:01:21,830 --> 00:01:28,490
Go func doesn't take any parameters and I need my closing parentheses so it actually is an inline function.

27
00:01:29,150 --> 00:01:35,000
This will be fired off as its own go routine and we'll have a for loop with no exit clause specified

28
00:01:35,000 --> 00:01:36,410
in the for statement self.

29
00:01:37,460 --> 00:01:40,420
And now we're finally going to use that random number.

30
00:01:40,420 --> 00:01:44,030
Remember, we seeded a random number generator right at the beginning of the main function.

31
00:01:44,060 --> 00:01:52,460
We're finally going to do it and all we're going to do is to get a random number with average arrival

32
00:01:52,460 --> 00:01:57,470
rate just to make things a little more realistic.

33
00:01:57,500 --> 00:02:06,320
So I'll declare a variable random milliseconds and that's a sign the value of from the ran package using

34
00:02:06,320 --> 00:02:13,880
the INT function and then we'll use the modulus operator and go to times arrival rate.

35
00:02:13,880 --> 00:02:16,670
And that just gives us a slightly staggered arrival rate.

36
00:02:17,120 --> 00:02:17,960
Nothing important there.

37
00:02:19,010 --> 00:02:24,980
And now inside this go routine is a select statement which we haven't seen for a while, but here we

38
00:02:24,980 --> 00:02:26,420
are select.

39
00:02:27,260 --> 00:02:35,060
So our first case will be we received something from shop closing and of course the only place we can

40
00:02:35,060 --> 00:02:37,910
get that is right here on line 71.

41
00:02:37,910 --> 00:02:44,510
In my code after time open passes we send the value of true to shop closing and here we're waiting for

42
00:02:44,510 --> 00:02:44,600
it.

43
00:02:44,750 --> 00:02:46,940
Okay, so that's our first case.

44
00:02:47,390 --> 00:02:49,160
And what do we do when that happens?

45
00:02:49,370 --> 00:02:50,060
We just return.

46
00:02:50,120 --> 00:02:50,990
We're all done for the day.

47
00:02:51,200 --> 00:02:51,530
Okay.

48
00:02:53,240 --> 00:03:04,910
And our second case is time after and it's going to be timed out millisecond, not microsecond millisecond.

49
00:03:07,790 --> 00:03:12,290
Time's time, duration, and now we use random milliseconds.

50
00:03:13,970 --> 00:03:22,250
Okay, so this is the point when a client arrives and they're arriving at slightly random intervals.

51
00:03:22,280 --> 00:03:22,660
Okay.

52
00:03:23,060 --> 00:03:28,970
And the shop is still open because we haven't matched the shop closing case just above this.

53
00:03:29,510 --> 00:03:31,310
So now we need to add a client.

54
00:03:31,430 --> 00:03:32,240
Now, how do I do that?

55
00:03:32,420 --> 00:03:35,900
Well, I'm going to, as usual, go back over to Barbershop.

56
00:03:36,080 --> 00:03:36,500
Go.

57
00:03:37,340 --> 00:03:38,300
Go to the very bottom.

58
00:03:38,660 --> 00:03:43,190
And I'll add a function with the receiver of shop owner to barber shop.

59
00:03:44,780 --> 00:03:47,180
And I'll call this one and client.

60
00:03:47,570 --> 00:03:51,020
And it will take one parameter, and that will be a string.

61
00:03:51,020 --> 00:03:51,890
The client's name.

62
00:03:52,220 --> 00:03:56,000
So I'll call that client of type store and it doesn't return anything.

63
00:03:56,690 --> 00:03:59,810
So let's print out a message just so we know what's going on.

64
00:04:00,350 --> 00:04:01,910
And I'll say color dog green.

65
00:04:03,110 --> 00:04:06,170
And it will be star star star so I can see it.

66
00:04:06,950 --> 00:04:11,060
Percent s arrives and my substitution is client.

67
00:04:11,720 --> 00:04:13,640
So client whatever has arrived.

68
00:04:13,690 --> 00:04:14,410
So we print that out.

69
00:04:15,620 --> 00:04:16,730
Then we need to decide.

70
00:04:16,730 --> 00:04:17,960
This client is arrived.

71
00:04:18,020 --> 00:04:22,550
But the shop might be closed so we can say it shopped our open.

72
00:04:22,580 --> 00:04:27,470
If that's true, then we can handle the situation where we need to send this client to a barber.

73
00:04:28,340 --> 00:04:30,440
Otherwise, it's closed.

74
00:04:30,590 --> 00:04:34,530
So these this one, these people are still getting haircuts, but the shop is closed.

75
00:04:34,580 --> 00:04:35,950
That's this situation.

76
00:04:35,960 --> 00:04:37,880
So we'll just point out print out color dot red.

77
00:04:38,360 --> 00:04:39,350
So it's very visible.

78
00:04:41,810 --> 00:04:46,640
The shop is already closed.

79
00:04:47,540 --> 00:04:51,320
So percent s leaves and the substitution against client.

80
00:04:53,930 --> 00:04:54,980
Okay, that's an easy case.

81
00:04:55,370 --> 00:04:57,020
We don't need to do anything else there.

82
00:04:57,770 --> 00:05:04,970
But in this case, of course, we need to send the client to the client channel, which has a fixed

83
00:05:04,970 --> 00:05:08,040
size of shop dot shop capacity.

84
00:05:08,060 --> 00:05:09,320
In our case, right now, it's ten.

85
00:05:10,070 --> 00:05:13,910
So the way to handle this, of course, is with a select statement.

86
00:05:14,180 --> 00:05:15,110
So we'll say select.

87
00:05:18,570 --> 00:05:23,370
In our first case, the shop is open and there's room in the client's channel.

88
00:05:23,380 --> 00:05:34,800
So case shopped dot clients Chin receives client and we'll just print out color dot blue just to make

89
00:05:34,800 --> 00:05:35,220
it different.

90
00:05:38,620 --> 00:05:43,630
SE takes a seat in the waiting room.

91
00:05:50,250 --> 00:05:51,630
And the substitution is client.

92
00:05:52,530 --> 00:05:54,540
Okay, so we print that out.

93
00:05:54,930 --> 00:06:00,450
The other situation, the only other possible situation at this point, I want to make that so yellow.

94
00:06:01,050 --> 00:06:02,940
Blue on dark screen is hard to see.

95
00:06:03,120 --> 00:06:03,450
Okay.

96
00:06:03,930 --> 00:06:11,550
The only other possible situation is we couldn't send to shop DHCP clients chain because the the buffer

97
00:06:11,550 --> 00:06:12,710
channel is full.

98
00:06:12,810 --> 00:06:15,690
So the default case handles the other case default.

99
00:06:17,820 --> 00:06:20,220
And in this case we'll just print out color.

100
00:06:20,220 --> 00:06:20,790
Don't read.

101
00:06:22,770 --> 00:06:27,510
The waiting room is full, so percent se leaves.

102
00:06:30,930 --> 00:06:32,310
And the substitution is quite.

103
00:06:35,320 --> 00:06:39,590
And as far as I can tell right now, this is all I need to do to add a client.

104
00:06:39,610 --> 00:06:41,050
So let's go back to Mango.

105
00:06:42,760 --> 00:06:48,220
And in this case, we'll say shopped Ed Klein right there.

106
00:06:49,030 --> 00:06:55,000
And we'll put the client's name and I'll just choose format s, print F and give it a format string

107
00:06:55,000 --> 00:06:59,350
of client number percent D for integer I put in there.

108
00:06:59,900 --> 00:07:00,160
Okay.

109
00:07:01,150 --> 00:07:03,160
And I guess I need to import the format package.

110
00:07:03,160 --> 00:07:09,340
I guess I'm not using it for t dot s print f that should do the import for me.

111
00:07:09,340 --> 00:07:09,940
And it did.

112
00:07:10,690 --> 00:07:13,870
And of course once I've added the client increment R by one.

113
00:07:14,500 --> 00:07:14,860
Okay.

114
00:07:15,890 --> 00:07:19,100
And I don't think I need to do anything else after this.

115
00:07:19,190 --> 00:07:27,290
I mean, at this point, I can remove time to sleep down here and all I have to do is block until I

116
00:07:27,290 --> 00:07:29,780
receive something from the closed channel.

117
00:07:29,990 --> 00:07:35,780
And the only place that closed channel get sent anything is from the go routine that starts the Bob

118
00:07:35,780 --> 00:07:38,330
Barbershop right here on line 74.

119
00:07:39,200 --> 00:07:44,960
So if we did everything right, we should be able to run this and see some kind of meaningful output

120
00:07:44,960 --> 00:07:49,160
that matches the rules that are specified for the sleeping barber problem.

121
00:07:49,400 --> 00:07:51,560
So give this a try in the next lecture.
