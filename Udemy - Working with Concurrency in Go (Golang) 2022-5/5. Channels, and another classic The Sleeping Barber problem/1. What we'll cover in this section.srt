1
00:00:00,680 --> 00:00:05,750
So in this section of the course, we're going to focus on channels a great deal more, and channels

2
00:00:05,750 --> 00:00:08,840
are the preferred method of sharing memory.

3
00:00:09,470 --> 00:00:16,070
So if you recall back in the introduction, I said that goes approach to concurrency is share memory

4
00:00:16,070 --> 00:00:19,030
by communicating, don't communicate by sharing memory.

5
00:00:19,040 --> 00:00:21,800
And this is achieved primarily through the use of channels.

6
00:00:22,400 --> 00:00:27,680
So we're going to have a look at both channels and at another classic problem from the field of computer

7
00:00:27,680 --> 00:00:29,840
science called the sleeping Berber.

8
00:00:30,560 --> 00:00:37,250
So channels channels are nothing more than a means of allowing communication to and from a go routine.

9
00:00:37,340 --> 00:00:42,980
Once you fire off a go routine into the background, as it were, you really have no way of directly

10
00:00:42,980 --> 00:00:45,770
communicating with it, apart from the use of channels.

11
00:00:45,770 --> 00:00:51,760
And channels can be both buffered where they can accept more than one thing in the channel.

12
00:00:51,770 --> 00:00:57,110
In other words, if you have a buffer channel of size ten, you can put ten things in a channel or they

13
00:00:57,110 --> 00:01:00,440
can be a buffer, which only takes one thing at a time.

14
00:01:00,470 --> 00:01:02,210
We'll have an example of that shortly.

15
00:01:03,050 --> 00:01:05,360
Now, one of the golden rules of channels.

16
00:01:05,450 --> 00:01:08,450
Once you open a channel, you must close it.

17
00:01:08,450 --> 00:01:13,730
If you don't close the channel, you're going to wind up with a resource leak and bad things will happen

18
00:01:13,730 --> 00:01:14,900
as time goes on.

19
00:01:15,650 --> 00:01:20,950
And one other thing about channels, typically they only accept a given type or interface.

20
00:01:20,960 --> 00:01:26,780
So you can have a channel of booleans or a channel of iNts or a channel of a custom struct type that

21
00:01:26,780 --> 00:01:27,770
you've defined yourself.

22
00:01:28,220 --> 00:01:30,980
But typically they only accept one kind of data.

23
00:01:31,640 --> 00:01:35,750
So we're going to spend some time looking at channels initially in this section, and then we'll move

24
00:01:35,750 --> 00:01:43,210
on to this problem, the sleeping Berber and this is a classic problem introduced by Dijkstra in 1965.

25
00:01:43,220 --> 00:01:49,720
It's been around for a long time and it's a highly contrived example, but it's a classic for a reason,

26
00:01:49,730 --> 00:01:52,730
like the other classic problems we've looked at so far in this course.

27
00:01:53,210 --> 00:02:00,530
This really forces someone to look at the problem of concurrency in detail and figure out how to achieve

28
00:02:00,530 --> 00:02:04,670
what you want to achieve with the most efficient solution possible.

29
00:02:05,180 --> 00:02:06,680
So what is the problem?

30
00:02:07,520 --> 00:02:12,020
A Berber goes to work in a barbershop with a waiting room, and that waiting room has a fixed number

31
00:02:12,020 --> 00:02:14,420
of seats, so it can only hold so many people.

32
00:02:15,260 --> 00:02:18,260
Now, when the barber shows up, he looks in the waiting room.

33
00:02:18,260 --> 00:02:20,270
If there's nobody there, then he takes a nap.

34
00:02:20,780 --> 00:02:25,040
But when a client shows up, if there are no seats available, he or she leaves.

35
00:02:25,160 --> 00:02:28,000
But if there is a seat available, then the.

36
00:02:28,070 --> 00:02:29,810
And the barber happens to be sleeping.

37
00:02:29,990 --> 00:02:32,360
Then the client wakes the barber up and gets a haircut.

38
00:02:33,050 --> 00:02:36,740
If the barber is busy, the client takes a seat and waits his or her turn.

39
00:02:37,130 --> 00:02:40,340
And once the shop closes, no more clients are allowed in.

40
00:02:40,610 --> 00:02:44,030
But the barber has to stay until everyone who's waiting gets a haircut.

41
00:02:44,720 --> 00:02:47,120
So let's have a little illustration here.

42
00:02:47,120 --> 00:02:49,520
And no, I did not draw these images.

43
00:02:49,520 --> 00:02:51,410
Someone with actual skill did.

44
00:02:51,890 --> 00:02:53,000
So here's our barbershop.

45
00:02:53,360 --> 00:02:56,870
So the barber shows up to work and has a look in the waiting room.

46
00:02:56,990 --> 00:02:58,100
Here we have four seats.

47
00:02:58,460 --> 00:03:00,200
There's nobody waiting in the waiting room.

48
00:03:00,210 --> 00:03:01,940
So the barber takes a nap.

49
00:03:02,150 --> 00:03:03,680
And there he is, taking a nap.

50
00:03:04,430 --> 00:03:10,010
Then a client shows up and the client wakes the barber up and goes and gets his haircut.

51
00:03:10,100 --> 00:03:10,520
Okay.

52
00:03:11,390 --> 00:03:15,680
Now, as the day goes on, there might be more and more people showing up in the waiting room.

53
00:03:15,710 --> 00:03:19,640
If someone shows up and there's a seat available, then that person takes it.

54
00:03:19,850 --> 00:03:24,770
And if somebody else shows up and there's no seats available, then that person goes away.

55
00:03:24,770 --> 00:03:27,170
Somewhat unhappy because apparently he needs a haircut.

56
00:03:27,520 --> 00:03:27,850
Okay.

57
00:03:29,290 --> 00:03:32,170
And at the end of the day, the barber goes home.

58
00:03:32,200 --> 00:03:37,210
Now, this might seem like a pretty simple problem, but we're going to try to achieve this using foreign

59
00:03:37,210 --> 00:03:37,810
currency.

60
00:03:38,290 --> 00:03:42,730
And to complicate things a little bit, as we go a little bit further into the section, we'll actually

61
00:03:42,730 --> 00:03:44,230
add more than one barber.

62
00:03:44,620 --> 00:03:48,430
So it's an excellent exercise in the use of channels.

63
00:03:48,760 --> 00:03:54,100
And if you work through this and you pay close attention to what's going on and you understand exactly

64
00:03:54,100 --> 00:03:59,950
what's going on at the end of this section, you will have a solid grasp of what channels are, how

65
00:03:59,950 --> 00:04:02,110
they work, and when to use them.

66
00:04:02,410 --> 00:04:03,160
So let's get started.
