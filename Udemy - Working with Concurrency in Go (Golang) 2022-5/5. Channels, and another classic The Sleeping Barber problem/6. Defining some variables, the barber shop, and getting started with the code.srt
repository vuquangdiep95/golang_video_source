1
00:00:01,340 --> 00:00:06,890
So let's get started populating these comments with some actual code and we'll just get started this

2
00:00:06,890 --> 00:00:07,340
time around.

3
00:00:07,340 --> 00:00:11,900
It's going to take a while to finish this, but right away here on line 25 and my code, I'm going to

4
00:00:11,900 --> 00:00:14,570
need some variables, some package level variables.

5
00:00:15,710 --> 00:00:22,190
Well, we know we have a waiting room, so let's declare a variable, which I'll call our seating capacity.

6
00:00:22,400 --> 00:00:24,950
How many seats in the waiting room that's going to be equal to ten?

7
00:00:25,190 --> 00:00:26,030
Ten is a good start.

8
00:00:26,150 --> 00:00:26,530
Okay.

9
00:00:27,470 --> 00:00:29,600
And then we're going to have customers arriving.

10
00:00:29,600 --> 00:00:35,750
And it says up here in my comment at the top, clients arriving at roughly regular intervals.

11
00:00:35,870 --> 00:00:37,910
So let's just define something here.

12
00:00:37,910 --> 00:00:46,010
I'll say var arrival rate, arrival rate, and I'll make that equal to say 100.

13
00:00:46,010 --> 00:00:50,510
And that will be milliseconds because I don't want to wait forever to watch this program execute.

14
00:00:51,750 --> 00:00:55,310
We also have to determine how long it takes to cut someone's hair.

15
00:00:55,310 --> 00:01:04,130
So var will call this cut duration and that's going to be equal to 1000 times timed millisecond.

16
00:01:04,490 --> 00:01:10,040
Okay, I'm using a thousand milliseconds because I might speed this up as we're working on it or slow

17
00:01:10,040 --> 00:01:13,070
it down and it's easier to work with milliseconds than hold numbers.

18
00:01:13,070 --> 00:01:13,730
4 seconds.

19
00:01:13,790 --> 00:01:14,120
Okay.

20
00:01:15,020 --> 00:01:17,930
And finally, how how long is the barbershop open?

21
00:01:18,020 --> 00:01:19,640
Well, we'll make it time open.

22
00:01:19,850 --> 00:01:23,930
We'll just make that equal to, say, 10 seconds, ten times time dot second.

23
00:01:24,830 --> 00:01:29,270
Okay, so there are some variables and we might need some more, but this is a good starting point.

24
00:01:30,140 --> 00:01:30,500
All right.

25
00:01:30,680 --> 00:01:33,680
Next seed, our random number generator.

26
00:01:33,680 --> 00:01:38,630
And we're going to use that random number generator in conjunction with the arrival rate so that clients

27
00:01:38,630 --> 00:01:41,360
don't always arrive at exactly the same interval.

28
00:01:41,690 --> 00:01:50,180
So we can see that we know how to do that random seed and we're going to seed it using time dot now

29
00:01:52,550 --> 00:01:59,690
dot Unix nano right there okay so that seeds our random number generator so far this is pretty easy.

30
00:02:00,650 --> 00:02:04,370
Now we're going to print out some some messages, a welcome message here.

31
00:02:04,370 --> 00:02:05,570
I'm going to use color.

32
00:02:05,570 --> 00:02:07,380
So I'm going to do the same thing I did a while ago.

33
00:02:07,670 --> 00:02:17,990
Open my terminal window and I will go and get from GitHub dot com slash f8 are h slash color cross-platform

34
00:02:17,990 --> 00:02:21,500
compatible so it should work on Linux, Windows and Mac.

35
00:02:21,560 --> 00:02:27,020
So now I send my go mine file, which means I can come back to my code and after this print welcome

36
00:02:27,020 --> 00:02:31,370
message I'll just say color yellow will printed it in yellow.

37
00:02:32,730 --> 00:02:41,030
I will print out some text the sleeping server problem and then I'll duplicate that line and change

38
00:02:41,030 --> 00:02:44,210
these to hyphens just to make things a little more attractive.

39
00:02:44,390 --> 00:02:44,780
Okay.

40
00:02:47,480 --> 00:02:47,990
Okay.

41
00:02:48,080 --> 00:02:49,520
So we've defined some variables.

42
00:02:49,520 --> 00:02:53,810
We've seeded a random number generator and now we've printed out a title.

43
00:02:54,980 --> 00:02:56,780
Now create channels, if any.

44
00:02:56,810 --> 00:03:01,400
Well, I know I'm going to be using channels in this, but let's think about the kinds of channels we

45
00:03:01,400 --> 00:03:02,060
might have.

46
00:03:02,600 --> 00:03:06,200
We're probably going to have a channel that we send clients to.

47
00:03:06,380 --> 00:03:12,950
Okay, so let's create a channel called Client Channel, and that will be assigned the value of make.

48
00:03:14,320 --> 00:03:18,750
A channel that's a string, it accepts strings.

49
00:03:18,760 --> 00:03:21,370
And I'm going to make this one a buffered channel.

50
00:03:21,370 --> 00:03:27,250
And I'm only only going to allow the client channel to be the same size as seating capacity.

51
00:03:28,240 --> 00:03:32,770
That way I can have more than one client in the channel, but I can't have more than whatever seating

52
00:03:32,770 --> 00:03:33,850
capacity is set to.

53
00:03:33,850 --> 00:03:34,810
And right now that's ten.

54
00:03:34,930 --> 00:03:37,420
So maximum ten people in this channel.

55
00:03:37,660 --> 00:03:42,550
Okay, so that's one channel I'm going to have to have for sure.

56
00:03:42,640 --> 00:03:46,030
And I'm also going to have to have one that says everything's done and we can go home.

57
00:03:46,120 --> 00:03:47,410
So I'll call this done channel.

58
00:03:48,610 --> 00:03:49,030
Okay.

59
00:03:49,630 --> 00:03:52,560
And we'll make that a channel of type bool.

60
00:03:53,650 --> 00:03:53,920
Okay.

61
00:03:54,040 --> 00:04:00,640
So when everything's done, will send a boolean to that channel, and the next one is to create the

62
00:04:00,640 --> 00:04:01,300
barbershop.

63
00:04:01,360 --> 00:04:01,810
Well.

64
00:04:03,270 --> 00:04:05,430
To do that, I'm going to need a type.

65
00:04:05,760 --> 00:04:09,690
And what I'm going to do, because this problem was a little more sophisticated than the last ones.

66
00:04:10,050 --> 00:04:14,550
So I'm going to create a new go file called Barbershop.

67
00:04:18,360 --> 00:04:20,700
And I'll put Barbershop related things over here.

68
00:04:20,760 --> 00:04:22,470
So in this one package main

69
00:04:25,560 --> 00:04:30,560
all define a type, which I'll call barbershop that seems appropriate barbershop.

70
00:04:30,840 --> 00:04:33,030
And it's just a struct and it has a few fields.

71
00:04:33,930 --> 00:04:36,810
So the first thing we need to know is what's the shock capacity?

72
00:04:37,350 --> 00:04:40,320
How many seats in the waiting room shop capacity?

73
00:04:40,830 --> 00:04:42,540
And of course, that's an integer.

74
00:04:43,710 --> 00:04:46,080
We're also going to need to know how long it takes to cut hair.

75
00:04:46,350 --> 00:04:49,830
I'll call this one hair cut duration.

76
00:04:50,670 --> 00:04:51,030
Okay.

77
00:04:51,060 --> 00:04:53,100
And that will be of timed duration.

78
00:04:54,810 --> 00:04:57,150
And we're also going to need to know how many barbers do we have?

79
00:04:57,270 --> 00:04:59,220
Number of barbers.

80
00:04:59,670 --> 00:05:02,340
And as I said, we're going to start with one, but it's going to be an integer.

81
00:05:03,940 --> 00:05:06,220
And we're also going to have our channels.

82
00:05:06,910 --> 00:05:11,800
So we're going to have to have a chan, which is barbers done.

83
00:05:11,800 --> 00:05:12,930
Chan That's what I'll call it.

84
00:05:12,940 --> 00:05:14,620
Barbers done.

85
00:05:15,100 --> 00:05:18,490
CHAN And that will be a chan of type ball.

86
00:05:18,790 --> 00:05:19,240
Okay.

87
00:05:20,230 --> 00:05:21,760
And we're also going to want the clients.

88
00:05:21,760 --> 00:05:22,660
CHAN Clients.

89
00:05:22,720 --> 00:05:27,580
CHAN which is a chan of type string.

90
00:05:27,700 --> 00:05:29,940
All I'm going to do is pass a clients and name to that.

91
00:05:29,950 --> 00:05:30,250
That's all.

92
00:05:30,250 --> 00:05:35,080
I really, really do know that there is a client and that client has some unique identifier, a name

93
00:05:35,080 --> 00:05:35,680
of some sort.

94
00:05:36,970 --> 00:05:41,590
And finally, we'll have one here that says Open, and this is just a boolean.

95
00:05:42,040 --> 00:05:42,430
Okay.

96
00:05:42,850 --> 00:05:44,290
So when the shop is open.

97
00:05:44,290 --> 00:05:45,010
That's true.

98
00:05:45,040 --> 00:05:47,170
When the shop is closed, that's false.

99
00:05:47,260 --> 00:05:48,850
So let's save this just to format it.

100
00:05:49,270 --> 00:05:50,920
Now we have our barber shop type.

101
00:05:51,280 --> 00:05:55,810
So let's go back over to Mango and let's define a shop.

102
00:05:56,650 --> 00:05:57,940
So I'll create a variable.

103
00:05:57,970 --> 00:05:58,810
I'll just call it shop.

104
00:05:59,530 --> 00:06:02,470
And that's a sign, the value of the type barbershop.

105
00:06:02,810 --> 00:06:04,030
We'll just populate its fields.

106
00:06:04,870 --> 00:06:05,950
So shop capacity.

107
00:06:06,040 --> 00:06:06,910
Well, we know that one.

108
00:06:06,910 --> 00:06:08,350
That's seating capacity.

109
00:06:08,350 --> 00:06:11,140
The variable that I just defined up there in line 33.

110
00:06:11,560 --> 00:06:12,340
So we have that one.

111
00:06:13,600 --> 00:06:18,100
We're also going to want haircut, duration, and that will be cut duration.

112
00:06:18,130 --> 00:06:22,750
Another variable that I just defined, and we're also going to need the number of barbers.

113
00:06:23,110 --> 00:06:24,520
And initially, I'll set that to zero.

114
00:06:24,580 --> 00:06:27,640
We'll add them down at the comment here that says Add barbers.

115
00:06:27,700 --> 00:06:28,090
Okay.

116
00:06:29,350 --> 00:06:30,580
And we want our clients.

117
00:06:30,580 --> 00:06:33,580
Chan When we have that, we just find it in called a client.

118
00:06:33,580 --> 00:06:33,940
Chan.

119
00:06:35,680 --> 00:06:37,030
And then we want our barbers done.

120
00:06:37,030 --> 00:06:39,580
CHAN And we just to find that that's called done chan.

121
00:06:41,920 --> 00:06:42,910
Done, Chen.

122
00:06:44,050 --> 00:06:44,530
That's better.

123
00:06:45,820 --> 00:06:47,390
And finally, is the shop open?

124
00:06:47,410 --> 00:06:48,520
Well, I'll set that true.

125
00:06:48,580 --> 00:06:52,570
Just hard code that because the shop will be open when this program starts.

126
00:06:52,810 --> 00:06:53,140
Okay.

127
00:06:53,950 --> 00:06:55,840
Now, I'll just print out another message here.

128
00:06:57,370 --> 00:06:59,550
I'll say colored out green.

129
00:06:59,560 --> 00:07:04,660
This time the shop is open for the day.

130
00:07:05,470 --> 00:07:06,970
Okay, so that's been printed out.

131
00:07:08,350 --> 00:07:11,260
Now, the next thing I want to do is to add barbers.

132
00:07:11,740 --> 00:07:16,600
Now, what I think this problem through, I'm going to have one thing called the shop that's running

133
00:07:16,600 --> 00:07:18,520
in the background, somehow doing its thing.

134
00:07:18,520 --> 00:07:19,990
Whatever it's going to do, I don't know.

135
00:07:20,620 --> 00:07:23,030
And then I'm going to have at least one barber.

136
00:07:23,050 --> 00:07:26,890
But as time goes on, I'm going to add two or three or ten barbers to this.

137
00:07:27,190 --> 00:07:31,870
So maybe I'll have each barber running as its own go routine.

138
00:07:32,060 --> 00:07:33,400
Okay, now, how am I going to do that?

139
00:07:33,880 --> 00:07:35,230
Well, it's actually not that hard.

140
00:07:35,680 --> 00:07:39,070
What I'm going to do and we'll do this in the next lecture, I don't want to make these too long.

141
00:07:39,760 --> 00:07:40,480
It's not a fine.

142
00:07:40,480 --> 00:07:42,850
A method on the type.

143
00:07:42,910 --> 00:07:45,670
Barber shop called something like and barber.

144
00:07:45,820 --> 00:07:51,370
And I'll just add barbers to the shop to that variable we created right there in line 52.

145
00:07:51,760 --> 00:07:58,450
So I'll create a function called Ed Barber with the receiver of Type Shop, and that gives us a function

146
00:07:58,450 --> 00:08:00,610
where we can add as many barbers as we want.

147
00:08:00,730 --> 00:08:03,160
So we'll get started on that in the next lecture.

148
00:08:04,200 --> 00:08:06,770
Actually before we go, I see that we have an error here.

149
00:08:06,780 --> 00:08:13,290
For some reason my id imported both github dot com fatty color and something else.

150
00:08:13,290 --> 00:08:14,460
So let's just get rid of this one.

151
00:08:14,460 --> 00:08:16,830
That's from go get which we're not using in this lecture.

152
00:08:17,100 --> 00:08:18,960
Okay, so that problem goes away.

153
00:08:18,960 --> 00:08:20,460
All right, let's move on.
