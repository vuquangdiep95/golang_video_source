1
00:00:00,960 --> 00:00:05,850
So our final application is going to have a number of go routines running in the background.

2
00:00:05,910 --> 00:00:09,930
Some of those go routines are just going to be listening to channels and some are actually going to

3
00:00:09,930 --> 00:00:14,580
be doing something like sending an email or generating invoice or something like that.

4
00:00:15,590 --> 00:00:20,060
And when you decide to stop this application, for whatever reason, maybe you need to do some work

5
00:00:20,060 --> 00:00:23,550
on the server, maybe you need to implement a hotfix or something like that.

6
00:00:23,570 --> 00:00:26,210
Whatever the case may be, you need to stop the application.

7
00:00:26,810 --> 00:00:29,900
And if you just stop it, like if we type, make it stop.

8
00:00:29,900 --> 00:00:31,570
Right now, everything just stops.

9
00:00:31,580 --> 00:00:34,390
Any running go routines just die without finishing.

10
00:00:34,400 --> 00:00:40,130
And that's not good because you might not send an email that needs to go out or generate an invoice

11
00:00:40,130 --> 00:00:41,300
or whatever the case may be.

12
00:00:42,170 --> 00:00:46,730
So it is good practice to implement graceful shutdown, and that's what we're going to do this time

13
00:00:46,730 --> 00:00:47,090
around.

14
00:00:47,390 --> 00:00:51,950
So back here in the file, I mean, don't go inside the CMT Web folder.

15
00:00:52,400 --> 00:00:59,120
Let's scroll to the very bottom of this file and let's create a go routine like this or a function that's

16
00:00:59,120 --> 00:01:04,910
going to be a go routine function with the receiver app pointer to config as usual.

17
00:01:04,910 --> 00:01:08,270
And I'll call this one listen for shutdown.

18
00:01:10,580 --> 00:01:10,910
Okay.

19
00:01:10,910 --> 00:01:12,050
And it takes no parameters.

20
00:01:12,110 --> 00:01:14,810
This is going to run in the background and just listen for something.

21
00:01:15,320 --> 00:01:18,040
So what I'm going to do, first of all, is I'll make a channel called Click.

22
00:01:18,350 --> 00:01:18,720
Okay?

23
00:01:18,740 --> 00:01:20,270
So I'll make a channel.

24
00:01:21,570 --> 00:01:29,640
And it's going to take OS dot signal right from the OS package and it has a length of one which is unnecessary,

25
00:01:29,640 --> 00:01:30,810
but I'm going to put it in there anyway.

26
00:01:32,750 --> 00:01:40,430
And then we'll say signal, which again is right from the standard library dot notify and we're going

27
00:01:40,430 --> 00:01:44,960
to pass it a quick channel and we're going to pass it.

28
00:01:45,290 --> 00:01:51,560
Just call sig int the interrupt sig int try that again.

29
00:01:51,590 --> 00:01:52,250
See it.

30
00:01:54,360 --> 00:01:55,140
And there it is.

31
00:01:56,310 --> 00:01:56,680
Okay.

32
00:01:56,820 --> 00:02:04,710
When you get the interrupt signal to stop the application or Cisco dot second term to terminate the

33
00:02:04,710 --> 00:02:07,650
application, which is there is a sink term.

34
00:02:07,680 --> 00:02:08,070
Okay.

35
00:02:08,760 --> 00:02:13,080
That's what we're listening for and we'll block on the quick channel.

36
00:02:13,380 --> 00:02:19,320
So this just pauses until we actually get the request to terminate or interrupt the running application.

37
00:02:19,590 --> 00:02:19,870
Okay.

38
00:02:20,370 --> 00:02:26,820
Once that happens, once we get past that line, line 151 in my code, we'll call another function that

39
00:02:26,820 --> 00:02:29,550
doesn't exist yet called app dot shut down.

40
00:02:30,700 --> 00:02:31,030
Okay.

41
00:02:31,970 --> 00:02:33,170
And after that runs.

42
00:02:34,620 --> 00:02:40,170
OS exit with the status code, not executable exit with the status code of zero.

43
00:02:40,720 --> 00:02:40,980
Okay.

44
00:02:41,580 --> 00:02:43,950
Now I'm calling a function that doesn't exist yet, so let's go.

45
00:02:43,950 --> 00:02:45,540
Right that and that's a pretty simple function.

46
00:02:46,740 --> 00:02:53,040
So func the receiver pointer to config, we're going to call this one shutdown.

47
00:02:56,250 --> 00:02:58,040
And what are we going to do inside this function?

48
00:02:58,050 --> 00:03:04,870
Well, we're going to perform any cleanup tasks, whatever those might be.

49
00:03:04,890 --> 00:03:14,040
And for right now, I'll just put after info, log, dot, print line and we'll just say would run cleanup

50
00:03:14,190 --> 00:03:15,480
tasks, dot, dot, dot.

51
00:03:15,820 --> 00:03:22,320
Okay, that's the first thing we're going to do and then we're going to wait for everything to finish.

52
00:03:22,500 --> 00:03:23,940
Now, remember, back up here.

53
00:03:23,970 --> 00:03:25,320
We go to the very top of this file.

54
00:03:27,640 --> 00:03:34,000
We added a weight group, a reefer plunger to a weight group in the field, weight in our application

55
00:03:34,000 --> 00:03:34,540
config.

56
00:03:35,050 --> 00:03:38,290
So we have a weight available to our entire application.

57
00:03:38,350 --> 00:03:39,520
Let's go back down here.

58
00:03:40,630 --> 00:03:45,310
After we run any cleanup tasks, what we're going to do next is just block.

59
00:03:45,910 --> 00:03:53,380
Until weight group is empty and we know how to do that at on weight, which is our weight group, not

60
00:03:53,380 --> 00:03:53,710
weight.

61
00:03:55,300 --> 00:04:00,730
And once that's all the semaphore count in that weight group hits zero, then we move on.

62
00:04:01,120 --> 00:04:02,320
And what will we do here?

63
00:04:02,350 --> 00:04:09,520
Well, we'll print out a napkin for log and just put a comment because we have nothing to do right now,

64
00:04:10,270 --> 00:04:16,510
print line and we'll say closing channels, because that's one thing we'll do.

65
00:04:17,020 --> 00:04:19,690
And shutting down application.

66
00:04:19,900 --> 00:04:20,590
Dot, dot, dot.

67
00:04:20,980 --> 00:04:21,280
Okay.

68
00:04:22,240 --> 00:04:22,980
And that's all that we do.

69
00:04:22,990 --> 00:04:27,040
We have no channels to close at the moment, so we'll just put these messages out.

70
00:04:27,580 --> 00:04:32,140
Now I've got this listen for shutdown, which calls for shutdown, but of course, I'm not starting

71
00:04:32,140 --> 00:04:33,070
this application yet.

72
00:04:33,190 --> 00:04:34,840
I'll go back up to our main function.

73
00:04:35,860 --> 00:04:36,820
Wherever that is.

74
00:04:37,060 --> 00:04:37,600
Right here.

75
00:04:38,050 --> 00:04:42,940
And just before we fire up the Web server, we'll listen for signals.

76
00:04:44,560 --> 00:04:47,290
And of course, that's sink term in cement.

77
00:04:47,680 --> 00:04:54,520
And to start that go routine, we just go go app dot listen for shutdown and now that's running in the

78
00:04:54,520 --> 00:04:54,970
background.

79
00:04:55,630 --> 00:05:01,180
So with those few changes if I open my terminal now and say make stop in case my application is running

80
00:05:01,180 --> 00:05:05,200
and it wasn't and so it makes start, it rebuilds it.

81
00:05:05,530 --> 00:05:07,210
Okay, it started the web server.

82
00:05:07,210 --> 00:05:10,630
So I'll just clear the screen and say, make it stop.

83
00:05:10,660 --> 00:05:15,910
Now this what you're going to see next will definitely show up on Linux and Macs.

84
00:05:15,910 --> 00:05:19,030
It may not show up on Windows for some reason.

85
00:05:19,030 --> 00:05:24,130
Some people using whatever shell they happen to be using on Windows they don't get output from in the

86
00:05:24,130 --> 00:05:26,290
terminal when they're running make commands.

87
00:05:27,340 --> 00:05:33,100
But many do, and I've never figured out what the actual combination is that doesn't allow it to show

88
00:05:33,100 --> 00:05:33,340
up.

89
00:05:33,340 --> 00:05:35,350
But trust me, this is what's happening.

90
00:05:35,350 --> 00:05:36,250
If you follow it along.

91
00:05:36,250 --> 00:05:36,880
Exactly.

92
00:05:36,910 --> 00:05:43,720
Here's what's going to happen when I start the application it says would run cleanup tasks and closing

93
00:05:43,720 --> 00:05:45,490
channels and shutting down application.

94
00:05:45,490 --> 00:05:47,350
And that is a graceful shutdown.

95
00:05:48,190 --> 00:05:51,040
So, of course, what we're going to do down here.

96
00:05:52,520 --> 00:05:56,900
The very bottom of our file when we block until the weight group is empty.

97
00:05:57,290 --> 00:06:03,200
Every time I want to send an email in the background, I'll simply increase weight.

98
00:06:03,380 --> 00:06:09,620
That weight group, the field weight in the application config, I'll increase that by one by adding

99
00:06:09,620 --> 00:06:10,730
one of the weight group.

100
00:06:11,060 --> 00:06:15,350
Or if I'm printing, generating an invoice or something that's going to be running in the background,

101
00:06:15,350 --> 00:06:16,880
I just keep incrementing that.

102
00:06:17,480 --> 00:06:22,910
And of course I'll also have a deferred weight group done in the functions that are actually increasing

103
00:06:22,910 --> 00:06:24,050
the weight group count by one.

104
00:06:24,050 --> 00:06:26,540
So when they're finished, they reduce it down to zero.

105
00:06:27,080 --> 00:06:32,810
So this allows us to ensure that any background tests that are running will actually finish gracefully

106
00:06:32,810 --> 00:06:34,490
before the application terminates.

107
00:06:34,730 --> 00:06:36,050
Okay, let's move on.
