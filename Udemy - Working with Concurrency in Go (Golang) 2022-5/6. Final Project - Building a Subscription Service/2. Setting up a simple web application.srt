1
00:00:01,020 --> 00:00:05,670
So let's get started working on the code for our final project and what we're going to be doing for

2
00:00:05,670 --> 00:00:11,040
the next few lectures is actually just setting up the base code for a web application, and it'll be

3
00:00:11,040 --> 00:00:12,780
a while before we get to concurrency.

4
00:00:12,830 --> 00:00:13,560
Well, let's get started.

5
00:00:13,680 --> 00:00:18,120
So I've opened a new folder in Visual Studio code called Final Dash Project.

6
00:00:18,750 --> 00:00:25,080
And as usual, we need to go mod in it here, go on in it and I'll call this one final dash project.

7
00:00:25,240 --> 00:00:26,250
It doesn't matter what I call it.

8
00:00:26,370 --> 00:00:32,820
Okay, so there's my go on file, and now I'll create a new folder at the root level of my project called

9
00:00:32,820 --> 00:00:34,710
CMT, which is pretty conventional.

10
00:00:34,860 --> 00:00:36,300
And this is a web application.

11
00:00:36,300 --> 00:00:42,510
So inside of CMT, I'll create one called Web, and inside of the web folder, I'll create a new file

12
00:00:42,510 --> 00:00:49,920
called Main Dot Go, and it's in Package Main and I'll give it a main function func main.

13
00:00:51,150 --> 00:00:51,480
Okay.

14
00:00:52,230 --> 00:00:56,640
Now, this is a web application and in my case, I'm going to be listening on Port eight.

15
00:00:56,790 --> 00:00:58,860
So I'll set up a constant web port.

16
00:00:59,520 --> 00:01:01,410
I'll make that equal to the string 80.

17
00:01:01,680 --> 00:01:02,000
Okay.

18
00:01:02,430 --> 00:01:04,020
And we'll be using that in a little while.

19
00:01:05,070 --> 00:01:06,920
Now inside of this function.

20
00:01:07,230 --> 00:01:09,480
Let's write some comments from the things we're going to want to do.

21
00:01:09,510 --> 00:01:11,310
We're going to have a database at some point.

22
00:01:11,310 --> 00:01:14,610
So I'm going to want to connect to the database.

23
00:01:15,540 --> 00:01:18,240
And we're also going to have to have some channels.

24
00:01:18,300 --> 00:01:20,930
We won't get to those for a while, but let's create some channels.

25
00:01:20,940 --> 00:01:25,980
Just a comment so we know what we're going to be working with here and we're going to want to wait group.

26
00:01:26,130 --> 00:01:31,260
So we're going to create at least one weight group, weight group, and you'll see why.

27
00:01:31,260 --> 00:01:33,630
But it'll take four or five lectures before we get there.

28
00:01:34,560 --> 00:01:43,980
Finally, Will want to set up the application and think, okay, and then we're going to want to listen

29
00:01:44,190 --> 00:01:46,080
for web connections.

30
00:01:47,370 --> 00:01:48,850
Now, what else do we need to do here?

31
00:01:48,870 --> 00:01:50,850
We definitely need to connect to the database.

32
00:01:51,000 --> 00:01:55,740
But this what we're going to be building is a subscription service, and that's going to allow people

33
00:01:55,740 --> 00:01:58,710
to create accounts, which means they're going to be able to log in.

34
00:01:59,430 --> 00:02:01,320
So let's add another comment here as well.

35
00:02:01,950 --> 00:02:06,990
Since people are going to be logging in and since this is a web application and we're going to be serving

36
00:02:06,990 --> 00:02:12,460
templates right from here, we're not doing client side page rendering like React or view.

37
00:02:12,480 --> 00:02:17,670
We'll just do a simple web app where all of the rendering of pages is done on the server side.

38
00:02:17,670 --> 00:02:19,700
And that means we're going to have to manage sessions.

39
00:02:19,710 --> 00:02:24,860
So let's say create sessions, whatever is required to make that happen.

40
00:02:24,870 --> 00:02:26,340
So we're definitely going to have that.

41
00:02:27,330 --> 00:02:32,130
And down here, after I create the application config, one of the things we're going to do whenever

42
00:02:32,130 --> 00:02:37,290
somebody buys a subscription for a website or creates an account, you're going to be sending email.

43
00:02:37,290 --> 00:02:42,120
And that's an ideal situation to take advantage of, goes concurrency functionality.

44
00:02:42,600 --> 00:02:45,080
So let's add another comment here.

45
00:02:45,090 --> 00:02:49,410
We're going to set up mail, mail, however that works.

46
00:02:49,440 --> 00:02:49,830
Okay.

47
00:02:49,830 --> 00:02:51,270
And we'll get to that before too long.

48
00:02:52,650 --> 00:02:57,960
So they're at a very high level are the kinds of things this main function is going to take care of,

49
00:02:58,020 --> 00:03:02,310
will initialize a database, will create some sessions, will create some channels.

50
00:03:03,030 --> 00:03:06,090
We're going to need a weight group and we're going to be using that right away.

51
00:03:06,090 --> 00:03:11,400
I can see that if I'm going to be sending email in this application and I'm going to be sending email

52
00:03:11,400 --> 00:03:17,730
concurrently, if someone decides to restart the application for whatever reason, maybe you're going

53
00:03:17,730 --> 00:03:19,140
to do some maintenance or whatever it is.

54
00:03:19,500 --> 00:03:21,930
You don't want to just say, stop the application.

55
00:03:21,960 --> 00:03:27,990
You actually want to wait until any mail that is waiting to be sent gets delivered and then you quit.

56
00:03:28,050 --> 00:03:31,260
And of course, that's an ideal situation for a wait group.

57
00:03:31,440 --> 00:03:36,540
So they're at a very high level are the kinds of things we're going to want to do.

58
00:03:36,840 --> 00:03:42,390
Now, let's think about sessions to start with and some things we're going to have to import into this

59
00:03:42,390 --> 00:03:42,960
project.

60
00:03:43,590 --> 00:03:45,840
Let's just take care of our go gets right now.

61
00:03:45,840 --> 00:03:47,970
So I'll open my terminal and clear the screen.

62
00:03:48,240 --> 00:03:53,310
First thing for the database I'm going to use Postgres and there's a couple of different drivers out

63
00:03:53,310 --> 00:03:54,210
there for Postgres.

64
00:03:54,990 --> 00:03:57,060
One is called I think PCU.

65
00:03:57,060 --> 00:04:01,440
It's been a while since I've used it, but if you actually read the documentation for that right in

66
00:04:01,440 --> 00:04:06,720
the front page of the GitHub repository, it says, and don't use this one, use Jack CS instead.

67
00:04:06,750 --> 00:04:14,250
So let's go get the necessary things for Jack CS Postgres driver so I'll go get from GitHub dot com

68
00:04:15,810 --> 00:04:21,240
slash jack C slash PG con and that will get the first thing I need.

69
00:04:22,020 --> 00:04:22,240
Okay.

70
00:04:22,350 --> 00:04:23,190
So that gets that.

71
00:04:23,730 --> 00:04:33,330
Now I'll clear the screen and go and get from again GitHub dot com slash and jack C slash PG X slash

72
00:04:33,330 --> 00:04:38,940
v4 and if V5 happens to be out when you take this course, please install V4.

73
00:04:40,290 --> 00:04:45,690
If we increase the major version for a particular project, that usually means there are breaking changes.

74
00:04:45,690 --> 00:04:50,610
So install v4 for this course and a V5 is out and it shouldn't be for some time yet.

75
00:04:50,940 --> 00:04:55,410
But if it is, just use this version and then upgrade after the fact.

76
00:04:55,410 --> 00:04:57,630
It will make your life ever so much easier.

77
00:04:57,810 --> 00:04:58,620
So we'll go get that.

78
00:05:00,500 --> 00:05:02,150
So that's a driver for our database.

79
00:05:03,110 --> 00:05:06,200
Now for sessions, you could use guerrilla sessions.

80
00:05:06,200 --> 00:05:10,160
There's all kinds of them out there, but one that I really like and one that he's never let me down

81
00:05:10,160 --> 00:05:12,800
is done by Alex Edwards, and that's the one I'm going to get.

82
00:05:13,250 --> 00:05:17,120
So I will go and get from GitHub dot com.

83
00:05:17,600 --> 00:05:18,230
Try that again.

84
00:05:18,710 --> 00:05:26,270
GitHub dot com slash Alex Edwards slash s c.

85
00:05:26,270 --> 00:05:28,350
S slash v2.

86
00:05:28,370 --> 00:05:29,990
And the same logic applies here.

87
00:05:29,990 --> 00:05:32,510
If there's a V3 stick with V2 for this course.

88
00:05:32,540 --> 00:05:32,930
Okay.

89
00:05:33,560 --> 00:05:34,460
So we'll go and get that.

90
00:05:35,900 --> 00:05:40,970
And one of the nice things about Alex Edwards session management management package is it allows different

91
00:05:40,970 --> 00:05:42,770
stores for session data.

92
00:05:42,770 --> 00:05:46,190
You can store it in the database in a cookie, but I want to use Redis.

93
00:05:46,940 --> 00:05:51,940
And Redis is a really fast in-memory cache and it's super simple to use with this session manager.

94
00:05:51,950 --> 00:05:53,900
So we'll get the necessary package for that.

95
00:05:54,530 --> 00:06:07,250
Go and get from GitHub dot com slash Alex Edwards slash SC s slash Revis store like that.

96
00:06:07,310 --> 00:06:07,730
Okay.

97
00:06:09,140 --> 00:06:10,100
So we'll go and get that.

98
00:06:10,430 --> 00:06:15,040
And the last thing I want to worry about right now is this is going to be a web application.

99
00:06:15,050 --> 00:06:20,090
It's going to allow people to register for a service and to buy things and to log in and to log out.

100
00:06:20,510 --> 00:06:25,310
And while we could do everything with the standard library, it's pretty customary for go developers

101
00:06:25,310 --> 00:06:30,320
working on a web applications to use some third party router, and one that I really like is called

102
00:06:30,320 --> 00:06:31,220
the Chey River.

103
00:06:32,690 --> 00:06:35,240
So let's get that now because we're going to need it momentarily.

104
00:06:35,300 --> 00:06:35,690
Okay.

105
00:06:35,990 --> 00:06:44,420
So I will go and get from GitHub icon slash, go dash key slash V5.

106
00:06:44,720 --> 00:06:45,140
Okay.

107
00:06:47,170 --> 00:06:48,790
And that should go and get it for me.

108
00:06:49,030 --> 00:06:50,590
And I must have mistyped the address.

109
00:06:50,800 --> 00:06:51,340
Yes, I did.

110
00:06:51,510 --> 00:06:54,850
Goce slash g slash v5.

111
00:06:55,060 --> 00:06:55,570
Try that again.

112
00:06:56,200 --> 00:06:56,530
There.

113
00:06:56,620 --> 00:06:57,310
That adds that.

114
00:06:57,940 --> 00:07:04,330
And I don't know if I need to do this, but just to be safe, I'll put slash V5 slash middleware because

115
00:07:04,330 --> 00:07:06,250
we'll be using the middleware for this package as well.

116
00:07:06,280 --> 00:07:07,210
Looks like it already has it.

117
00:07:07,270 --> 00:07:07,660
Okay.

118
00:07:08,530 --> 00:07:14,860
So there are all of our go gets and that gives me I think right now at least most of the things I'm

119
00:07:14,860 --> 00:07:17,650
going to need as I work on this web application.

120
00:07:17,800 --> 00:07:22,060
The only thing that I'm not sure about and again, this is just I think it's already installed, but

121
00:07:22,060 --> 00:07:25,990
let's just make sure I hit the up arrow a couple of times back to the Jack C bit.

122
00:07:26,950 --> 00:07:30,400
So after Jack C v4, we might need to do this.

123
00:07:30,460 --> 00:07:32,830
I can never remember, but it won't hurt to return here.

124
00:07:32,830 --> 00:07:35,420
I just added std lib to that command.

125
00:07:35,440 --> 00:07:43,690
So go get github dot com slash jack c slash pg x slash v4 slash s.t.d. lib.

126
00:07:44,950 --> 00:07:46,900
Yeah, it was installed, so we didn't need to do that.

127
00:07:46,910 --> 00:07:49,120
That was an unnecessary step, but it didn't hurt anything.

128
00:07:49,900 --> 00:07:54,550
Okay, so when the next lecture we'll start populating these comments or underneath these comments with

129
00:07:54,550 --> 00:07:58,780
some of the things we need to actually make this application start up.

130
00:07:59,050 --> 00:07:59,980
So let's move on.
