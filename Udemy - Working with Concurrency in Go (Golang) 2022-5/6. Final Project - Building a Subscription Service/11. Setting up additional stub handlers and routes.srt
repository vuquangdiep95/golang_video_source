1
00:00:00,810 --> 00:00:05,550
Now that we know we can actually display a web page to the end user, let's take some time and set up

2
00:00:05,550 --> 00:00:09,000
a few more stub handlers for the rest of the pages in our site.

3
00:00:09,010 --> 00:00:10,470
And we're not going to have a lot of pages.

4
00:00:10,470 --> 00:00:15,660
We're just trying to demonstrate how to use concurrency in a real world application.

5
00:00:15,660 --> 00:00:20,910
And of course, we're just doing a subset of what is some fictitious larger site.

6
00:00:21,030 --> 00:00:21,660
But that's okay.

7
00:00:21,810 --> 00:00:23,220
Let's go over to our handlers.

8
00:00:23,220 --> 00:00:24,090
Dot go first.

9
00:00:24,480 --> 00:00:27,810
It will set a few up so we already have a handler for the home page.

10
00:00:28,200 --> 00:00:35,310
Let's do one for the log in page func app pointer to config as usual and we'll call this one logging

11
00:00:35,310 --> 00:00:42,540
page, which seems to make sense and it will take a response writer right there and a pointer to a request.

12
00:00:44,880 --> 00:00:47,580
And all we're going to do here is actually render a page.

13
00:00:47,580 --> 00:00:50,430
So it's pretty much the same thing as what we did before.

14
00:00:50,430 --> 00:00:54,990
And let's copy this and pasted in here and let's get the name of the template.

15
00:00:55,050 --> 00:00:57,720
It's log in page to go HTML.

16
00:00:57,960 --> 00:01:00,900
So I just put logging dot page to go each time out.

17
00:01:01,980 --> 00:01:04,950
And then of course we'll have to have a handler that actually does the logging.

18
00:01:05,080 --> 00:01:12,600
We'll just do a stub for that right now config and we'll call this one say post logging page because

19
00:01:12,600 --> 00:01:20,730
a post request will call this handler and again need a response writer and our pointer to our request

20
00:01:22,170 --> 00:01:23,220
and we'll leave that empty for now.

21
00:01:23,520 --> 00:01:23,880
Okay.

22
00:01:25,080 --> 00:01:30,660
And then we're going to have to have a log out function and that's pretty simple func that pointer to

23
00:01:30,660 --> 00:01:41,070
config and we'll just call this one log out and it will be W.A.S.P. dot response writer and our pointer

24
00:01:41,070 --> 00:01:42,930
to HTP to request.

25
00:01:44,310 --> 00:01:47,070
And again, I'll leave this empty for now to some stub handlers.

26
00:01:48,160 --> 00:01:52,960
The other thing we're going to want to let people do is register to register and possibly buy something.

27
00:01:52,990 --> 00:02:02,680
So funk app pointer to config and we'll call this one register page with w h heartbeat of response rater

28
00:02:03,130 --> 00:02:06,820
and our pointer to HTTP request.

29
00:02:08,230 --> 00:02:10,600
Now this one is just, just displaying a page.

30
00:02:10,600 --> 00:02:13,810
It's the registered on page token which html.

31
00:02:13,810 --> 00:02:20,210
So I can copy this, paste it here and make this register.

32
00:02:20,230 --> 00:02:21,880
Dot page dot go html.

33
00:02:22,090 --> 00:02:23,470
And again we'll have a post handler.

34
00:02:23,470 --> 00:02:29,830
So to handle that after somebody actually fills out the registration form, we'll call this one, say

35
00:02:30,130 --> 00:02:34,180
post, register page and we'll leave it empty for now as well.

36
00:02:35,410 --> 00:02:41,560
So after they register, what we'll do is send them an activation email to verify that we have the valid

37
00:02:41,560 --> 00:02:47,050
email address and we'll actually have them activate their account and that will be a get request, but

38
00:02:47,050 --> 00:02:48,460
it'll be very similar to this.

39
00:02:48,460 --> 00:02:56,020
So I'll copy this, paste it into here and just call this activate account.

40
00:02:56,380 --> 00:03:00,010
Okay, so there are some actual stub handlers.

41
00:03:00,130 --> 00:03:02,830
Now let's go set up some routes to them over at our routes file.

42
00:03:04,600 --> 00:03:05,680
So we have the home page.

43
00:03:06,070 --> 00:03:11,370
Let's do one for actually logging in, so forth so much.

44
00:03:11,650 --> 00:03:20,170
And yet when you go to slash log in, we'll take you to the handler after log in page and then we'll

45
00:03:20,170 --> 00:03:23,350
duplicate that and make this a post.

46
00:03:23,590 --> 00:03:29,530
And when you post to the from the log in page, you're going to go to the slash log in route again.

47
00:03:29,680 --> 00:03:36,400
But this time it's a post request and we'll change this to post log in page and we'll duplicate that

48
00:03:36,400 --> 00:03:38,800
again and make this log out.

49
00:03:39,340 --> 00:03:45,610
But the log request will be a get request and we'll take them to the log error handler right there.

50
00:03:46,090 --> 00:03:46,450
Okay.

51
00:03:47,500 --> 00:03:54,280
And the next one would be, say, max dot yet and you're going to go to slash register to register for

52
00:03:54,280 --> 00:04:01,630
an account and that will take you to app dot register page and we duplicate this, make this a post

53
00:04:01,630 --> 00:04:06,100
request and that takes you to post register page

54
00:04:08,920 --> 00:04:10,510
and the last one is activate.

55
00:04:11,110 --> 00:04:18,640
So we'll make this a get request and it takes say activate, maybe activate dash account.

56
00:04:18,760 --> 00:04:22,960
You can always change it later and that takes you to activate account.

57
00:04:24,970 --> 00:04:25,300
Okay.

58
00:04:25,480 --> 00:04:29,470
Now with those changes, I should be able to restart my application, make restart.

59
00:04:31,750 --> 00:04:33,850
So everything compiled a restart of the application.

60
00:04:33,850 --> 00:04:36,070
Let's go back to our web browser and see if these work.

61
00:04:36,910 --> 00:04:42,070
So I should be able now to go to the Register page and there it is, and I should be able to go to the

62
00:04:42,070 --> 00:04:44,410
login page and there it is.

63
00:04:44,730 --> 00:04:47,740
Okay, now nothing else works, but this is a good start.

64
00:04:48,520 --> 00:04:54,280
All right, let's move on and take care of implementing graceful shut down, which will be the first

65
00:04:54,280 --> 00:04:59,050
time in this section we've actually done anything with concurrency, and it's not very complex, but

66
00:04:59,050 --> 00:05:00,610
we'll get started on it right away.
