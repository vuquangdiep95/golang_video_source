1
00:00:00,930 --> 00:00:03,660
So let's get started with our Dining Philosophers project.

2
00:00:03,660 --> 00:00:07,740
And as I said in the introduction, I'm not going to solve this using channels.

3
00:00:07,920 --> 00:00:10,590
We'll get back to those before too long, so don't worry about that.

4
00:00:10,980 --> 00:00:16,730
Instead, I'm going to solve this using the sink package, sink, dot mutex and sink dot wait group.

5
00:00:17,580 --> 00:00:23,370
So I have a new folder open here in Visual Studio code and as usual, I'll open my terminal and type

6
00:00:23,370 --> 00:00:25,920
go mod in it and I'll just call mine dining.

7
00:00:26,250 --> 00:00:28,350
Okay, so that creates my goal mod file.

8
00:00:28,980 --> 00:00:32,610
Now I'll create a new file as usual, mico.

9
00:00:33,180 --> 00:00:37,710
And this is in package main and it's going to have at least one function, of course, for me.

10
00:00:38,850 --> 00:00:45,090
Now, when I'm writing code, I typically like to put a comment at the top that gives me a statement

11
00:00:45,090 --> 00:00:48,020
of the problem, and there's no point in you watching me type that out.

12
00:00:48,030 --> 00:00:50,880
So I've copied it to my clipboard and I'm going to paste it in here.

13
00:00:51,000 --> 00:00:51,360
Okay.

14
00:00:51,720 --> 00:00:52,770
So let's go through this again.

15
00:00:53,370 --> 00:00:58,290
The dining philosophers is a well-known problem in computer science, and we have five philosophers

16
00:00:58,290 --> 00:00:59,160
who live in a house.

17
00:00:59,610 --> 00:01:03,060
They always eat together and they always sit at the same place in the table.

18
00:01:03,510 --> 00:01:08,010
And the problem that they have is that they're eating spaghetti that requires two forks.

19
00:01:08,370 --> 00:01:12,900
Now there are two forks next to each plate, but as that illustration I showed you in the introduction

20
00:01:12,900 --> 00:01:18,090
demonstrates, we have five plates and five forks, and this is the problem.

21
00:01:18,330 --> 00:01:21,090
No two neighbors can be eating at the same time.

22
00:01:21,330 --> 00:01:23,130
So how am I going to solve that problem?

23
00:01:23,190 --> 00:01:25,230
Well, let's write some comments like I normally do.

24
00:01:26,100 --> 00:01:27,570
I'm going to have to have some variables.

25
00:01:27,720 --> 00:01:28,980
I'm going to have to have some variables.

26
00:01:28,980 --> 00:01:34,260
So I'll put variables here and I'll just list the kind of variables I need to have.

27
00:01:34,380 --> 00:01:36,570
I'm going to have to have, first of all, the philosophers.

28
00:01:38,850 --> 00:01:39,870
No question about that.

29
00:01:40,080 --> 00:01:40,460
Okay.

30
00:01:41,190 --> 00:01:46,990
And I'm also going to have to keep track of things like, you know, who's eating, who's not eating.

31
00:01:47,010 --> 00:01:47,610
I'm not sure.

32
00:01:47,610 --> 00:01:51,720
But I know I'm going to have to have some variables and we'll populate those as we figure out exactly

33
00:01:51,720 --> 00:01:52,260
what they are.

34
00:01:52,710 --> 00:01:56,070
And in the main function, I'm probably going to want to print an introduction.

35
00:01:56,790 --> 00:01:59,070
So some kind of introduction, introductory screen.

36
00:01:59,280 --> 00:02:00,180
I'm going to print that out.

37
00:02:01,240 --> 00:02:05,950
And I'm also going to have to make each philosopher try to eat.

38
00:02:06,130 --> 00:02:07,270
So how am I going to do that?

39
00:02:07,300 --> 00:02:14,230
Well, I'm probably going to spawn one go routine for each philosopher.

40
00:02:16,810 --> 00:02:20,710
And that go routine will run until the philosophers finished eating.

41
00:02:20,960 --> 00:02:22,300
Okay, so that's simple enough.

42
00:02:22,750 --> 00:02:24,820
So that means I'm going to have to have some kind of for loop.

43
00:02:24,970 --> 00:02:27,210
So maybe I'll have a list of philosophers.

44
00:02:27,220 --> 00:02:28,720
Let's get a variable in here right now.

45
00:02:28,720 --> 00:02:33,490
Just so we have something to work with, I'll create a variable, a package level variable called philosophers.

46
00:02:36,430 --> 00:02:38,640
And it's going to be a slice of strings.

47
00:02:38,650 --> 00:02:43,780
So I'll make it equal to a slice of string and I'll put in a bunch of philosophers.

48
00:02:43,940 --> 00:02:46,970
Okay, so we'll just choose five.

49
00:02:47,110 --> 00:03:01,060
So we'll have, say, Plato, and we'll have Socrates and maybe Aristotle, Haskell and Locke.

50
00:03:01,210 --> 00:03:04,720
And again, it doesn't matter what these names are, we just need to have five of them.

51
00:03:04,750 --> 00:03:05,160
Okay.

52
00:03:06,880 --> 00:03:08,410
And I don't need parentheses around these.

53
00:03:08,410 --> 00:03:09,610
I don't know where those came from.

54
00:03:10,780 --> 00:03:12,070
My first lecture of the day.

55
00:03:12,070 --> 00:03:13,480
So I have one coffee in me.

56
00:03:13,570 --> 00:03:14,530
I'm going to blame it on that.

57
00:03:15,070 --> 00:03:16,330
So now I have some philosophers.

58
00:03:16,720 --> 00:03:23,230
And down here, I'm going to spit spawn some kind of go routine by going through that list of philosophers.

59
00:03:23,260 --> 00:03:24,040
Well, that's easy, you know.

60
00:03:24,580 --> 00:03:29,260
All I have to say is for say I index is starts at zero.

61
00:03:29,740 --> 00:03:33,360
And I'm going to go as long as I have the length of philosophers.

62
00:03:33,370 --> 00:03:37,570
So then of philosophers and I'll add one each time through.

63
00:03:38,650 --> 00:03:43,610
And then I'll call a go routine or spawn a go routine.

64
00:03:43,630 --> 00:03:46,510
So maybe I'll call that dining problem.

65
00:03:46,780 --> 00:03:48,400
Go dining problem.

66
00:03:50,410 --> 00:03:54,670
Now, that doesn't exist yet, and I don't know what kind of parameters I'm going to send to it.

67
00:03:54,760 --> 00:03:56,440
But this gets us this gets us started.

68
00:03:56,890 --> 00:04:03,760
So up here, above the main function, I'll just create a function called dining problem.

69
00:04:06,190 --> 00:04:07,260
And I won't do anything right now.

70
00:04:07,270 --> 00:04:07,960
I'll leave it empty.

71
00:04:08,110 --> 00:04:10,300
But at least now my code is in showing me an error.

72
00:04:10,400 --> 00:04:12,580
Okay, so I'm going to have to do that.

73
00:04:12,580 --> 00:04:20,140
And somehow I'm going to have to make sure that when I spawn this go routine for a given philosopher,

74
00:04:20,800 --> 00:04:26,500
that I have a means of keeping track of who has what fork in which hand.

75
00:04:26,650 --> 00:04:32,380
In other words, this philosopher, the one that's that's called when I first spawn this go routine,

76
00:04:32,890 --> 00:04:38,560
that person can't eat until they can get both the left fork and the right fork in their hand.

77
00:04:38,800 --> 00:04:43,810
Okay, so we'll figure out how to do that before too long, probably here.

78
00:04:43,930 --> 00:04:48,220
I'm going to have to have some kind of weight group, so maybe a backup of my variables.

79
00:04:48,460 --> 00:04:49,510
I create a weight group here.

80
00:04:50,230 --> 00:04:53,650
Var WG is a type sync dot weight group.

81
00:04:54,520 --> 00:04:54,870
Okay.

82
00:04:56,450 --> 00:05:02,810
So that means here, before I go into this for loop, I'm probably going to want to start that weight

83
00:05:02,810 --> 00:05:05,480
group to get the correct number of semaphores in there.

84
00:05:05,490 --> 00:05:15,380
So I'll just say WG and however long my slices strings philosopher's is okay and down here I'm definitely

85
00:05:15,380 --> 00:05:16,190
going to have to wait.

86
00:05:16,280 --> 00:05:17,300
WG To wait.

87
00:05:18,470 --> 00:05:21,740
And of course, up at the dining problem, I want to defer.

88
00:05:21,890 --> 00:05:22,940
WG Not done.

89
00:05:23,780 --> 00:05:25,610
Okay, so that's a good start.

90
00:05:25,640 --> 00:05:28,190
There's the overall structure of my program now.

91
00:05:28,190 --> 00:05:34,070
There's a lot to figure out right now, but in essence, this is a good starting position.

92
00:05:34,160 --> 00:05:38,450
So the thing to think about right now is what am I going to do up here in dining problem?

93
00:05:38,450 --> 00:05:44,570
How am I going to ensure that a given philosopher is able to pick up both the left and right fork?

94
00:05:44,990 --> 00:05:46,370
So this is enough to get us started.

95
00:05:46,610 --> 00:05:52,250
In the next lecture, we'll have a look at how we determine whether or not someone is able to pick up

96
00:05:52,250 --> 00:05:53,090
both forks.
