1
00:00:01,340 --> 00:00:05,900
So this time around, we want to implement the same sort of thing that we did with Mineo and that is

2
00:00:05,900 --> 00:00:09,860
connecting to an AWB bucket compatible server.

3
00:00:10,070 --> 00:00:15,380
But this time we want to use Amazon's actual libraries because a lot of people will find themselves

4
00:00:15,380 --> 00:00:20,240
in situations where they're working for an employer and that employer says, no, you're going to connect

5
00:00:20,240 --> 00:00:22,280
two buckets using Amazon code.

6
00:00:22,490 --> 00:00:23,750
So let's get started.

7
00:00:24,330 --> 00:00:29,780
I'll open my terminal and I'll make sure I'm inside the celebrity's project folder, and I will, first

8
00:00:29,780 --> 00:00:31,470
of all, go get the things we have to get.

9
00:00:31,520 --> 00:00:33,110
So there's the first one.

10
00:00:33,170 --> 00:00:39,640
Go get GitHub dot com slash IWC slash IWC Dash SDK, dot go slash NWS.

11
00:00:40,640 --> 00:00:42,290
So I already have that one installed, I think.

12
00:00:43,910 --> 00:00:44,300
Yes.

13
00:00:44,780 --> 00:00:49,040
But now I want to do the same thing and put some credentials after it.

14
00:00:51,500 --> 00:00:58,430
OK, so it's got those and now let's open up the file S3 don't go from inside the ESSARY File Systems

15
00:00:58,430 --> 00:01:02,450
folder inside the file system folder inside celebrities.

16
00:01:02,540 --> 00:01:02,960
OK.

17
00:01:03,710 --> 00:01:05,840
And I want to do the same sort of thing I've done before.

18
00:01:06,020 --> 00:01:06,710
I'm going to start.

19
00:01:06,890 --> 00:01:08,270
I mean, hide the terminal window.

20
00:01:09,140 --> 00:01:11,390
I'm going to start by creating a function to get credentials.

21
00:01:11,810 --> 00:01:14,480
Func with Receiver s pointer to S3 three.

22
00:01:16,520 --> 00:01:18,080
And I'm going to call this.

23
00:01:19,470 --> 00:01:20,310
Get credentials,

24
00:01:23,610 --> 00:01:28,050
and that's going to return one type, and let's hope that my I.D. finds it for me.

25
00:01:28,080 --> 00:01:32,100
Sometimes it has trouble finding things from Amazon credentials.

26
00:01:33,800 --> 00:01:35,780
Dot credentials right there.

27
00:01:36,470 --> 00:01:39,810
So I did the import for me, but it did the wrong one.

28
00:01:39,830 --> 00:01:43,670
It chose Mineo and that's not what I want.

29
00:01:43,880 --> 00:01:56,920
So I'll delete all of this and replace the middle part with a s slash NWS Dash SDK, Dash Go slash IWC

30
00:01:57,050 --> 00:01:59,840
slash credentials there.

31
00:02:00,680 --> 00:02:05,180
So make sure you get the right import because my I.D. defaulted to the Mineo one for some reason.

32
00:02:05,360 --> 00:02:09,080
OK, so that's what this is going to return now.

33
00:02:09,080 --> 00:02:14,090
I'm going to get all of the necessary credentials right from my receiver, so I'll create a variable

34
00:02:14,090 --> 00:02:22,250
called see, which is credentials and that's assigned the value of credentials dot new static credentials

35
00:02:23,000 --> 00:02:23,600
like that.

36
00:02:24,440 --> 00:02:31,670
And that requires the ID, which is actually the key in our case, ASCII, and it also requires a secret

37
00:02:31,910 --> 00:02:32,870
escort secret.

38
00:02:33,740 --> 00:02:34,970
And the third one is a token.

39
00:02:34,970 --> 00:02:37,910
We're not using tokens, but that's where you put it if you're using a token.

40
00:02:38,000 --> 00:02:41,840
OK, so that gives me my client and I will return.

41
00:02:41,840 --> 00:02:43,100
That returns.

42
00:02:46,860 --> 00:02:51,900
So now we have a means of getting Amazon credentials, and as you can see, that part is pretty straightforward.

43
00:02:52,290 --> 00:02:56,180
It only took one line to get a client, but just word of warning.

44
00:02:56,190 --> 00:03:02,790
Most of the functions we're going to be writing will take far more code than the equivalent functions

45
00:03:02,790 --> 00:03:05,550
in SFP or Mineo or WebDAV.

46
00:03:06,060 --> 00:03:10,500
For some reason, Amazon's code tends to be a bit longer, but it's not that difficult.

47
00:03:11,280 --> 00:03:13,410
So we'll start with the list function.

48
00:03:13,470 --> 00:03:14,880
OK, we may as well start with that one.

49
00:03:15,090 --> 00:03:18,780
And it requires just a prefix.

50
00:03:18,810 --> 00:03:19,140
OK.

51
00:03:19,860 --> 00:03:25,530
So we're going to start pretty much the same as we did before by getting some credentials.

52
00:03:25,680 --> 00:03:29,160
So down on my list function after my VAR listing.

53
00:03:30,150 --> 00:03:30,930
Let me get client.

54
00:03:31,470 --> 00:03:37,470
So I'll call this one see, and it will be assigned the value of s get credentials.

55
00:03:38,250 --> 00:03:38,580
OK.

56
00:03:38,850 --> 00:03:39,630
So that's my client.

57
00:03:39,760 --> 00:03:40,260
I call it.

58
00:03:40,260 --> 00:03:41,910
See, this time I'm not sure why.

59
00:03:42,840 --> 00:03:47,490
Now, Amazon expects me to start something called a session, which I'll call CSC now.

60
00:03:47,520 --> 00:03:52,260
This is not the same as the session we're using for web applications.

61
00:03:52,290 --> 00:03:53,850
This is an Amazon session.

62
00:03:53,880 --> 00:03:54,210
OK.

63
00:03:54,780 --> 00:03:57,510
And for that, we're going to call Session Dot must.

64
00:03:58,860 --> 00:03:59,580
And we'll see if it did.

65
00:03:59,970 --> 00:04:01,050
For me, it did good.

66
00:04:01,560 --> 00:04:03,360
Let's make sure it did the right session.

67
00:04:03,660 --> 00:04:05,250
It did a WC session.

68
00:04:05,820 --> 00:04:14,490
So Session Dot must and then it's parameter is going to be a variable of the type session dot new session.

69
00:04:14,640 --> 00:04:22,950
Straight out of Amazon's own new session and it requires a config and it requires a reference to an

70
00:04:22,950 --> 00:04:25,350
eight of you asked dot config.

71
00:04:26,970 --> 00:04:27,330
OK.

72
00:04:27,990 --> 00:04:28,710
And we'll fill in.

73
00:04:28,710 --> 00:04:29,730
It's necessary fields.

74
00:04:29,940 --> 00:04:38,670
So for our purposes, we need to specify an endpoint, which will be a and it has to be given as a pointer.

75
00:04:38,670 --> 00:04:42,720
So we'll use a reference to from our receiver s dot endpoint.

76
00:04:44,700 --> 00:04:52,200
And it requires a region and again a reference to our Pointer R Receiver s dot region.

77
00:04:53,790 --> 00:04:58,650
And it also requires the credentials which in this case is a C.

78
00:04:58,680 --> 00:05:02,910
It's not really a client so much as it is a credentials object, but in any case, there it is.

79
00:05:04,050 --> 00:05:05,310
So we defined our session.

80
00:05:05,380 --> 00:05:06,240
Now what are we going to do with it?

81
00:05:06,840 --> 00:05:11,670
Well, we're now going to create what Amazon calls a service, so I'll create a variable called SBC

82
00:05:11,670 --> 00:05:16,040
for service and that's assigned the value of S3.

83
00:05:16,050 --> 00:05:20,460
That's lowercase s three dot new.

84
00:05:23,490 --> 00:05:26,040
And that requires a session, that's SS.

85
00:05:27,600 --> 00:05:29,430
And let's see if it did the correct import for me.

86
00:05:29,520 --> 00:05:30,330
It did good.

87
00:05:32,300 --> 00:05:35,510
And now we need to provide a variable called input.

88
00:05:35,840 --> 00:05:44,930
I'm going to call my input and it needs to be of the type a reference to the three dot list object object's

89
00:05:44,930 --> 00:05:46,160
input right there.

90
00:05:47,550 --> 00:05:49,020
And that requires a bucket.

91
00:05:50,880 --> 00:05:51,630
We know what that is.

92
00:05:53,160 --> 00:05:59,220
That will be typically you, would you say it's a string from a receiver s bucket, but Amazon being

93
00:05:59,220 --> 00:06:00,990
Amazon, we have to do things their way.

94
00:06:01,110 --> 00:06:06,900
It was not straight and we give that escort bucket.

95
00:06:08,280 --> 00:06:08,670
OK.

96
00:06:09,030 --> 00:06:16,590
Amazon wants thing in the wrong format for some reason, and our prefix will be s dot string, and that

97
00:06:16,590 --> 00:06:20,280
will be the parameter prefix that was handed to this function prefix.

98
00:06:23,040 --> 00:06:27,240
So now we have a service and we have an input and we have a session and we have our credentials.

99
00:06:28,020 --> 00:06:30,360
And finally, we can say.

100
00:06:32,140 --> 00:06:40,120
Get a result while checking for an error by calling SBC Dot List objects.

101
00:06:41,320 --> 00:06:42,850
And that requires our input.

102
00:06:43,690 --> 00:06:48,430
OK, now we'll check for an error if error is not equal to nil.

103
00:06:50,890 --> 00:06:55,540
And this is slightly different than the kind of logic we've done before because we want to check to

104
00:06:55,540 --> 00:06:58,900
start with what kind of error do we have?

105
00:06:59,080 --> 00:06:59,590
So.

106
00:07:00,780 --> 00:07:01,770
Is it an error?

107
00:07:02,460 --> 00:07:05,190
That's an Amazon error, or is it some other kind of error?

108
00:07:05,400 --> 00:07:12,300
OK, so I'll just do an statement if I'm going to store this in a variable called a e r for Amazon error.

109
00:07:12,780 --> 00:07:21,390
And OK, and those are assigned values by calling Error Dot, cast it to an NWS r error.

110
00:07:23,550 --> 00:07:24,030
There it is.

111
00:07:25,530 --> 00:07:26,280
And OK.

112
00:07:28,680 --> 00:07:33,640
So if we have this kind of casting taking place will switch on the air code.

113
00:07:33,750 --> 00:07:41,160
And this is sample code taken straight from Amazon's documentation air dot code right there.

114
00:07:42,810 --> 00:07:43,860
We're switching on that.

115
00:07:46,350 --> 00:07:50,090
So the first case will be is this an S3 dot error code?

116
00:07:50,100 --> 00:07:53,250
No such bucket code, no such bucket.

117
00:07:54,830 --> 00:07:59,040
Okay, if that's the case, let's just print out that error format or print line.

118
00:08:01,930 --> 00:08:10,300
And we'll print out as dot error code, no such bucket, and we'll actually print out the error as well.

119
00:08:10,960 --> 00:08:13,000
Our dart error.

120
00:08:13,930 --> 00:08:17,860
OK, so that's our first case and the default case.

121
00:08:17,860 --> 00:08:22,150
If it's not that, then we'll just print out the error format dot print line.

122
00:08:24,590 --> 00:08:26,450
We are taught error.

123
00:08:27,140 --> 00:08:32,270
OK, so that's our instinct now if OK is not true.

124
00:08:32,659 --> 00:08:33,140
Else?

125
00:08:34,919 --> 00:08:37,230
And we'll just print out the error, so I'll copy this one.

126
00:08:38,630 --> 00:08:40,640
Say some typing, paste it in here

127
00:08:43,370 --> 00:08:45,320
and print out e are not error.

128
00:08:47,900 --> 00:08:53,060
And then at the end of this, I'll return nil and I'll actually return the error as well.

129
00:08:53,870 --> 00:08:54,140
OK?

130
00:08:54,800 --> 00:08:55,550
Something went wrong.

131
00:08:56,240 --> 00:08:59,560
So that's our first big check.

132
00:08:59,600 --> 00:09:00,740
We're getting that result.

133
00:09:01,010 --> 00:09:06,200
Now that we have the result, we can actually populate the variable listing.

134
00:09:06,500 --> 00:09:12,020
Sit down here, let's give ourselves a couple of lines and scroll up a bit.

135
00:09:13,820 --> 00:09:16,730
So let's range through our result for four.

136
00:09:16,790 --> 00:09:17,930
Don't care about the index.

137
00:09:17,930 --> 00:09:26,900
Do care about the key is assigned the value of ranging through result dot contents.

138
00:09:27,500 --> 00:09:28,880
That's the part we can iterate through.

139
00:09:30,230 --> 00:09:32,840
So let's calculate some sizes like we did before.

140
00:09:33,080 --> 00:09:40,250
Bytes is equal to float 64, and I'm going to get a pointer to key dot size.

141
00:09:43,070 --> 00:09:50,820
OK, and now we'll get the killer kilobytes KB is of the value of bytes divided by a thousand twenty

142
00:09:50,820 --> 00:09:56,310
four and megabytes is assigned the value of kilobytes divided by a thousand twenty four.

143
00:09:57,930 --> 00:09:59,730
And finally, let's create a variable.

144
00:09:59,730 --> 00:10:06,600
Current or current iteration is equal to file systems dot listing and populate its fields.

145
00:10:07,710 --> 00:10:11,220
So in this case, we do in fact have the E tag, which we haven't used yet.

146
00:10:11,310 --> 00:10:13,290
We might have used it in many, many.

147
00:10:13,290 --> 00:10:14,970
Oh, I can't remember, but we're going to use it here.

148
00:10:15,120 --> 00:10:22,410
OK, so the tag, which is specific to the current item in the bucket, and that's a pointer to key

149
00:10:23,050 --> 00:10:33,390
E-Tech and we want last modified, which is going to be equal to a pointer to key to last modified.

150
00:10:35,660 --> 00:10:41,660
And we want the key, which is the file name, which is a pointer to key dart key, and it could have

151
00:10:41,660 --> 00:10:42,320
called this item.

152
00:10:44,250 --> 00:10:46,260
And finally, size, which is megabyte.

153
00:10:47,530 --> 00:10:56,110
And then we spend our listing, are we a current to listing listing as equal to append listing and Kirk?

154
00:10:57,520 --> 00:10:57,840
OK.

155
00:10:58,630 --> 00:11:00,840
And then down here I return listing and nil.

156
00:11:01,330 --> 00:11:08,410
And that there's a lot more code than the Mineo equivalent, but it's the Amazon way of doing things.

157
00:11:08,650 --> 00:11:09,020
All right.

158
00:11:09,040 --> 00:11:11,950
We'll move on to the next method in the next lecture.

