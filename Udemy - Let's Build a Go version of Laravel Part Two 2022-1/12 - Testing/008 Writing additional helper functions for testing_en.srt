1
00:00:00,670 --> 00:00:06,460
So let's continue improving our testing functionality, and as I said earlier, basically all of the

2
00:00:06,460 --> 00:00:13,180
functionality you find in Laravel Dusk can easily be duplicated using GO and the broad package we use

3
00:00:13,190 --> 00:00:15,970
to grab a screenshot because it does more than take screenshots.

4
00:00:16,480 --> 00:00:22,570
So in this lecture, what I want to do is get started, say, emulating a mouse, click so you load

5
00:00:22,570 --> 00:00:26,560
a page with your your headless browser or the browser that's running in the background.

6
00:00:26,560 --> 00:00:31,990
As a part of this test, you select a particular element on the page, which happens to be a button

7
00:00:31,990 --> 00:00:37,360
or link, and you click on it and then you check to make sure that the expected action takes place after

8
00:00:37,360 --> 00:00:40,000
you click on the button and we'll just do a really simple test here.

9
00:00:40,810 --> 00:00:45,790
So to get started, if you look at the course resources for this lecture, you'll see a zip file called

10
00:00:45,790 --> 00:00:47,890
Tester Jet Zip.

11
00:00:48,400 --> 00:00:54,410
Download that and extract the zip file and copy the contents and then put them in here.

12
00:00:54,430 --> 00:00:59,860
I'll just copy and paste what I have on my clipboard, in The View's menu, in my app, or create a

13
00:00:59,860 --> 00:01:03,260
new file called Tester Dot Jet.

14
00:01:03,520 --> 00:01:05,440
And of course, you'll just drag yours in.

15
00:01:05,650 --> 00:01:07,530
But here's the contents of that file.

16
00:01:07,570 --> 00:01:09,640
It's a dead simple jet template.

17
00:01:10,300 --> 00:01:16,990
Basically, it displays a button that is labeled Click Me, and it has as in JavaScript void.

18
00:01:17,000 --> 00:01:19,810
It's actually a link, but it looks like a button because we're using bootstrap.

19
00:01:20,290 --> 00:01:21,580
It has the idea of clicker.

20
00:01:22,150 --> 00:01:29,230
And down here in the JavaScript, I'm listening for the click event on that particular element.

21
00:01:29,290 --> 00:01:34,120
And once it's clicked, it populates a certain div with the text clicked the button.

22
00:01:34,210 --> 00:01:34,870
Very simple.

23
00:01:34,990 --> 00:01:35,320
OK.

24
00:01:35,380 --> 00:01:36,100
So we have that.

25
00:01:37,090 --> 00:01:39,380
Let's now go over and add a handler for that.

26
00:01:39,420 --> 00:01:41,140
So go over to handlers dot go.

27
00:01:41,890 --> 00:01:43,330
It'll go to the bottom of that file.

28
00:01:44,460 --> 00:01:53,610
Look at a handler, so func h is the receiver pointer to handlers, and I'll call this one say clicker.

29
00:01:54,030 --> 00:01:57,870
It's simple enough and it's a handler, so we give it a standard two parameters.

30
00:02:02,850 --> 00:02:04,070
And this is dead simple.

31
00:02:04,080 --> 00:02:10,740
So we'll just say air is assigned the value of each dot rendered and we're going to render using W and

32
00:02:10,740 --> 00:02:17,670
R, the file tester, which we just created and no data is being passed to a new angle.

33
00:02:19,860 --> 00:02:24,120
And if the error is not equal to nil, then we'll do what we've done before.

34
00:02:24,120 --> 00:02:29,370
Just say h start at dot error log dot print line, whatever the error is.

35
00:02:29,490 --> 00:02:30,540
OK, so that'll render it.

36
00:02:31,440 --> 00:02:35,780
Now let's go to our roots file right here and at a right to it.

37
00:02:35,790 --> 00:02:37,440
And I'll put it right after the home page.

38
00:02:37,440 --> 00:02:42,660
So I'll duplicate that line and I'll call the root tester and it goes to the handler.

39
00:02:43,380 --> 00:02:43,700
OK.

40
00:02:45,600 --> 00:02:47,050
So let's make sure that worked well.

41
00:02:47,070 --> 00:02:51,330
Open up her terminal, go to the root level of the my app and take make start.

42
00:02:54,020 --> 00:02:59,000
And I should be able to go to local host Colin 4000 tester just to make sure it works.

43
00:02:59,210 --> 00:03:00,800
So it started, let's go to our browser.

44
00:03:02,540 --> 00:03:07,250
And I'll go to local host, 4000 tester.

45
00:03:08,390 --> 00:03:11,690
And there's the click me, and if I click on it now, I have some text.

46
00:03:11,780 --> 00:03:16,340
OK, so that's exactly what I hoped would happen now that we've done that.

47
00:03:16,610 --> 00:03:19,430
What I want to do next and I'll just hide this.

48
00:03:20,060 --> 00:03:27,320
What I want to do next is update our tests so that I can actually emulate clicking on that button and

49
00:03:27,320 --> 00:03:29,510
check the result right from a test.

50
00:03:29,510 --> 00:03:30,020
You can go.

51
00:03:31,260 --> 00:03:38,050
So to make that happen, what I'm going to do is rather than writing all the code right in our My App

52
00:03:38,070 --> 00:03:40,560
project is welcome back over to my desk file.

53
00:03:41,010 --> 00:03:43,260
So that's in this hilarious project.

54
00:03:43,260 --> 00:03:46,790
It's called dust up, though you might have call it something else, but that's what it is.

55
00:03:46,890 --> 00:03:51,450
We have one function in there right now, and that's just called take screenshot.

56
00:03:52,200 --> 00:03:57,720
Now, any time I'm working with Roard, of course you have to wind up typing all this long text right

57
00:03:57,720 --> 00:03:57,990
here.

58
00:03:58,050 --> 00:04:03,690
So I'm going to make a really simple function just that just fetches a page and returns the appropriate

59
00:04:03,690 --> 00:04:03,960
type.

60
00:04:04,620 --> 00:04:10,050
So I'll call this func with the receiver of C Pointer to celebrities and the name of this, and I'll

61
00:04:10,050 --> 00:04:10,800
capitalize it.

62
00:04:10,800 --> 00:04:11,600
So it's exploded.

63
00:04:11,610 --> 00:04:17,760
I'll just call it the fetch page, and it's going to take nothing more than page URL, which is a string,

64
00:04:18,360 --> 00:04:22,620
and it'll return a pointer to Rod Dot page

65
00:04:26,370 --> 00:04:28,440
and up here where I'm already doing this.

66
00:04:28,580 --> 00:04:31,560
I'll just copy this bit, which takes a page URL.

67
00:04:31,710 --> 00:04:38,820
So everything after the assignment operator, I return that we just say some typing, so that will actually

68
00:04:38,820 --> 00:04:43,680
return a pointer to product page, which we can use in our tests.

69
00:04:44,670 --> 00:04:50,730
And the other thing I'm going to do is write a really simple function folder, see pointer to celebrities,

70
00:04:51,540 --> 00:04:55,650
and I'll call this one select element by ID.

71
00:04:56,130 --> 00:05:01,430
And that will take a page, which is a pointer to Rodarte page as its first parameter.

72
00:05:01,980 --> 00:05:08,190
And then we'll take it, which is a string, and it will return a pointer to a product element.

73
00:05:10,260 --> 00:05:12,360
And this is as simple as saying return.

74
00:05:12,660 --> 00:05:15,750
And this is straight out of the raw documentation, which I'm going to look at in a minute.

75
00:05:16,200 --> 00:05:24,330
Page Dot must element by J.S. Now there's several ways to select things and share a number of ways to

76
00:05:24,330 --> 00:05:27,440
select elements from a given page in run.

77
00:05:27,540 --> 00:05:32,340
But I'm going to use the JavaScript approach because most of you are probably familiar with it.

78
00:05:32,430 --> 00:05:38,370
And what I want to select here is I want to go use JavaScript to say, you know, document don't get

79
00:05:38,370 --> 00:05:39,140
element by ID.

80
00:05:39,750 --> 00:05:47,340
So I'll use the format Esperanto package for function and my format string will be Document Dot, Get

81
00:05:47,610 --> 00:05:54,450
Element by ID. And then in single quotes, I'll put my placeholder percent as.

82
00:05:55,840 --> 00:05:57,520
And then I'll close my parentheses.

83
00:05:59,290 --> 00:06:06,040
And my substitution for that placeholder is I need in that should if I can find it, return that particular

84
00:06:06,040 --> 00:06:06,370
element.

85
00:06:06,820 --> 00:06:09,610
OK, so there's my two helper functions.

86
00:06:09,610 --> 00:06:14,740
And of course, if I was actually going to try to duplicate Laravel Dusk entirely, I would have many,

87
00:06:14,740 --> 00:06:20,350
many more helper elements because at the end of the day, for the most part, that's what dusk does

88
00:06:20,350 --> 00:06:28,120
is it actually wraps other packages and just gives convenience methods to access whatever functions

89
00:06:28,120 --> 00:06:30,010
you're looking for for your given test.

90
00:06:30,280 --> 00:06:30,580
OK.

91
00:06:30,850 --> 00:06:31,870
But we'll just do a few here.

92
00:06:31,870 --> 00:06:36,370
So this is enough to get us started now that these are available in the celebrities package.

93
00:06:36,820 --> 00:06:38,500
Let's go back to Handler's test.

94
00:06:38,530 --> 00:06:39,100
OK, go.

95
00:06:39,730 --> 00:06:44,740
And the first thing I'll do is I'll make sure my test doesn't fail this home test where I'm testing

96
00:06:44,740 --> 00:06:45,130
the home.

97
00:06:45,910 --> 00:06:51,340
So here I'm checking to see if the if I don't find submarine, then fail.

98
00:06:51,340 --> 00:06:53,950
Now Submarine doesn't exist on my homepage.

99
00:06:53,980 --> 00:06:56,680
But if you recall, it says, Go build something awesome.

100
00:06:56,860 --> 00:07:00,490
So I'll just put the word awesome in there and that will solve that problem.

101
00:07:00,700 --> 00:07:03,250
OK, so that test will pass now.

102
00:07:03,960 --> 00:07:05,500
Now I'll write another test.

103
00:07:05,690 --> 00:07:13,710
I'll put it right after the home test funk test clicker with the parameter of T pointer to test inky

104
00:07:16,120 --> 00:07:17,440
and give ourselves some room.

105
00:07:18,490 --> 00:07:19,990
So I'm going to get the roots.

106
00:07:19,990 --> 00:07:28,030
So I'll say roots is assign the value of get roots now in order to test the one that we just created

107
00:07:28,300 --> 00:07:29,860
that slash tester.

108
00:07:29,890 --> 00:07:31,240
Let's go over to our roots file.

109
00:07:32,730 --> 00:07:42,240
And that in our test routes must get tested and its test handlers dot clicker there.

110
00:07:42,420 --> 00:07:44,940
Now it will be available to me because I'm going to need it in a minute.

111
00:07:45,120 --> 00:07:46,740
So back to handlers underscore test.

112
00:07:46,740 --> 00:07:49,400
I've got my roots and let's spin up a Telus server.

113
00:07:49,410 --> 00:07:51,600
So that's as simple as tests is assigned.

114
00:07:51,600 --> 00:07:57,930
The value of the GTB test got new TLC server with roots.

115
00:07:59,070 --> 00:08:03,930
So now I have that and we'll defer to stock closed as we should.

116
00:08:05,320 --> 00:08:11,630
Now I want to fetch that page from that new TLC server I just spun up named piece.

117
00:08:11,850 --> 00:08:14,300
Now that I have that helper function, it's hilarious.

118
00:08:14,320 --> 00:08:23,460
I can see my page is assigned the value of Cell Dot such page and I hand it to us dot URL plus slash

119
00:08:23,460 --> 00:08:23,880
tester.

120
00:08:25,950 --> 00:08:27,360
OK, so that gives me the page.

121
00:08:28,400 --> 00:08:33,770
And now from that page, I actually want to make sure that the first time that pages are displayed,

122
00:08:34,100 --> 00:08:41,059
and if we look at the tester file again, that this output deals the deal with the idea of output that

123
00:08:41,150 --> 00:08:47,600
doesn't have any text OK or doesn't have the text that I knew shouldn't be there.

124
00:08:47,690 --> 00:08:49,010
That's probably a better way to put it.

125
00:08:49,160 --> 00:08:50,630
That means I need to select that element.

126
00:08:51,110 --> 00:08:57,050
So I'll say output element because I want to select that element is going to be assigned the value of

127
00:08:57,260 --> 00:09:00,860
from Cell Dot Select Element by it.

128
00:09:01,280 --> 00:09:05,300
And I hand it my page page, which I just got to the previous line.

129
00:09:05,690 --> 00:09:08,750
And what I'm looking for, I'm looking for the element with the idea of output.

130
00:09:09,530 --> 00:09:14,240
So now I have my output element and I'm also going to, of course, I'm going to have to select the

131
00:09:14,240 --> 00:09:16,160
button because I'm I want to click on it in a minute.

132
00:09:16,160 --> 00:09:22,400
So that button, if you look at the test jet tester jet, while it has the idea of clicker, so I may

133
00:09:22,400 --> 00:09:23,210
as well select that.

134
00:09:23,990 --> 00:09:29,870
So I'll say my button is assigned the value of Cell Dot Select Element by it.

135
00:09:30,860 --> 00:09:34,250
And again, it's page and I'm looking for a clicker.

136
00:09:36,170 --> 00:09:37,760
Now I have both the things that I need.

137
00:09:38,690 --> 00:09:44,780
So first of all, how do I check to see if that particular output element?

138
00:09:45,170 --> 00:09:48,050
Does it contain the text that shouldn't be there?

139
00:09:48,440 --> 00:09:49,760
And it's as simple as this?

140
00:09:50,030 --> 00:09:54,830
First of all, I'll grab the HTML from just that element output element.

141
00:09:54,830 --> 00:10:01,340
If I can do that by saying test HTML and I'll ignore the error, which I probably shouldn't, but I'm

142
00:10:01,340 --> 00:10:01,790
going to.

143
00:10:02,690 --> 00:10:07,790
I just call output element dot HTML built right into that package.

144
00:10:08,330 --> 00:10:10,850
So now I have the HTML from that element.

145
00:10:10,910 --> 00:10:23,030
And I can say if Strings Dot contains and I'm searching test HTML and I'm looking for clicked the button

146
00:10:24,680 --> 00:10:31,010
because if we go back over to tester dot jet, if you look at the JavaScript, when someone clicks on

147
00:10:31,010 --> 00:10:36,140
that button, I put click the button exclamation mark and I can just put a part of that text was sufficient

148
00:10:36,140 --> 00:10:45,320
for my purposes, so I left the exclamation mark out then to error found text that should not be there,

149
00:10:46,850 --> 00:10:50,570
which isn't a great message, but you get the idea you can put whatever you want in there.

150
00:10:50,600 --> 00:10:53,300
So now at that point, if I pass this.

151
00:10:54,440 --> 00:11:01,280
Then I know the first time that pages rendered before anyone clicks on the link, then this is this

152
00:11:01,280 --> 00:11:03,980
is exactly as it should be, that text should not be there.

153
00:11:04,610 --> 00:11:05,750
Now let's click on that button.

154
00:11:05,900 --> 00:11:11,720
And that's as simple as saying Button, which I selected right up there in line four to three must click.

155
00:11:13,100 --> 00:11:14,090
Now I click the button.

156
00:11:14,450 --> 00:11:14,870
OK.

157
00:11:16,000 --> 00:11:22,240
Now, after that happens, I can actually check the new version of the HTML because I'm working with

158
00:11:22,240 --> 00:11:25,270
a pointer to that page and I'm working with a punch of the output element.

159
00:11:25,570 --> 00:11:30,130
So once that button is clicked, the contents of that deal should have changed.

160
00:11:30,190 --> 00:11:33,960
Let's make sure it did test HTML, and I know this is wordy.

161
00:11:33,970 --> 00:11:37,440
I could make this shorter than it is right now, but I want to make it really readable.

162
00:11:38,000 --> 00:11:43,210
Testing test H.M. And again, I'll ignore the error, and this time I use the up the equals operator

163
00:11:43,540 --> 00:11:52,460
again as equal to output element dot html and I just write another test if strings dot contains.

164
00:11:52,480 --> 00:11:54,700
But this time I want to put the nut operator.

165
00:11:54,850 --> 00:12:02,050
So in other words, if it doesn't contain this and again, I'm looking at test html and I'm looking

166
00:12:02,050 --> 00:12:04,570
for clicked the button.

167
00:12:05,920 --> 00:12:07,860
If it's not there, then fail.

168
00:12:07,870 --> 00:12:10,240
So I'll just copy this error message or this.

169
00:12:11,490 --> 00:12:17,280
Error pasted here and say did not find

170
00:12:20,880 --> 00:12:22,170
text that should be there.

171
00:12:26,940 --> 00:12:29,100
So let's run the tests of my terminal.

172
00:12:30,120 --> 00:12:31,290
I'll clear the screen.

173
00:12:31,860 --> 00:12:37,320
Change into the handler's folder and right go test dot.

174
00:12:44,430 --> 00:12:48,700
And all of the tests passed, now, let's make sure it's actually doing what it's supposed to.

175
00:12:49,320 --> 00:12:54,120
Let's change that last comparison this this firm line 52 to 54.

176
00:12:54,570 --> 00:12:59,520
Let's change what it's looking for and change this to say fish.

177
00:13:00,150 --> 00:13:01,320
This time, the Teshie failed.

178
00:13:07,160 --> 00:13:07,980
And there it is.

179
00:13:08,000 --> 00:13:11,060
We got that little handshake warning, and you always get that, just ignore it.

180
00:13:11,510 --> 00:13:13,880
But the test failed as it should have.

181
00:13:14,360 --> 00:13:14,780
Perfect.

182
00:13:14,840 --> 00:13:16,010
So let me change this back.

183
00:13:16,040 --> 00:13:17,120
I'll just undo this.

184
00:13:18,180 --> 00:13:25,220
OK, it's back to where it was before, and I just have a quick look over in my web browser at the kinds

185
00:13:25,220 --> 00:13:26,720
of things you can do here.

186
00:13:26,750 --> 00:13:33,560
So I'll go back to the raw documentation and you'll see here under, for example.

187
00:13:35,500 --> 00:13:41,710
Selectors, you have lots of different ways of selecting things by text content, by experts, by JavaScript,

188
00:13:41,710 --> 00:13:42,730
and that's the one we use.

189
00:13:42,910 --> 00:13:44,290
You can select a list of elements.

190
00:13:44,290 --> 00:13:46,300
You can traverse the tree and on and on it goes.

191
00:13:46,930 --> 00:13:50,920
You also have all kinds of events you can wait for, so you can wait for an event.

192
00:13:50,920 --> 00:13:52,450
You can get the details of an event.

193
00:13:52,450 --> 00:13:56,890
You could handle multiple events, you can look at the list of available events, and there are many

194
00:13:56,890 --> 00:13:57,730
to choose from.

195
00:13:58,030 --> 00:14:00,890
Here's one You'll be using a fair bit input.

196
00:14:01,180 --> 00:14:01,600
You can.

197
00:14:01,630 --> 00:14:03,520
You can use most clicks, which we did.

198
00:14:03,760 --> 00:14:05,740
You can also type text into a form.

199
00:14:05,740 --> 00:14:07,360
You can remove text from a form.

200
00:14:07,360 --> 00:14:09,340
You can do time inputs, checkboxes.

201
00:14:09,700 --> 00:14:13,210
So basically everything you possibly want to use.

202
00:14:13,330 --> 00:14:19,420
As far as I can tell after a quick look at it at all is probably available to you here in the RON package,

203
00:14:19,420 --> 00:14:24,850
and hopefully the couple of things we implemented is enough to point you in the right direction.

204
00:14:24,940 --> 00:14:27,100
It's remarkably easy to use.

205
00:14:27,490 --> 00:14:29,200
All right, let's move on.

