1
00:00:01,180 --> 00:00:05,860
So in this section of the course, what we're going to focus upon is making it easier for developers

2
00:00:05,860 --> 00:00:08,440
using celebrities to write their tests.

3
00:00:08,920 --> 00:00:11,270
And a lot of people overlook writing tests.

4
00:00:11,270 --> 00:00:12,280
They think it's too much work.

5
00:00:12,280 --> 00:00:13,350
They don't see the benefit.

6
00:00:13,360 --> 00:00:19,930
But anyone who's written them realizes that writing good tests makes maintaining your code ever so much

7
00:00:19,930 --> 00:00:23,920
easier and actually cuts down on development time as time goes on.

8
00:00:24,700 --> 00:00:29,620
So let's get started, and we'll focus on is writing tests for the most difficult part of most web applications.

9
00:00:29,650 --> 00:00:31,750
And that, of course, is the handler's package.

10
00:00:32,500 --> 00:00:39,850
So what I'm going to do is write the necessary tests that we want to include right in my app, and then

11
00:00:39,850 --> 00:00:46,420
we'll just add those stub test files to the repository that we clone when someone types celebrity's

12
00:00:46,420 --> 00:00:48,190
new whatever the project name is.

13
00:00:48,790 --> 00:00:54,460
So over in my app, inside the handlers folder, the very first thing I'm going to do is create a new

14
00:00:54,460 --> 00:00:56,680
go file and it has to be named.

15
00:00:56,680 --> 00:01:00,040
This setup underscore test, not go.

16
00:01:01,320 --> 00:01:06,600
And of course, what this does is set up our testing environment, and we're going to do it using a

17
00:01:06,600 --> 00:01:12,210
function called Test Me that was introduced to go, I think, around version one point four or five.

18
00:01:12,300 --> 00:01:13,470
But it's incredibly useful.

19
00:01:14,620 --> 00:01:22,030
So let's read a function thunk that has to be called test me exactly like that, and it takes one parameter

20
00:01:22,030 --> 00:01:27,910
which I'm going to call em up type points or two testing dot in thirties.

21
00:01:30,160 --> 00:01:36,550
So everything we do in the test main function will execute before the actual test suite runs, and I

22
00:01:36,550 --> 00:01:42,070
need to set up things that are going to be required in order for our handlers to function.

23
00:01:42,370 --> 00:01:49,060
So things like the session, the celebrity's variable, our views are renderer things like that, and

24
00:01:49,060 --> 00:01:53,530
it will seem like a fair bit of duplication of code from the main application itself.

25
00:01:53,710 --> 00:01:59,320
And it is, but we this allows us to isolate our tests and to only test the things we want to test.

26
00:02:00,340 --> 00:02:05,530
So a couple of things that I'll put in, we may not use them, but someone writing tests down the road

27
00:02:05,530 --> 00:02:07,690
with more complex handlers probably will.

28
00:02:08,139 --> 00:02:09,340
I'll set up an info log.

29
00:02:09,430 --> 00:02:11,320
Actually, let me declare a few variables first.

30
00:02:11,740 --> 00:02:19,600
So I'm going to declare a variable called self, and that is of type celebrities, not celebrities.

31
00:02:20,380 --> 00:02:20,740
OK.

32
00:02:21,760 --> 00:02:24,880
And I'll also declare one called test session.

33
00:02:25,960 --> 00:02:32,740
And of course, that's going to be a pointer to a session manager, and I'll declare another one called

34
00:02:32,740 --> 00:02:33,310
handlers.

35
00:02:34,030 --> 00:02:40,600
Test handlers were test handlers, and we'll need these in order to run our handler tests of type handlers.

36
00:02:41,050 --> 00:02:41,410
OK.

37
00:02:43,290 --> 00:02:46,020
Now, what are some of the things that we need to do in here?

38
00:02:46,050 --> 00:02:48,170
Well, to start with, let's set up some loggers.

39
00:02:48,180 --> 00:02:54,960
We might not use them, but it's nice to have them info log and that's a sign the value of long up new.

40
00:02:56,550 --> 00:02:59,520
And it writes to us, don't stand out.

41
00:03:03,920 --> 00:03:15,650
And will prefix it with info and a tab and will include in it logged date and a python and logged time.

42
00:03:16,370 --> 00:03:20,150
OK, now duplicate that just to save some typing and make this one error log.

43
00:03:22,700 --> 00:03:32,760
And this will be prefixed with error and we'll put in log l date log l time and also will pipe log dot

44
00:03:32,790 --> 00:03:34,070
short l short file.

45
00:03:35,240 --> 00:03:35,530
OK.

46
00:03:35,570 --> 00:03:37,580
Just to give us line numbers when there's errors.

47
00:03:38,300 --> 00:03:40,130
So those are the first two things I'm going to need.

48
00:03:40,700 --> 00:03:46,010
I'm also obviously going to need a session because any web application out there is going to use sessions

49
00:03:46,010 --> 00:03:46,760
of some sort.

50
00:03:46,850 --> 00:03:50,870
So test session variable we declared right up on Line 12.

51
00:03:51,470 --> 00:03:57,110
That's going to be equal to new and we'll just use the default cookie based session and we'll set up

52
00:03:57,110 --> 00:04:01,430
some reasonable defaults test session, dart lifetime.

53
00:04:01,820 --> 00:04:04,130
And I'll make that again lifetime.

54
00:04:04,760 --> 00:04:08,420
And we'll make that equal to twenty four times timed out.

55
00:04:10,160 --> 00:04:10,490
OK.

56
00:04:11,660 --> 00:04:12,440
And cookies.

57
00:04:12,650 --> 00:04:14,660
Test session, cookie.

58
00:04:16,910 --> 00:04:17,990
Don't persist.

59
00:04:18,110 --> 00:04:23,660
Oh my God, good true and test session, not cookie.

60
00:04:24,890 --> 00:04:29,930
That same site will make that equal to HGTV Dot same site lax mode.

61
00:04:33,190 --> 00:04:38,880
And test session, the cookie that's secure will make that equal to thoughts.

62
00:04:38,920 --> 00:04:40,120
Those were just running tests here.

63
00:04:42,550 --> 00:04:45,220
So we need that there's our session variable.

64
00:04:45,580 --> 00:04:50,380
Now let's create our views, our Jet Dot news set, so I'll create a variable.

65
00:04:50,530 --> 00:04:55,210
Views equals jet dot new set.

66
00:04:58,430 --> 00:05:00,770
And I'll put this on separate lines, so it's more readable.

67
00:05:01,520 --> 00:05:09,980
The first line will be Jet Dot New OS file system letter, and we'll give it the correct path to where

68
00:05:09,980 --> 00:05:13,590
our user store, which is actually up one level views.

69
00:05:14,390 --> 00:05:14,640
OK.

70
00:05:16,700 --> 00:05:20,180
And we'll have Jet Dart in development mode.

71
00:05:22,700 --> 00:05:28,490
All right, there's our views now I can use that to create a renderer which I'm going to need to use

72
00:05:28,490 --> 00:05:29,330
to render pages.

73
00:05:29,390 --> 00:05:31,310
So I'll just call this my ringer.

74
00:05:33,790 --> 00:05:39,640
And that will be a sign the value of from the render package in our Celebrity House project or our project

75
00:05:40,330 --> 00:05:40,930
don't render.

76
00:05:43,500 --> 00:05:45,240
And I'll specify the things that we want.

77
00:05:45,810 --> 00:05:55,590
So renderer that will be equal to jet and route pass and that will be assigned the value of up one level

78
00:05:55,590 --> 00:05:56,100
slash.

79
00:05:58,320 --> 00:06:03,870
And the port has 4000, which isn't going to be used, but I'll just specify it anyway.

80
00:06:05,240 --> 00:06:06,350
Now, of course, that's a string.

81
00:06:09,680 --> 00:06:10,790
And jet views.

82
00:06:11,780 --> 00:06:15,020
And that's the sign, the value of use, the variable we just set out.

83
00:06:16,990 --> 00:06:22,630
And our session, of course, that's going to be test session, which we defined just a few minutes

84
00:06:22,630 --> 00:06:22,900
ago.

85
00:06:23,680 --> 00:06:24,580
So now I have my render.

86
00:06:25,820 --> 00:06:31,460
Now, I can use this to specify what celebrities is going to be the sole variable and that will be equal

87
00:06:31,460 --> 00:06:32,690
to celebrities.

88
00:06:34,790 --> 00:06:41,840
Dot celebrities and we just populate its fields, so apni, we don't need this, but I'll put my app

89
00:06:41,840 --> 00:06:42,170
in there.

90
00:06:44,650 --> 00:06:48,760
And debug, I'll make that trip useful during testing.

91
00:06:49,300 --> 00:06:51,470
Version immaterial, but I'll put it in any way.

92
00:06:51,490 --> 00:06:55,420
One point zero point zero Error log.

93
00:06:56,020 --> 00:06:59,380
And that's going to be equal to the error log we defined right at the start of this function.

94
00:07:01,270 --> 00:07:03,910
Info log will be the info log we defined.

95
00:07:06,410 --> 00:07:07,220
Route path.

96
00:07:07,310 --> 00:07:08,150
This is important.

97
00:07:08,240 --> 00:07:10,370
Dot, dot, slash or nothing will work.

98
00:07:12,730 --> 00:07:13,170
Roots.

99
00:07:13,720 --> 00:07:22,330
I'll make that deal for now, and we'll set it up later on, my renderer is a reference to my renderer

100
00:07:23,710 --> 00:07:27,490
because it has to be a pointer session is test session.

101
00:07:31,690 --> 00:07:40,150
And it does require some kind of debate, so in here, I'll just put an empty, solicitous dot database

102
00:07:40,240 --> 00:07:42,370
like that, and that's sufficient for our purposes.

103
00:07:43,990 --> 00:07:49,750
Jet views will be equal to views encryption key.

104
00:07:50,320 --> 00:07:51,880
I can just make that a random string.

105
00:07:51,890 --> 00:07:54,430
It doesn't matter because it'll change every time we run a test.

106
00:07:55,690 --> 00:07:57,040
So I'll make this around.

107
00:07:57,040 --> 00:07:58,600
No random value.

108
00:07:59,140 --> 00:08:04,960
Sell the random string that needs to be exactly 32 characters long, so that'll suffice for our purposes.

109
00:08:06,160 --> 00:08:07,630
Cash will make nil.

110
00:08:07,660 --> 00:08:08,680
It could just leave that empty.

111
00:08:08,680 --> 00:08:13,140
But you know, people will want to change this as they're writing their own tests scheduler.

112
00:08:13,150 --> 00:08:14,410
I'll make that Neal as well.

113
00:08:15,580 --> 00:08:18,940
Mail, I'll make an empty mail or mail.

114
00:08:23,650 --> 00:08:27,250
And server and that will be celebrities.

115
00:08:29,290 --> 00:08:32,080
Dot server, and we'll leave that empty as well.

116
00:08:33,610 --> 00:08:39,760
OK, so now we have that set up, the next thing we need to do to be able to test our handlers is to

117
00:08:39,760 --> 00:08:46,060
make test handlers app equal to a reference to celebrities are so variable.

118
00:08:48,310 --> 00:08:57,400
And now the magic in Test main, of course, is when you call Osaka exit and we exit M run.

119
00:08:57,430 --> 00:09:03,640
And what this will do is run all of the tests that are in this directory after these values are set

120
00:09:03,640 --> 00:09:05,770
up and then it will exit when things are finished.

121
00:09:06,010 --> 00:09:10,450
OK, so that's the first thing we're going to do is set up this test main variable.

122
00:09:10,690 --> 00:09:15,010
In the next lecture, we'll set up a couple of functions that will make our lives easier as well.

123
00:09:15,070 --> 00:09:16,660
One to set up the roots, they said.

124
00:09:16,660 --> 00:09:18,940
We're not going to use the actual rootstock go file.

125
00:09:19,870 --> 00:09:25,660
We'll just put in the roots we want to test and also managing the context so that we have access to

126
00:09:25,660 --> 00:09:31,000
the session in the tests when we need to have that access and we'll get started on that in the next

127
00:09:31,000 --> 00:09:31,390
election.

