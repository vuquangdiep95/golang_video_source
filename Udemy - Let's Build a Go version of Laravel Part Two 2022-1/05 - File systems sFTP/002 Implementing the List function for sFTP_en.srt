1
00:00:01,290 --> 00:00:07,320
So we have the put functionality for us ready to go more or less, we still have to think about this

2
00:00:07,410 --> 00:00:09,780
folder parameter that we're not using.

3
00:00:09,860 --> 00:00:11,010
We'll come back to that later on.

4
00:00:11,400 --> 00:00:14,430
Let's move on and take care of list now.

5
00:00:14,460 --> 00:00:15,720
List is pretty straightforward.

6
00:00:15,810 --> 00:00:21,120
We're going to have our variable listing, which is a slice of types, file system listings.

7
00:00:21,120 --> 00:00:22,080
So that doesn't change.

8
00:00:22,110 --> 00:00:23,620
And we're going to return listing in nil.

9
00:00:23,640 --> 00:00:25,710
It's all this stuff in between that we have to worry about.

10
00:00:26,640 --> 00:00:29,040
So once again, we're going to need a client that's up to be client.

11
00:00:29,040 --> 00:00:33,820
So client and error come from just like before they start.

12
00:00:33,840 --> 00:00:36,600
Get credentials and we check for an error.

13
00:00:36,930 --> 00:00:40,650
If error is not equal to nil, then we'll return the error.

14
00:00:42,570 --> 00:00:47,910
So a return listing and we'll return the error.

15
00:00:50,510 --> 00:00:55,700
And we needed to defer client closing once again, so defer client thought close just to make sure that

16
00:00:56,030 --> 00:00:57,740
a safety B connection is closed.

17
00:00:59,520 --> 00:01:05,970
Now, let's get our directory listing, and that's pretty straight forward with the SFO client will

18
00:01:05,970 --> 00:01:12,900
say files in error are assigned value from calling client dot reader.

19
00:01:13,050 --> 00:01:21,360
Read Dear right there and the direction we want to read, of course, is our prefix, the one parameter

20
00:01:21,360 --> 00:01:22,500
we get in this function.

21
00:01:22,620 --> 00:01:26,130
So that'll give us a listing for a particular directory on the remote server.

22
00:01:28,040 --> 00:01:28,950
And we checked for an error.

23
00:01:29,000 --> 00:01:34,100
So again, I'll copy my error, check right here and paste it right here.

24
00:01:35,840 --> 00:01:38,150
And if we get past that, then we just range through the files.

25
00:01:38,150 --> 00:01:40,230
So for we don't care about the index.

26
00:01:40,250 --> 00:01:43,970
We do care about the current item, which I'll just call X. You can call it whatever you want.

27
00:01:44,720 --> 00:01:51,920
Those are assigned values by ranging through files, and all we do is, as usual, create an item variable

28
00:01:52,160 --> 00:01:56,150
and that will be a type file systems dot listing.

29
00:01:59,030 --> 00:02:03,500
And again, we want to check to make sure that we're only going to show the files we want to show,

30
00:02:03,500 --> 00:02:07,850
so we don't want anything that starts with a dot because that might be a hidden file.

31
00:02:07,850 --> 00:02:15,980
So if not, strings Dot has prefix and we're looking at x dot name.

32
00:02:16,130 --> 00:02:18,860
The name of the file, it's not called key by this package.

33
00:02:18,860 --> 00:02:19,520
It's called name.

34
00:02:19,520 --> 00:02:24,080
But that's exactly what we're looking at is the file name, and we're looking for a dot as a prefix.

35
00:02:24,620 --> 00:02:30,560
So if it doesn't have that, then we want to actually once again calculate the size of the file exactly

36
00:02:30,560 --> 00:02:31,550
like we did before.

37
00:02:31,970 --> 00:02:33,620
B is assigned the value of float.

38
00:02:33,620 --> 00:02:40,580
Sixty four, we're going to cast it to that exact size and that's built right into the item type that

39
00:02:40,580 --> 00:02:43,760
we're getting back and we'll figure out what kilobits are.

40
00:02:44,750 --> 00:02:49,370
Kilobytes is assigned the value of B divided by 1024,

41
00:02:53,300 --> 00:02:58,760
and then we convert it into megabytes, and that's a sign of value of kilobytes divided by one thousand

42
00:02:58,760 --> 00:02:59,420
twenty four.

43
00:03:01,190 --> 00:03:06,470
And now we populate the various fields in item, which is a type file system dot listing.

44
00:03:06,800 --> 00:03:11,300
So Item Dot key, that's the name that's going to be equal to extort name.

45
00:03:13,280 --> 00:03:17,760
Item size is equal to megabytes MBIE.

46
00:03:19,160 --> 00:03:20,720
Item Dot last modified.

47
00:03:21,230 --> 00:03:23,660
That's going to be equal to extort mod time.

48
00:03:24,530 --> 00:03:28,130
The modification time and now we want to see if it's a directory or not.

49
00:03:28,580 --> 00:03:29,900
Item Dot is dear.

50
00:03:31,250 --> 00:03:34,820
There's equal to export and it fortunately has a function called is dear.

51
00:03:34,850 --> 00:03:38,300
And that tells me if the entry in the current entry is a directory or not.

52
00:03:38,840 --> 00:03:41,990
And then we append our item to listing.

53
00:03:42,710 --> 00:03:50,870
Listing equals append listing and item, and all we do next is return.

54
00:03:51,380 --> 00:03:52,630
We already have that line, I think.

55
00:03:52,640 --> 00:03:53,270
Yes, we do.

56
00:03:53,780 --> 00:03:59,180
We return the listing and no error, and that should be it for the list functionality, and we'll test

57
00:03:59,180 --> 00:04:00,650
this out at the end of this section.

58
00:04:00,950 --> 00:04:02,210
But for right now, let's move on.

