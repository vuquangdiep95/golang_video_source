1
00:00:00,930 --> 00:00:02,610
So let's implement the list function.

2
00:00:02,730 --> 00:00:10,290
And if you look in the file system, stock go file list requires a prefix to string and returns a slice

3
00:00:10,290 --> 00:00:11,980
of listings and potentially an error.

4
00:00:12,030 --> 00:00:13,950
So let's implement that and it's pretty simple.

5
00:00:15,300 --> 00:00:20,940
So in maniacal, I'll add the function func with a receiver m pointer to the mean IO and this one's

6
00:00:20,940 --> 00:00:30,500
called list, and it takes one argument prefix, which is a string, and it returns a slice of file

7
00:00:30,510 --> 00:00:33,210
systems dot listing.

8
00:00:34,180 --> 00:00:38,380
And it should find it for me, filesystems the listing.

9
00:00:38,920 --> 00:00:39,910
Why aren't you finding that?

10
00:00:41,020 --> 00:00:42,850
Systems, why?

11
00:00:43,210 --> 00:00:49,660
Because you're misspelling file systems, file systems, listing and potentially in error.

12
00:00:52,900 --> 00:01:00,430
OK, so let's create a variable to store results in VAR listing, which is going to be a slice of file

13
00:01:00,430 --> 00:01:01,840
system store listing.

14
00:01:03,100 --> 00:01:12,760
And let's get our context X and cancel come from context dot with cancel, and we'll just take context,

15
00:01:13,060 --> 00:01:18,430
background as usual and defer cancel.

16
00:01:21,150 --> 00:01:27,630
Now, let's get our client, and I can just copy this line right here and paste it in here.

17
00:01:28,650 --> 00:01:37,320
So now we have our client, now we want to call the function list of objects on the variable client.

18
00:01:37,650 --> 00:01:42,270
And we're going to store the result in a variable or call object C-H.

19
00:01:43,020 --> 00:01:43,860
We'll see why in a minute.

20
00:01:44,820 --> 00:01:54,570
Client Dot and we want list objects and that requires the context c, t x and it requires our bucket,

21
00:01:54,630 --> 00:01:57,630
which I get from my receiver bucket.

22
00:01:59,310 --> 00:02:00,810
And then it requires some options.

23
00:02:01,140 --> 00:02:06,330
I mean, I o dot list object options versus to find them in line like we did last time.

24
00:02:06,330 --> 00:02:11,430
But this one doesn't require a pointer, so a prefix is the first required field and that's just our

25
00:02:11,430 --> 00:02:11,940
parameter.

26
00:02:11,940 --> 00:02:15,600
We received prefix and it also requires recursive.

27
00:02:16,710 --> 00:02:17,730
And I'm going to say true.

28
00:02:17,820 --> 00:02:19,980
Give me everything you find in that bucket.

29
00:02:20,190 --> 00:02:21,930
OK, which is good enough for our purposes.

30
00:02:22,710 --> 00:02:30,030
So list objects, as you can see right here, returns into a channel object info.

31
00:02:30,330 --> 00:02:32,280
That's why I put suture because it's a channel.

32
00:02:32,760 --> 00:02:33,120
OK.

33
00:02:35,380 --> 00:02:41,590
Now we're going to get one or none or more than one objects back, so we better range through our Channel

34
00:02:41,860 --> 00:02:47,770
four object, which is just a variable I'm declaring right now is a sign the value of raging through

35
00:02:47,830 --> 00:02:48,610
our object channel.

36
00:02:51,520 --> 00:02:53,770
And we'll check for an error if object

37
00:02:57,050 --> 00:03:00,730
dot e r, which is built right into the type we're getting back.

38
00:03:01,000 --> 00:03:04,840
If it's not equal to nil, then I'll print out the error.

39
00:03:05,050 --> 00:03:15,820
Format dot print line object dot error and I'll return listing, which is currently empty if this error

40
00:03:15,820 --> 00:03:19,900
occurs the first time through Amber Watcher in the error object error.

41
00:03:20,740 --> 00:03:23,800
OK, but if there is no error, then we can keep going.

42
00:03:26,050 --> 00:03:33,820
Now, in some cases, you might have something that starts with a dot, and I don't want to return any

43
00:03:33,820 --> 00:03:38,230
variable names or any names that begin with a dot because these are typically hidden files.

44
00:03:39,160 --> 00:03:48,220
So I'll say, if not using the strings package strings dot has prefix right there, and the name of

45
00:03:48,220 --> 00:03:52,470
the file will be stored in the field called key object key.

46
00:03:54,050 --> 00:04:02,380
I'm looking for a dot, so if it doesn't start with a dot, then I need to return everything that's

47
00:04:02,380 --> 00:04:05,770
in file systems dot listing and that includes the E tag.

48
00:04:06,580 --> 00:04:12,160
The date last modified the name of the file, which is called key and also size.

49
00:04:12,280 --> 00:04:16,060
But I want size to be, you know, pretty consistent.

50
00:04:16,060 --> 00:04:22,690
So I'll use megabytes as my file size format, so I'll declare a variable called B, and I'll a sign

51
00:04:22,690 --> 00:04:30,250
that the value of converting it to a float sixty four, because that's the type I'm storing in my listings

52
00:04:30,250 --> 00:04:30,580
type.

53
00:04:31,510 --> 00:04:33,040
Object size.

54
00:04:34,570 --> 00:04:34,930
OK.

55
00:04:36,790 --> 00:04:39,710
And then I'll convert that to kilobits kilobytes.

56
00:04:39,880 --> 00:04:44,860
Assign the value of bytes divided by a thousand twenty four is what we get back or bytes.

57
00:04:45,340 --> 00:04:53,140
And then I'll declare a variable called megabytes MBIE, which is equal to kilobytes divided by a thousand

58
00:04:53,140 --> 00:04:53,770
twenty four.

59
00:04:53,920 --> 00:04:54,580
Simple math.

60
00:04:54,820 --> 00:05:01,770
OK, and now I'll create an item new variable and it will be of type file systems, dot listing and

61
00:05:01,780 --> 00:05:02,920
I'll just populate its fields.

62
00:05:04,000 --> 00:05:08,320
So we want E tag and that comes from object dot e tag.

63
00:05:13,680 --> 00:05:19,950
We also want the date last modified, which I called last modified mass just object last modified.

64
00:05:21,870 --> 00:05:30,210
We want the name of the file, which is called key object key to an object key.

65
00:05:31,350 --> 00:05:36,120
And finally, we want the size, which is now in a variable called megabytes me.

66
00:05:37,620 --> 00:05:38,550
So I have my item.

67
00:05:38,760 --> 00:05:42,690
Let's just append that to our slice of results listing, which is that variable.

68
00:05:42,690 --> 00:05:49,680
I declared right at the start of this function on line 52 is equal to append listing an item.

69
00:05:51,800 --> 00:05:56,380
And once I get outside of this for loop, I simply return listing.

70
00:05:56,610 --> 00:05:57,000
And no.

71
00:05:59,010 --> 00:06:02,130
So that should do it for listing a remote file system.

72
00:06:02,130 --> 00:06:07,830
In this case, a Mineo file system, which is functionally equivalent to an Amazon S3 bucket, but it

73
00:06:07,830 --> 00:06:08,880
has its own client.

74
00:06:09,510 --> 00:06:15,750
Now, in theory, you could use Amazon's SDK, its package to connect to Mineo, and it would work fine.

75
00:06:16,140 --> 00:06:19,530
But I'd like to use the right client for the right tool.

76
00:06:19,530 --> 00:06:21,120
So we're working with Mineo.

77
00:06:21,120 --> 00:06:23,100
We'll use the mini tool later on.

78
00:06:23,100 --> 00:06:29,430
When we go to an S3 bucket or some version thereof, we'll use Amazon's package for connecting.

79
00:06:29,640 --> 00:06:29,940
OK.

80
00:06:30,000 --> 00:06:33,510
So in the next lecture, we'll move on to implementing the next required function.

