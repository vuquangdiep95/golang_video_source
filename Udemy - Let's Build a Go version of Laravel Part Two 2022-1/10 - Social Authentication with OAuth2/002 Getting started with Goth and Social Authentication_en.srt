1
00:00:01,569 --> 00:00:06,160
So before we can actually try a Single Sign-On, there's a fair number of things we have to do.

2
00:00:06,190 --> 00:00:08,560
None of them are terribly difficult, but there's a lot of steps.

3
00:00:08,830 --> 00:00:13,450
Now, if you're following along the same way that I'm doing things right now, one of the things you

4
00:00:13,450 --> 00:00:16,329
did at the end of the last section was run make us.

5
00:00:16,540 --> 00:00:24,610
And that command installed some views like, for example, the log inkjet file and the reset password.

6
00:00:24,880 --> 00:00:31,150
Yet and it also installed the auth handlers file up here and some models inside the data folder.

7
00:00:31,840 --> 00:00:34,660
Now, if you didn't do that, please do it right now.

8
00:00:34,840 --> 00:00:40,390
Just run the existing celebrity's app as it existed at the end of the last section, and that will create

9
00:00:40,390 --> 00:00:44,470
the necessary database tables and put the handlers file and all those things in there.

10
00:00:44,620 --> 00:00:50,410
And once you have that done, or if you already have it done, go to the course resources for this lecture

11
00:00:50,590 --> 00:00:57,460
and download the file called Log In Jet Dot Zip and open it up in your favorite text editor and copy

12
00:00:57,460 --> 00:01:02,440
the contents and then come back here to your I.D. and inside the My App folder.

13
00:01:02,890 --> 00:01:06,280
Inside The View's folder open up Log Inkjet.

14
00:01:07,000 --> 00:01:12,820
This is the default login page, and it's a very simple form that asks for an email and a password allows

15
00:01:12,820 --> 00:01:14,980
you to check or remember me, and that's pretty much it.

16
00:01:16,230 --> 00:01:21,600
And what I'm going to do is delete the contents of this file and paste in the contents of that one you

17
00:01:21,600 --> 00:01:23,730
just downloaded or you're about to download.

18
00:01:23,910 --> 00:01:29,340
But in any case, this is almost the same, but it actually adds a couple of buttons in a left hand

19
00:01:29,340 --> 00:01:29,820
column.

20
00:01:30,030 --> 00:01:35,760
One here log in with GitHub, and that's one we're going to implement first and then one that's labeled

21
00:01:35,760 --> 00:01:36,930
log in with Google.

22
00:01:37,530 --> 00:01:41,640
And of course, both of these buttons are calling routes that don't exist yet, but they will before

23
00:01:41,640 --> 00:01:42,090
too long.

24
00:01:42,330 --> 00:01:42,690
OK.

25
00:01:43,050 --> 00:01:51,300
So get that set up, and what we'll do next is we'll go over here, back to our web browser and look

26
00:01:51,300 --> 00:01:58,740
at the Mark Bates Dot Gothe repository is an example folder, and inside of that, we have one file

27
00:01:58,740 --> 00:01:59,910
called Mean Don't Go.

28
00:02:01,530 --> 00:02:06,300
And if we open it up and look at it, you can see he's got a very, very long import statement because

29
00:02:06,300 --> 00:02:12,480
he's importing all of the sub packages that support individual providers like We Pay and Yahoo and Yandex.

30
00:02:13,050 --> 00:02:17,310
Of course, ours will be much shorter because we're going to use Google and we're going to use GitHub,

31
00:02:17,520 --> 00:02:20,190
but we're going to have to do that kind of import to start with.

32
00:02:20,450 --> 00:02:21,450
And if we scroll down.

33
00:02:22,470 --> 00:02:25,830
He seems to begin in this one function named Main.

34
00:02:25,980 --> 00:02:29,130
He begins with something called goth, don't use providers.

35
00:02:29,190 --> 00:02:33,810
Then he lists all the providers he wants to implement, and each one has some information.

36
00:02:33,840 --> 00:02:39,210
For example, if you were doing Google, which we will before too long, you need a key and you need

37
00:02:39,210 --> 00:02:42,390
a secret and you need some endpoint to call back.

38
00:02:42,570 --> 00:02:49,160
And of course, this URL is what Google will call after someone successfully authenticates.

39
00:02:49,170 --> 00:02:51,900
So that's a world that have to exist on our system.

40
00:02:51,930 --> 00:02:55,870
So we're going to have to do that at some point and a little bit further down.

41
00:02:55,890 --> 00:02:57,330
He creates a map here.

42
00:02:57,510 --> 00:03:04,110
So this map actually has one entry for each of the providers he wants to support, and that's probably

43
00:03:04,110 --> 00:03:05,190
just for his demo.

44
00:03:05,190 --> 00:03:10,020
So we're probably not going to have to do that, but we'll find out before too long and then down a

45
00:03:10,020 --> 00:03:10,890
little bit further.

46
00:03:12,060 --> 00:03:19,380
He actually does the implementation, so he sets up some routes using the Patriota reason the cheerless

47
00:03:19,380 --> 00:03:25,380
or ours will be a little bit different, but the basic logic is the same, and down here he has some

48
00:03:25,380 --> 00:03:27,470
kind of template that he sends back to people.

49
00:03:27,480 --> 00:03:34,170
So we use this as a starting point for our application and we'll get started on this with GitHub in

50
00:03:34,170 --> 00:03:35,220
the next lecture.

