1
00:00:01,660 --> 00:00:05,740
So this time around, we want to work on the social media call back handler.

2
00:00:05,890 --> 00:00:13,780
And just as a reminder, this handler is called after someone attempts to log in on GitHub or Google

3
00:00:13,780 --> 00:00:15,850
or whatever the social provider happens to be.

4
00:00:16,270 --> 00:00:22,540
So someone comes to the login screen, they click on log in using GitHub, and that calls the social

5
00:00:22,540 --> 00:00:25,660
login handler, which checks to see if they're already logged in.

6
00:00:25,660 --> 00:00:29,650
If they're not, then this method begin Auth handler gets called.

7
00:00:30,070 --> 00:00:35,560
That takes them off to the login sequence for GitHub or Google or whatever the provider is, and the

8
00:00:35,560 --> 00:00:40,030
results of that are sent back to this handler social media callback.

9
00:00:40,210 --> 00:00:41,530
And this is the one we want to handle.

10
00:00:41,740 --> 00:00:47,770
Now this will take a little bit more work, but the very first thing we have to do is call each dot

11
00:00:47,770 --> 00:00:48,670
in its social life.

12
00:00:48,850 --> 00:00:49,170
OK.

13
00:00:49,210 --> 00:00:51,790
We need to make sure that initialized and ready to go.

14
00:00:51,880 --> 00:00:52,540
So we do that.

15
00:00:54,010 --> 00:00:59,380
After that, we call something called complete user auth from Gothic.

16
00:00:59,560 --> 00:01:01,070
So we get the results from that.

17
00:01:01,210 --> 00:01:06,490
The Gothe user, which I'll call G.G. user like that and potentially an error.

18
00:01:06,610 --> 00:01:13,270
And those come from calling Gothic Dart complete user off, and that requires the response writer and

19
00:01:13,270 --> 00:01:13,840
the request.

20
00:01:14,080 --> 00:01:14,440
OK.

21
00:01:15,310 --> 00:01:19,510
And we checked for an error if error is not equal to nil and something went wrong.

22
00:01:20,050 --> 00:01:22,410
So we'll put an error message in the session.

23
00:01:22,450 --> 00:01:29,080
Each app dot session dot put and look good in using the context or context.

24
00:01:30,430 --> 00:01:35,890
We'll call it error, so it'll be picked up by our nice error message logic in the templates and we'll

25
00:01:35,890 --> 00:01:36,550
put in the error.

26
00:01:36,670 --> 00:01:37,720
Error dot error.

27
00:01:38,620 --> 00:01:43,960
OK, so we put it in the session and we redirect the user back to the login screen because that's almost

28
00:01:43,960 --> 00:01:45,100
certainly what the error is.

29
00:01:45,760 --> 00:01:49,890
HTP don't redirect and we'll just redirect using an error.

30
00:01:49,930 --> 00:01:57,270
Take them back to the login screen, which is users log in with a message status issue, repeat status.

31
00:01:57,270 --> 00:01:58,720
See other OK.

32
00:01:59,800 --> 00:02:02,260
And at that point, we don't want to go any further, so we'll return.

33
00:02:04,030 --> 00:02:07,510
But assuming we get past that, we now have this variable user.

34
00:02:08,050 --> 00:02:08,410
So.

35
00:02:09,690 --> 00:02:15,870
We have a user, but the user may not exist on our system yet, and if they don't, we need to create

36
00:02:15,870 --> 00:02:21,210
a user on our system that has the email address associated with whatever account they use to try to

37
00:02:21,210 --> 00:02:21,600
log in.

38
00:02:22,560 --> 00:02:28,770
So what I'll do, first of all, is try to look up the user look up user using email address.

39
00:02:29,100 --> 00:02:30,210
That's how we track our users.

40
00:02:31,710 --> 00:02:39,810
So I'll create a user variable value of Typekit data, don't user, and I'll put a test user variable

41
00:02:39,810 --> 00:02:40,290
as well.

42
00:02:40,290 --> 00:02:43,290
And that will be a ver test user.

43
00:02:43,890 --> 00:02:47,790
That's what I'm going to call it, and it will be a pointer to data user and you'll see why at a moment.

44
00:02:48,270 --> 00:02:49,380
So those are my two variables.

45
00:02:50,850 --> 00:02:53,480
So my first one is actually my second one.

46
00:02:53,490 --> 00:02:58,950
But you get the idea is to just use it that is now populated and we'll check for an error when we call

47
00:02:59,160 --> 00:03:03,870
you the variable that I created on line three hundred and twelve.

48
00:03:04,830 --> 00:03:06,150
You don't get by email.

49
00:03:07,380 --> 00:03:10,620
That's the only reason I created that variable is so I can call the method on it.

50
00:03:11,430 --> 00:03:13,760
And the parameter to that has to be an email address.

51
00:03:13,770 --> 00:03:21,060
And I get that from G user what was given back to me by whatever my provider was, G users email.

52
00:03:22,560 --> 00:03:22,890
OK.

53
00:03:24,220 --> 00:03:30,340
And I'll check to see if there's an error, if error is not equal to nil in this case, the error may

54
00:03:30,340 --> 00:03:32,860
just be that the user doesn't exist.

55
00:03:33,100 --> 00:03:34,510
So just to see what's going on?

56
00:03:34,540 --> 00:03:36,280
I'm going to say long, dark print line.

57
00:03:37,700 --> 00:03:39,710
Now print out the air just so I can see what it is.

58
00:03:41,790 --> 00:03:50,370
And then we'll get the provider from the session, OK, so provider that is assigned the value of each

59
00:03:50,460 --> 00:03:57,390
Dot app, dot session, dot get and I'm going to get using the context or context as usual.

60
00:03:58,590 --> 00:04:02,020
And I'm looking for the key social underscore provider.

61
00:04:02,040 --> 00:04:05,370
And if you recall, we set that, I think it was last lecture.

62
00:04:05,490 --> 00:04:08,940
OK, and we're going to get that in, then cast it to a string.

63
00:04:10,560 --> 00:04:18,360
And at this point, I can assume we don't have a user, so add one better put a space in there.

64
00:04:19,230 --> 00:04:21,089
Otherwise that would bother me endlessly.

65
00:04:22,430 --> 00:04:24,920
So will create a new user, ver new user.

66
00:04:28,060 --> 00:04:30,610
Of type data, don't user our own type.

67
00:04:32,520 --> 00:04:34,170
And we'll put some information in here.

68
00:04:34,380 --> 00:04:38,040
Now I need to actually check what the provider is.

69
00:04:38,700 --> 00:04:44,670
So we'll know what information to put in because as I said, we're going to be supporting two social

70
00:04:44,670 --> 00:04:46,290
logins in this course.

71
00:04:46,380 --> 00:04:48,810
GitHub, which gives me information in one way.

72
00:04:49,410 --> 00:04:52,320
And Google, which gives me information in a different way.

73
00:04:52,380 --> 00:04:56,070
And right now, I'm just going to check for GitHub and we'll take care of Google later on.

74
00:04:56,070 --> 00:05:04,230
So I'll see if provider is equal to GitHub and do something otherwise do something else.

75
00:05:04,500 --> 00:05:04,800
OK.

76
00:05:04,870 --> 00:05:08,070
And we're going to leave this one empty for now, but we'll take care of GitHub right now.

77
00:05:09,740 --> 00:05:15,050
So what I'm going to get from GitHub when they give me information back, they're not going to give

78
00:05:15,050 --> 00:05:18,470
me first name in one field, in the last name, in another.

79
00:05:19,010 --> 00:05:24,590
They leave those two fields, which exist in Gothe data type but don't exist in GitHub dictator type.

80
00:05:24,740 --> 00:05:29,250
They just give me one field code name, and sometimes that has one name.

81
00:05:29,270 --> 00:05:33,140
Sometimes it has two names, but I'm going to just try to make it as simple as I can.

82
00:05:33,920 --> 00:05:36,290
I'll explode what they give me, so I'll splitting.

83
00:05:36,290 --> 00:05:40,700
In other words, that I'll split it on spaces, so I'll create a variable called explode, which I have

84
00:05:40,700 --> 00:05:41,270
to spell right.

85
00:05:42,500 --> 00:05:45,110
And that is assign the value of from the strings package.

86
00:05:45,290 --> 00:05:46,220
I'll call Split.

87
00:05:48,290 --> 00:05:53,390
I'm going to split the value in the user name on spaces.

88
00:05:53,990 --> 00:06:02,080
OK, so now I have that and now I'll just populate my first name and last name field in my data dot

89
00:06:02,120 --> 00:06:02,980
user type.

90
00:06:03,020 --> 00:06:06,260
Based on the values I get from exploded, I know I'm going to get at least one.

91
00:06:06,500 --> 00:06:06,870
OK.

92
00:06:06,890 --> 00:06:14,120
So I can say new user first name will be equal to exploded at position zero, the first value.

93
00:06:15,350 --> 00:06:18,260
And then I'll check to see if the length of exploded.

94
00:06:19,190 --> 00:06:21,650
If that's greater than one than we have at least two.

95
00:06:21,830 --> 00:06:22,190
OK.

96
00:06:22,340 --> 00:06:25,490
And just for simplicity, I'll say new user.

97
00:06:28,180 --> 00:06:31,780
Typekit last name is equal to exploded one.

98
00:06:33,640 --> 00:06:35,860
So the second position index one.

99
00:06:37,080 --> 00:06:40,050
That we all have a first name and a last name in there somehow.

100
00:06:40,620 --> 00:06:45,110
Otherwise, I'll just leave this empty for now and we'll deal with that when we get to Google.

101
00:06:46,350 --> 00:06:48,460
Now let's populate the rest of the information we need.

102
00:06:48,480 --> 00:06:55,530
So after this if statement, I'm going to say new user active is equal to one.

103
00:06:55,740 --> 00:06:56,520
It's an active user.

104
00:06:57,450 --> 00:07:02,670
And I'm also going to specify a password, and I'll tell you why in a moment, but let me do it first.

105
00:07:03,480 --> 00:07:12,590
So new user password is equal to and I'm just going to generate a long random string of characters each

106
00:07:12,600 --> 00:07:17,010
dot random string and I'll make it 20 characters long.

107
00:07:17,350 --> 00:07:23,310
OK, now the reason I'm doing this is we finally got a user in our system and I don't want to lose them.

108
00:07:23,340 --> 00:07:26,970
So they registered using, say, Google or something like that.

109
00:07:27,360 --> 00:07:31,950
And then they decide to delete their Google account down the road and then come back to your site and

110
00:07:31,950 --> 00:07:36,090
say, I want to get into your site, but I don't have my Google account anymore.

111
00:07:36,120 --> 00:07:41,430
Well, this way they can actually recover their password and reset it to whatever they want.

112
00:07:41,490 --> 00:07:45,930
So they're not recovering their password, they can initiate a password reset request and reset it to

113
00:07:45,930 --> 00:07:50,760
whatever they want so they can log in either using their Google account or using the account we're creating

114
00:07:50,760 --> 00:07:51,270
right now.

115
00:07:51,420 --> 00:07:51,660
OK.

116
00:07:51,820 --> 00:07:53,730
That's just a simple way to get around this problem.

117
00:07:54,860 --> 00:08:01,880
Other things I need new user created up, and that's equal to time Dot now the current time and date

118
00:08:02,720 --> 00:08:06,380
and new user dot updated at that school.

119
00:08:06,560 --> 00:08:08,540
Updated at.

120
00:08:09,290 --> 00:08:11,660
That's equal to time dot now as well, OK?

121
00:08:12,530 --> 00:08:14,000
And now I'll try inserting a user.

122
00:08:14,180 --> 00:08:19,850
I don't care about the idea that I get back, but I do care about the error that comes from new user

123
00:08:22,610 --> 00:08:23,570
dot insert.

124
00:08:24,110 --> 00:08:30,590
And I'm going to insert new user and I'll check for an error if error is not equal to nil.

125
00:08:32,030 --> 00:08:32,990
Then something went wrong.

126
00:08:33,049 --> 00:08:34,970
So I'll just say 8GB the error.

127
00:08:36,809 --> 00:08:45,150
W with the error, error, error and HGTV status, bad request, which is sufficient for our purposes

128
00:08:45,150 --> 00:08:49,920
and of course, you can do whatever you want in there and I'll return, you might want to put an error

129
00:08:49,920 --> 00:08:54,300
in the session, redirect them back to the log in screen, whatever the case might be.

130
00:08:55,890 --> 00:09:03,810
So assuming we get past this, I can now say test user and potentially an error which I'm going to ignore

131
00:09:03,810 --> 00:09:05,220
and you probably don't want to.

132
00:09:05,340 --> 00:09:10,200
But it's almost certainly not going to be an error because we just inserted the user successfully get

133
00:09:10,200 --> 00:09:15,300
by email and that would be G user dot email.

134
00:09:17,160 --> 00:09:23,160
And the only reason I'm getting that is because once I get outside of this if statement.

135
00:09:25,550 --> 00:09:28,740
I actually want to lug the user into my system, so I'll delete this blank line.

136
00:09:29,130 --> 00:09:31,980
Come outside of this if statement and now log the user in.

137
00:09:32,550 --> 00:09:39,270
And if you recall, that's as simple as setting a few sessional variables each dot app dot session dot

138
00:09:39,270 --> 00:09:41,550
put out context.

139
00:09:42,450 --> 00:09:48,060
The first thing I'm going to put in there is User ID, which will be test user ID.

140
00:09:50,510 --> 00:09:54,810
And then I want to put in the social token, and I'll talk more about that later.

141
00:09:54,830 --> 00:10:00,410
But we do need this, OK, so I'm going to put in something called social underscore token that goes

142
00:10:00,410 --> 00:10:04,580
into the recession and that's actually coming from the user variable.

143
00:10:04,610 --> 00:10:10,940
This is the the fourth token we get back from GitHub or Google G user access token.

144
00:10:11,780 --> 00:10:12,140
OK.

145
00:10:13,460 --> 00:10:18,590
And the last thing I want to put in there is their social email, which I'm going to call social underscore

146
00:10:18,590 --> 00:10:21,380
email, and you'll see why in a little while.

147
00:10:21,380 --> 00:10:24,410
For right now, let's just go with G User's email.

148
00:10:25,250 --> 00:10:30,970
So now I have their User ID in the session, which makes our application know that they're logged in.

149
00:10:31,010 --> 00:10:34,070
We have this social token, which will have to use later on.

150
00:10:34,070 --> 00:10:36,470
Not right now in this lecture, but later on we'll be using it.

151
00:10:36,800 --> 00:10:39,770
And we also have their social email, which we stuck in there as well.

152
00:10:39,890 --> 00:10:40,250
OK.

153
00:10:40,700 --> 00:10:47,210
And after all that happens, we do a redirect issue to redirect and redirect using W and our goal.

154
00:10:47,210 --> 00:10:48,280
Just take them to the home page.

155
00:10:48,290 --> 00:10:51,860
You can take them whatever you want with A2DP status.

156
00:10:52,400 --> 00:10:59,660
See other and you might want to put a success message in the flash of using the flash keyword for the

157
00:10:59,660 --> 00:11:00,080
session.

158
00:11:00,230 --> 00:11:02,000
But this is sufficient for our purposes.

159
00:11:02,840 --> 00:11:03,230
OK.

160
00:11:03,530 --> 00:11:10,790
So with all of this, I should now be able to go and create the appropriate values on GitHub.

161
00:11:11,120 --> 00:11:12,260
Get the secret.

162
00:11:12,500 --> 00:11:13,470
Get the key.

163
00:11:13,490 --> 00:11:15,410
Specify the callback URL.

164
00:11:15,980 --> 00:11:21,260
Once we do that and add a couple of routes in our roots, file that point to the correct locations.

165
00:11:21,770 --> 00:11:25,910
We should be good to test this out and see if we can log in, and then we'll have to figure out how

166
00:11:25,910 --> 00:11:32,360
to log out, which is surprisingly much harder than it seems if you read the documentation on the Gothe

167
00:11:32,360 --> 00:11:34,700
GitHub page, but we'll get to that shortly.

