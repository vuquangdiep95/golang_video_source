1
00:00:01,660 --> 00:00:06,130
So in order to get things working, I mean, so far, we have the in its social off and we're going

2
00:00:06,130 --> 00:00:11,590
to have to use that every time we log into some, some social sign on service, we'll be calling this.

3
00:00:11,650 --> 00:00:14,380
But obviously, we need a handler to start it.

4
00:00:14,590 --> 00:00:16,630
Let's put a stub handler in here for now.

5
00:00:16,660 --> 00:00:24,740
So a function with the receiver of H pointer the handlers and we'll call this one social logging OK.

6
00:00:25,030 --> 00:00:31,180
And like any handler, requires the response writer, which I'll call w the response writer and a pointer

7
00:00:31,180 --> 00:00:33,850
to a request right there.

8
00:00:34,310 --> 00:00:35,720
OK, so we're going to have to have that.

9
00:00:36,580 --> 00:00:42,910
And if you recall, one of the things we specified up here was the callback for whatever provider we're

10
00:00:42,910 --> 00:00:43,310
using.

11
00:00:43,330 --> 00:00:46,370
So we're going to have to have another handler function here.

12
00:00:46,420 --> 00:00:53,350
It will be a handler, in fact, and I'll put a stubborn h pointer to handlers and this one's called

13
00:00:53,560 --> 00:00:55,540
social took out to spell right?

14
00:00:55,990 --> 00:00:59,050
Social media callback like that.

15
00:00:59,980 --> 00:01:08,170
And it requires a W Dot response writer and, erm, as a pointer to HDP request.

16
00:01:08,380 --> 00:01:11,470
And we'll deal with that one later on, but we're going to need it before too long.

17
00:01:12,130 --> 00:01:18,640
So what'll happen is the user will attempt to log in by clicking on, say this button over here, log

18
00:01:18,640 --> 00:01:23,170
in in Log Inkjet, logon to GitHub so they click on this and that calls this route.

19
00:01:23,410 --> 00:01:30,100
Slash author slash GitHub question mark provider equals GitHub, so we're passing along a URL parameter.

20
00:01:31,070 --> 00:01:39,110
And, of course, that you, Earl, will link to this handler, social logging and social logging,

21
00:01:39,110 --> 00:01:44,720
of course, is going to have to in its social auth and then do some magic so we can get started with

22
00:01:44,720 --> 00:01:45,470
this part anyway.

23
00:01:46,430 --> 00:01:52,010
So the first thing I'm going to do is I'm going to grab that parameter right over here again in logging

24
00:01:52,280 --> 00:01:52,520
yet.

25
00:01:53,030 --> 00:01:55,520
I'm going to grab this parameter GitHub.

26
00:01:55,910 --> 00:01:57,020
The value is GitHub.

27
00:01:57,020 --> 00:02:01,370
The parameter is called provider because I'm going to need that later on when I try to log someone out.

28
00:02:01,490 --> 00:02:06,620
Because when I log someone out of my site, if they've logged in using social off, I want to log them

29
00:02:06,620 --> 00:02:07,390
out of my site.

30
00:02:07,400 --> 00:02:11,240
But I also want to log them out of, say, GitHub in this case, OK?

31
00:02:11,870 --> 00:02:13,750
Log them out of this site on GitHub.

32
00:02:13,760 --> 00:02:15,050
So back here, all handlers.

33
00:02:15,110 --> 00:02:16,130
Let's get that parameter.

34
00:02:16,820 --> 00:02:22,340
Now, if you'll recall, we're using the Chy router, so I'll get a variable called provider and get

35
00:02:22,340 --> 00:02:24,570
the value from G.

36
00:02:24,770 --> 00:02:25,790
Our router package.

37
00:02:25,910 --> 00:02:27,320
Dot URL per annum.

38
00:02:27,770 --> 00:02:28,700
Which should show up.

39
00:02:28,770 --> 00:02:29,240
There it is.

40
00:02:29,540 --> 00:02:33,590
And I'm looking for a provider and I need to save that somewhere.

41
00:02:33,650 --> 00:02:37,490
I need to give it its other parameter, though, which of course, is the request.

42
00:02:37,790 --> 00:02:38,240
That's better.

43
00:02:39,220 --> 00:02:41,360
I'm going to save that provider in the session.

44
00:02:42,470 --> 00:02:50,900
So each Dot app dot session, whatever session this application is using, I'll put in using our context

45
00:02:51,950 --> 00:02:57,020
as the first parameter, and I'll call this one social underscore provider, so I'll need that later

46
00:02:57,020 --> 00:02:58,860
on to log, the user wrote.

47
00:02:58,880 --> 00:03:00,020
And I'm putting provider in there.

48
00:03:00,290 --> 00:03:00,620
OK.

49
00:03:01,310 --> 00:03:04,750
And now in it, my social authentication, and that's easy.

50
00:03:04,760 --> 00:03:07,390
It's just h dot in its social life.

51
00:03:07,930 --> 00:03:09,800
We're done OK with that part.

52
00:03:10,710 --> 00:03:19,140
Now, what happens when I call in its social life is I've set up my providers and now I need to call

53
00:03:19,830 --> 00:03:27,480
a method in the gothic package called complete user authentication, and I'll do it using an if statement.

54
00:03:28,380 --> 00:03:31,470
Just to make sure that I check to see that things work as expected.

55
00:03:32,370 --> 00:03:37,740
So if I don't care about the first return grammar, but I do care about an error, those are populated

56
00:03:37,740 --> 00:03:43,020
when I call Gothic, which is the God's package complete user off.

57
00:03:43,890 --> 00:03:49,820
And that requires the response writer, which I call W and the request, which I called, erm.

58
00:03:50,760 --> 00:03:55,070
And then I'll check to see if the error is equal to nil, not not equal to nil.

59
00:03:55,080 --> 00:03:59,910
But if the if there is no error, then I want to do something because in fact, what's actually happened

60
00:03:59,910 --> 00:04:03,150
here is user is already logged in.

61
00:04:03,750 --> 00:04:08,370
So they've already logged into this site using this and and we have no problem letting them continue.

62
00:04:08,400 --> 00:04:10,680
So we'll just say a redirect.

63
00:04:12,290 --> 00:04:16,610
And we'll give them W and her take them to the home page, wherever you want to put them, you just

64
00:04:16,610 --> 00:04:19,850
take them there and we'll say about status, see other.

65
00:04:20,720 --> 00:04:28,700
OK, so things are good, but if there is an error, then we have to attempt to log it, so we'll attempt

66
00:04:29,570 --> 00:04:31,300
social login.

67
00:04:31,520 --> 00:04:36,350
Those are the two possible cases, either they're already logged in on this site using social authentication

68
00:04:36,680 --> 00:04:39,050
or they're not, so we have to try to log them in.

69
00:04:40,260 --> 00:04:47,760
And we do that by calling Gothic don't begin off handler, and that requires the response writer and

70
00:04:47,760 --> 00:04:48,330
the request.

71
00:04:49,440 --> 00:04:52,440
And that's it for this social login function.

72
00:04:52,710 --> 00:04:59,670
Now this will all work really well until the point when GitHub in our case tries to call this.

73
00:04:59,670 --> 00:05:04,890
You are all back and saying, Well, here's my callback results of what happened when the user tried

74
00:05:04,890 --> 00:05:07,080
to log in, and we need to implement that.

75
00:05:07,080 --> 00:05:09,180
And of course, we need to set up some routes as well.

76
00:05:09,630 --> 00:05:11,250
But we'll get started on this bit.

77
00:05:11,430 --> 00:05:15,630
Social media callback in the next lecture and then we'll take care of the roots after that.

