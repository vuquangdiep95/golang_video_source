1
00:00:00,180 --> 00:00:07,590
All right so so to install G.P.S. their instructions for installation are actually a little bit dated.

2
00:00:07,590 --> 00:00:14,850
They're actually from the go path era of stuff but a lot of times when you see a go path era item it

3
00:00:14,850 --> 00:00:22,080
is possible to do it with go modules too There gets to be a little bit of complexity here however because

4
00:00:22,230 --> 00:00:28,470
there is a binary involved there is the proton see the protocol buffer compiler which needs to be installed

5
00:00:28,470 --> 00:00:28,910
as well.

6
00:00:29,520 --> 00:00:34,350
So I will be walking through this kind of with a mouse.

7
00:00:34,350 --> 00:00:41,530
So to install this you need to find the the the occupation for how to get started.

8
00:00:41,640 --> 00:00:46,350
So I'm going to go to quick start Doc quick start and I want to go quick start.

9
00:00:46,450 --> 00:00:50,220
And this is actually where the installation for go instructions for go Is this the quick start.

10
00:00:50,220 --> 00:00:57,830
They don't actually have their tutorials or reference so so the install G.P.S. so the main GOP library

11
00:00:57,830 --> 00:01:03,140
is just a plain go library so you can just import this and use it go modules just by itself.

12
00:01:03,140 --> 00:01:04,650
So you don't even need to go get it.

13
00:01:04,750 --> 00:01:06,360
So you can ignore this step.

14
00:01:06,680 --> 00:01:07,630
This is just go.

15
00:01:07,640 --> 00:01:09,020
This is go module compatible.

16
00:01:09,020 --> 00:01:16,010
If I actually copy and paste that into it into a new tab my browser and then click the link to go through

17
00:01:16,010 --> 00:01:17,910
into the get hub.

18
00:01:18,200 --> 00:01:26,450
I will find there is a scroll down there is a go dot mod so there are already modules module ready.

19
00:01:26,600 --> 00:01:27,080
Nice.

20
00:01:27,080 --> 00:01:35,040
So you don't have to go get it go getting is the old way to go path and now it's modules happens automatically.

21
00:01:35,070 --> 00:01:35,360
Yeah.

22
00:01:35,370 --> 00:01:37,040
Don't need to even do anything.

23
00:01:37,290 --> 00:01:41,150
So the more tricky part comes from the Protocol Buffers part.

24
00:01:41,310 --> 00:01:44,660
So to make Protocol Buffers you need the pro C program.

25
00:01:44,910 --> 00:01:50,820
And so the proto C program you can find it there's a link right here to get hub dot com Google proto

26
00:01:50,820 --> 00:01:52,210
above releases.

27
00:01:52,800 --> 00:01:58,290
So if I go through two that go through that link this brings me to the Protocol Buffers proto above

28
00:01:58,320 --> 00:02:02,600
the releases thing and so need to install the protest program from here.

29
00:02:02,610 --> 00:02:08,940
So I don't think I want the prerelease version so 3 10 release candidate 1.

30
00:02:09,210 --> 00:02:15,110
It's probably OK but I think it's just safer just to go back to the latest release.

31
00:02:15,130 --> 00:02:21,150
It's not a one and they've got a lot of possible downloads but the ones you want are these ones down

32
00:02:21,150 --> 00:02:22,300
here at the bottom.

33
00:02:22,530 --> 00:02:29,610
The ones that are a proto C a version number a platform and possibly a C you type.

34
00:02:29,610 --> 00:02:32,700
So I'm on windows I'm a 64 bit Windows machine.

35
00:02:32,700 --> 00:02:37,410
So this is the one I want to download and if you're Linux 64 bit that's here.

36
00:02:37,440 --> 00:02:50,790
Here's Mac 64 bit OK so x 86 64 is for 64 bit OK so we great to click that to download it and why that's

37
00:02:50,790 --> 00:02:58,120
downloading a nice function I was working with last night is and go dark.

38
00:02:58,290 --> 00:03:05,450
I think it's in their package OS thing its package OS impact Joe has and then is it art.

39
00:03:05,490 --> 00:03:18,870
How do you where's the OS are not that architecture runtime runtime runtime it's in runtime and runtime

40
00:03:21,440 --> 00:03:24,360
you have architecture

41
00:03:27,290 --> 00:03:34,220
go arc right here will tell you that you know where it is want a stack overflow link somewhere it will

42
00:03:34,430 --> 00:03:38,480
tell you the architecture of your receipt machine if you want to see that so that's kind of an interesting

43
00:03:38,480 --> 00:03:43,990
thing to take a look at and see what that will show you is go ask

44
00:03:46,660 --> 00:03:52,050
go out go ask go path career environment variables police go environment variables I think they're in

45
00:03:52,050 --> 00:03:52,910
the constants

46
00:03:56,050 --> 00:04:05,320
in the and we have go asking D6 four there you go it's just an interesting take a look at it so you

47
00:04:05,320 --> 00:04:14,430
could see there under us so they're using the x eighty six thirty two and six or so so the generally

48
00:04:14,430 --> 00:04:23,080
speaking you'll want your platform x six sixty for most machines are 64 bit right so now it's downloaded

49
00:04:23,110 --> 00:04:26,390
I will open this up and updated here.

50
00:04:27,160 --> 00:04:33,760
So this puts in a bunch of stuff here would I actually need is in the bin folder I just need this executable

51
00:04:33,790 --> 00:04:36,130
and I need to be somewhere that's on my path.

52
00:04:36,310 --> 00:04:45,740
So one location that's on my path that I have setup is a I have a bin folder in my in my home folder.

53
00:04:46,010 --> 00:04:49,840
I've got that setup on my path so anything that's in here is on my path.

54
00:04:50,150 --> 00:04:58,030
So I'm just gonna put the proto C probe in there.

55
00:04:58,140 --> 00:05:09,780
So now if I do pro C C A Dash V for version it most program support does not support at dash dash version.

56
00:05:09,840 --> 00:05:14,370
You like Potosi 3 9 1 so that's courtesy.

57
00:05:14,430 --> 00:05:19,890
So the next step is where we actually get to the more confusing part.

58
00:05:20,360 --> 00:05:25,640
So beyond Potosi go is not a part of the base Potosi stuff.

59
00:05:25,880 --> 00:05:28,750
So you need the proto C in for go.

60
00:05:28,940 --> 00:05:31,580
And so here's the tricky bit to get working with.

61
00:05:31,610 --> 00:05:37,100
Go modules is to install something that's a binary with go path.

62
00:05:37,100 --> 00:05:42,260
You just go get it and the executable is in your bin folder when you go path go module doesn't have

63
00:05:42,260 --> 00:05:50,360
a go path so that's not a thing anymore so you could just do this make make sure you're not in a folder

64
00:05:50,360 --> 00:05:55,450
with the go dot mod and you could do this and all go into go path way of doing things.

65
00:05:55,720 --> 00:05:57,630
And the only way to do it the old way.

66
00:05:58,100 --> 00:06:05,570
So but the new way of doing things if you go to the go the get hub Weeki for go laying the modules page

67
00:06:05,960 --> 00:06:09,370
there is a how can a track tool dependencies for a module.

68
00:06:09,650 --> 00:06:14,390
That explains kind of how to use modules for executable is like that.

69
00:06:14,390 --> 00:06:22,300
And basically what it says is you want to create a tool stop go file so if I go here I'm going to just

70
00:06:22,300 --> 00:06:36,910
create a new folder 0 5 G or C and in here I'm just gonna create a file was gonna call it tools go and

71
00:06:36,950 --> 00:06:40,280
it's going to be package doesn't really matter.

72
00:06:42,340 --> 00:06:48,470
So I'll just call it package main just cause that seems likely to be thing.

73
00:06:48,940 --> 00:07:01,070
And I want to put this comment here near the top of the page so this is 0 0 actually to warning the

74
00:07:01,070 --> 00:07:04,920
build com it must be before the package declaration.

75
00:07:05,180 --> 00:07:14,360
So this is how you restrict a Go file from a permit from building so you could do a plus build windows

76
00:07:14,620 --> 00:07:22,790
in this go file will only build on Windows or Linux or Darwin but you can also put in kind of whatever

77
00:07:22,790 --> 00:07:23,330
you want.

78
00:07:23,330 --> 00:07:26,720
So tools is a tag that's never actually used.

79
00:07:26,990 --> 00:07:31,960
So it'll never actually build this Go file but the go file exists.

80
00:07:31,990 --> 00:07:35,800
And so any imports you make will go into your go mod file.

81
00:07:36,040 --> 00:07:39,900
And so now I can add in my go to GOPAC.

82
00:07:40,420 --> 00:07:48,620
And this is the go proto C plugin so I can import that.

83
00:07:48,720 --> 00:07:55,640
And so now if I go if I'm in the right folder I need to be up over year

84
00:07:58,060 --> 00:08:09,360
mod tidy they look at my go mod I should now have that proto buff pattern going put above in my modules

85
00:08:09,360 --> 00:08:14,250
list at 1 3 the version 1 3 1.

86
00:08:14,250 --> 00:08:19,800
The other thing to note is you need to make sure your go in environment variable is set.

87
00:08:19,830 --> 00:08:27,550
So if you do go in the Go bin mine is set to that bin folder in my home.

88
00:08:27,650 --> 00:08:29,990
So if I pull that back open again

89
00:08:34,080 --> 00:08:40,260
go back in to that bin folder.

90
00:08:40,370 --> 00:08:45,980
It should put the go proto C extension in there.

91
00:08:45,980 --> 00:08:49,370
It doesn't look like it did because I didn't actually download it.

92
00:08:49,370 --> 00:08:54,560
I go modded tidied it but then it's never actually downloading the package because it's never actually

93
00:08:54,560 --> 00:08:55,100
using it.

94
00:08:55,910 --> 00:09:01,670
So to actually force it to download despite never actually using it you can use go mod download to download

95
00:09:01,700 --> 00:09:05,680
all dependencies that are in your go mod whether they're in use or not.

96
00:09:09,810 --> 00:09:13,010
So hopefully that worked doesn't look like it did.

97
00:09:16,180 --> 00:09:21,110
B is this import needs to be underscored because I'm not actually using it.

98
00:09:21,120 --> 00:09:32,450
Maybe my tidy go mod download.

99
00:09:32,740 --> 00:09:33,600
Give me a sec.

100
00:09:58,290 --> 00:10:10,460
Okay so I need to go install that path now it looks like just looking at the dock station maybe.

101
00:10:11,050 --> 00:10:11,450
There you go.

102
00:10:11,480 --> 00:10:16,820
Now I've got Potosi Django so at once in your module go modules list.

103
00:10:16,850 --> 00:10:24,420
You have to go install that particular binary file manually so it won't be downloaded.

104
00:10:24,420 --> 00:10:32,190
Go my download this just say you need to install it manually but this will respect your go mod for files

105
00:10:32,190 --> 00:10:32,880
version no.

106
00:10:33,480 --> 00:10:35,600
So now I've got Potosi Gen go.

107
00:10:35,670 --> 00:10:45,300
You see along with Potosi and so now Potosi now supports and go on my system and that is actually it

108
00:10:45,450 --> 00:10:50,450
Potosi is working on my system GOPAC will be automatic as soon as they start using it.

109
00:10:51,180 --> 00:10:56,520
So that is it it is now installed with go modules.

110
00:10:56,800 --> 00:10:57,100
Nice.

111
00:10:57,130 --> 00:10:58,060
Well done.

112
00:10:58,090 --> 00:10:59,700
I'm going to off line.

113
00:10:59,710 --> 00:11:00,970
This video is gone a little bit long.

114
00:11:00,970 --> 00:11:05,110
Off line I'm going to go through that with Daniel once more and get some steps in the next video we'll

115
00:11:05,110 --> 00:11:05,920
do a quick review.
