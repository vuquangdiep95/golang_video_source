1
00:00:00,060 --> 00:00:06,660
So now we're going to talk about go some and so go some as a security check just to make sure that the

2
00:00:06,660 --> 00:00:11,250
code that you download is the code that's expected to be downloaded.

3
00:00:11,790 --> 00:00:15,920
And if you look at the resources that we gave you four go modules.

4
00:00:16,080 --> 00:00:21,090
And again a lot of this stuff is good to know so you have a thorough understanding of how modules are

5
00:00:21,090 --> 00:00:21,870
working.

6
00:00:22,020 --> 00:00:26,240
But at the level of using modules it's pretty straightforward and easy.

7
00:00:26,250 --> 00:00:34,290
Just do that go on a net and then you are L some name spacing for it and then you're working with modules

8
00:00:34,290 --> 00:00:39,180
and it kind of all happens behind the scenes but it's good to know like what we went over in the last

9
00:00:39,180 --> 00:00:46,590
video so that when you add a dependency you know the import if the import has a forward slash me two

10
00:00:46,590 --> 00:00:49,740
or four slash v three or nothing forward slash right.

11
00:00:49,740 --> 00:00:53,310
So we saw saw this import here in the previous video.

12
00:00:53,340 --> 00:01:00,330
Ah I see that I have quote that's going get the latest version of version 1 and if you have a future

13
00:01:00,330 --> 00:01:03,100
version like version 2 or version 3.

14
00:01:03,180 --> 00:01:03,440
Right.

15
00:01:03,450 --> 00:01:08,190
That's going to be specified in the future version and then also something that stood out to me which

16
00:01:08,190 --> 00:01:11,220
we didn't speak to is you have require.

17
00:01:11,280 --> 00:01:11,640
Right.

18
00:01:11,640 --> 00:01:18,590
And so the require is something that you know saying hey this is what's required for this project.

19
00:01:18,660 --> 00:01:26,310
And so it's always going to use this code for my project that I'm building here that's bringing in different

20
00:01:26,310 --> 00:01:30,640
packages different modules from other people or maybe I created them.

21
00:01:30,680 --> 00:01:37,230
And so it's always going to get that specific chunk of code so if that code move forward there's a version

22
00:01:37,230 --> 00:01:44,940
to a version 3 of this I could bring in the code I need for my project and And just interestingly to

23
00:01:44,940 --> 00:01:50,130
point something out which is interesting if you look at where that is stored like where is all this

24
00:01:50,130 --> 00:01:56,940
gets stored when you download a module somewhere and all the reading I found this documentation that

25
00:01:57,000 --> 00:02:03,630
modules already downloaded are cache locally in your go path under package and mod and so that's kind

26
00:02:03,630 --> 00:02:08,880
of an interesting place to put it because the CO path is like hey we're not using Markov anymore for

27
00:02:08,880 --> 00:02:13,050
our own workspaces but modules is still using the go workspace you have anything you say.

28
00:02:13,050 --> 00:02:13,740
Any thoughts on that.

29
00:02:13,740 --> 00:02:15,510
I know we didn't talk about this before.

30
00:02:15,540 --> 00:02:22,890
It might it might be kind of almost a legacy because like other package managers that were before go

31
00:02:22,890 --> 00:02:31,530
modules for go like DEP would actually use the same place for their cached files and if we look in there.

32
00:02:31,530 --> 00:02:37,050
So right now you could see I did a print working directory and men might go workspace which is connected

33
00:02:37,050 --> 00:02:41,700
to you know my go path environment variable I'm in the package folder and then the mod folder I say

34
00:02:41,700 --> 00:02:42,870
hey what's in here.

35
00:02:42,930 --> 00:02:49,670
I got get honeycomb but I also have RC dot Io which is this package that I'm working with right here.

36
00:02:49,680 --> 00:02:53,160
So it's downloaded that code and storing it on my local machine.

37
00:02:53,190 --> 00:03:00,840
So one of the things that you want to know is that the code you're using is secure hasn't been changed

38
00:03:01,680 --> 00:03:07,050
and the code that you downloaded a week ago is the code that maybe a month from now or a year from now

39
00:03:07,050 --> 00:03:09,070
you download its exact same code.

40
00:03:09,140 --> 00:03:12,410
It wasn't intentionally or maliciously changed right.

41
00:03:12,420 --> 00:03:16,920
You're still working with the same code that code hasn't changed and the way that that is tracked is

42
00:03:16,920 --> 00:03:22,350
with something called Go sum and there's a level of security that's built into this and this is also

43
00:03:22,350 --> 00:03:23,610
interesting reading.

44
00:03:23,730 --> 00:03:27,070
I don't think I ever showed you that link undergo modules intro.

45
00:03:27,090 --> 00:03:34,950
We gave you some resources and one of those resources under documentation was module Mir and check some

46
00:03:34,950 --> 00:03:36,550
database launched.

47
00:03:36,630 --> 00:03:41,940
And so this is a really interesting article which just talks about the security of packages and how

48
00:03:41,940 --> 00:03:47,670
they have thought through and they have this really interesting tree structure that they're using based

49
00:03:47,670 --> 00:03:52,670
upon the Merkle tree and hashes backed by trilling and it looks really fascinating.

50
00:03:52,670 --> 00:04:00,360
I don't totally understand all of this but but what it does is it's comparing everybody's hashes to

51
00:04:00,360 --> 00:04:05,340
make sure that this version of this code has similar hashes across the whole universe of people using

52
00:04:05,340 --> 00:04:05,910
it.

53
00:04:06,060 --> 00:04:09,510
And so that that helps me maintain the security.

54
00:04:09,510 --> 00:04:12,970
What would you add to that.

55
00:04:13,020 --> 00:04:14,230
Not really much.

56
00:04:14,310 --> 00:04:22,110
So the main point is that your version one you keep the the go mod is kept you want to keep it around

57
00:04:22,110 --> 00:04:27,630
because it states your namespace in your version of course and your dependencies and it knows this version

58
00:04:27,630 --> 00:04:29,280
is the one that you've been working with.

59
00:04:29,310 --> 00:04:36,270
If a 1 5 3 shows up later on your code said that it was working with 1 5 2 so it will automatically

60
00:04:36,300 --> 00:04:43,380
update to 1 5 3 until you're ready to check if it's 1 5 3 still works for you in the go some is to make

61
00:04:43,380 --> 00:04:51,330
sure that 1 5 2 has not changed the person has not gone and recreated their get repo and declared a

62
00:04:51,330 --> 00:04:54,580
new 1 5 2 with the separate with different code.

63
00:04:54,720 --> 00:04:57,140
No it's still it that would have a different hash.

64
00:04:57,150 --> 00:05:05,230
And so it's able to tell 1 5 2 is this is cryptographic rehashed as this and that's the version we need

65
00:05:05,800 --> 00:05:12,220
and not changed a hash is a one way encryption where you put something in and it produces some output

66
00:05:12,220 --> 00:05:14,770
and the output is always going to be the same.

67
00:05:14,830 --> 00:05:20,740
And so if the inputs the same the outputs the same so the input changes at all the outputs always going

68
00:05:20,740 --> 00:05:21,750
to be different.

69
00:05:21,790 --> 00:05:25,540
So you could use a hash because if you're putting the same thing into the hash you're going get the

70
00:05:25,540 --> 00:05:28,040
same code hash code out.

71
00:05:28,120 --> 00:05:33,310
But if you put something different and you'll get a different hash code so if that number there change

72
00:05:33,310 --> 00:05:35,750
you would tell us that the code that we're putting in changed.

73
00:05:35,890 --> 00:05:38,650
But if it stays the same then the code is the same.

74
00:05:38,650 --> 00:05:46,820
So that's that's good to know last thing which I think would be interesting is here in my in my go mod

75
00:05:47,420 --> 00:05:53,750
it showed that I had version 2 and version 3 and this is common it is an indirect dependency of version

76
00:05:53,750 --> 00:05:54,310
1 maybe.

77
00:05:54,320 --> 00:05:59,270
I'm not sure why those came down this came because your editor is auto was trying to autocomplete stuff.

78
00:05:59,300 --> 00:06:05,960
So when you put in that slash B and slash B 3 in your head your editor was trying to be your editor

79
00:06:05,960 --> 00:06:08,180
was try to do stuff in the background to keep you up.

80
00:06:08,630 --> 00:06:13,520
So you got to autocomplete stuff and then if I see the end to RISC I don't know if this has been brought

81
00:06:13,520 --> 00:06:19,610
down here yet but if I look in here I could see here I have quote virtual one point five to which is

82
00:06:19,610 --> 00:06:23,960
what I'm using but some of these have already been pulled down and you could see that there are different

83
00:06:23,960 --> 00:06:25,480
directories right.

84
00:06:25,570 --> 00:06:30,380
So different versions of that code base been brought down so those are being stored locally different

85
00:06:30,380 --> 00:06:31,740
directories there.

86
00:06:31,790 --> 00:06:33,990
So that's kind of interesting to look at.

87
00:06:34,070 --> 00:06:34,370
All right.

88
00:06:34,390 --> 00:06:40,490
So that's a little bit about go some and security assurances and then that article which you could go

89
00:06:40,490 --> 00:06:46,370
take a look at if you want to see a little bit more about the security that's built in to go modules.

90
00:06:46,370 --> 00:06:47,480
Anything else.

91
00:06:47,480 --> 00:06:47,870
No.

92
00:06:48,140 --> 00:06:54,650
So I guess just a summary here since it's the end of this like intro to go modules for go modules you

93
00:06:54,650 --> 00:07:00,260
say go mod in it and you give your namespace at the root of your module and then you can just start

94
00:07:00,320 --> 00:07:03,240
importing and using and writing code you can just.

95
00:07:03,300 --> 00:07:07,880
And you don't have to look in the go module file at all if you want to.

96
00:07:07,880 --> 00:07:13,460
You just start writing code and it's all in it all just automatically happens as a whole lot of talking

97
00:07:13,460 --> 00:07:17,510
for just super simple just go modernist in the URL you're good to go.

98
00:07:17,540 --> 00:07:17,780
So.

99
00:07:17,780 --> 00:07:23,360
So there's lots of details and such behind it to keep it secure into note version to use and all that

100
00:07:23,390 --> 00:07:26,460
but for the most part that happens behind the scenes.

101
00:07:26,630 --> 00:07:31,790
So you only really need to know if something wrong happens Excellent.

102
00:07:31,800 --> 00:07:32,130
All right.

103
00:07:32,130 --> 00:07:35,130
See in the next section I'm thinking that I don't know.

104
00:07:35,130 --> 00:07:36,620
Do we need a hands on exercise.

105
00:07:36,620 --> 00:07:41,140
It's kind of fun to have hands on exercise maybe after an inspection maybe that's more stuff to happen.

106
00:07:41,150 --> 00:07:44,460
All right we'll see in the next section where we're going to a little bit of a deeper dive go modules

107
00:07:44,760 --> 00:07:45,300
even deeper.
