1
00:00:00,180 --> 00:00:05,190
Vì vậy, chỉ là một vài phản ánh đến với tôi khi bạn đang viết mã của mình.

2
00:00:05,190 --> 00:00:06,740
Cái đầu tiên là của Daniel.

3
00:00:06,750 --> 00:00:10,470
Ed làm điều gì đó đặc biệt mà không bằng.

4
00:00:10,470 --> 00:00:15,360
Và vì vậy, nếu bạn nhìn vào dòng thứ hai mươi hai nếu lỗi không bằng 0, bạn có thể thấy một dấu bằng

5
00:00:15,360 --> 00:00:16,830
với một dấu gạch chéo qua nó.

6
00:00:16,830 --> 00:00:23,850
Và do đó, giống như bất cứ khi nào anh ấy không bằng chỉ cần thay thế dấu chấm than trong dấu bằng bằng một

7
00:00:23,850 --> 00:00:28,590
ký hiệu trực quan khác nhau.

8
00:00:28,710 --> 00:00:35,590
Nhưng anh ấy biết và tôi biết rằng khi tôi nhìn thấy điều đó trên màn hình của anh ấy, điều đó có nghĩa là không bằng nhau.

9
00:00:35,670 --> 00:00:40,870
Nhưng nếu bạn đang xem nội dung này, bạn sẽ thích làm cách nào để tôi có được biểu tượng đó trong mã của mình.

10
00:00:40,920 --> 00:00:44,420
Thật tốt khi bạn biết rằng biểu tượng đó thực sự không bằng nhau.

11
00:00:44,420 --> 00:00:47,240
Và đó là câu cảm thán.

12
00:00:47,340 --> 00:00:51,460
Và sau đó là sự im lặng tương tự mà bạn có thể thấy Daniel thể hiện ở đó trên biên tập viên của mình.

13
00:00:51,480 --> 00:00:53,810
Vì vậy, đó là điều đầu tiên tôi muốn chỉ ra.

14
00:00:54,090 --> 00:00:56,870
Tôi không nghĩ rằng bạn có bất kỳ cái nào khác mà chúng tôi đã gặp phải.

15
00:00:57,180 --> 00:00:57,830
Vâng.

16
00:00:57,930 --> 00:01:01,540
Phông chữ của tôi cũng giống như lớn hơn và nhỏ hơn.

17
00:01:01,570 --> 00:01:03,330
Bạn biết đó là một xung quanh tuyệt vời cho bạn.

18
00:01:03,740 --> 00:01:03,920
Vâng.

19
00:01:03,930 --> 00:01:04,240
Được rồi.

20
00:01:04,320 --> 00:01:10,410
Vì vậy, chỉ để biết liệu bạn có đang nhìn thấy điều đó hay không và bạn có thể truy cập google nếu muốn tìm hiểu cách thực hiện

21
00:01:10,410 --> 00:01:13,560
để thiết lập điều đó và thăng hoa hoặc một cái gì đó khác.

22
00:01:13,560 --> 00:01:18,600
Và sau đó, điều tiếp theo mà là một điểm thú vị đối với tôi là nhận xét rằng bạn đã đưa ra

23
00:01:18,660 --> 00:01:22,320
cuộc đình công trống không có bộ nhớ.

24
00:01:22,320 --> 00:01:24,120
Hãy cho chúng tôi biết một chút về điều đó.

25
00:01:24,180 --> 00:01:25,400
Đó chỉ là thiết kế của đi.

26
00:01:25,410 --> 00:01:31,560
Nhưng bạn có suy nghĩ hay hiểu biết gì khác chỉ là struct chỉ là struct nó chiếm bao nhiêu bộ nhớ

27
00:01:31,560 --> 00:01:32,860
như tất cả các lĩnh vực của nó.

28
00:01:33,150 --> 00:01:37,680
Vì vậy, một cấu trúc trống không có trường và không có trường nào có nghĩa là không có bộ nhớ.

29
00:01:37,710 --> 00:01:46,860
Vì vậy, đây chỉ là tổng thể, nó không thực sự quan trọng về lâu dài nhưng chỉ cần bạn có nếu bạn cần

30
00:01:46,890 --> 00:01:53,370
một loại chỉ để giao diện và bạn thực sự không có bất kỳ thứ gì khác mà bạn cần

31
00:01:53,370 --> 00:02:00,000
gõ về phía trước, bạn chỉ đang làm điều đó để nhập cấu trúc trống của giao diện về lý thuyết ít nhất là hiệu quả hơn

32
00:02:00,060 --> 00:02:01,950
hơn bất kỳ loại cơ bản nào khác.

33
00:02:01,950 --> 00:02:07,640
Vì vậy, nếu tôi đã tạo một máy chủ kiểu echo với kiểu bên dưới và do đó, hãy gõ máy chủ echo kiểu int đúng.

34
00:02:07,650 --> 00:02:16,800
Và sau đó xuống bên dưới 28 trực tuyến, tôi tạo một máy chủ tương đương với máy chủ tiếng vang.

35
00:02:17,100 --> 00:02:19,220
Và tuyệt vời.

36
00:02:19,230 --> 00:02:22,200
Và do đó, điều đó thực sự sẽ chiếm đúng bộ nhớ.

37
00:02:22,260 --> 00:02:23,530
Vâng, nó sẽ đóng cửa ngay bây giờ.

38
00:02:23,560 --> 00:02:27,610
Ý tôi là dịch vụ đó lưu trữ giá trị 0.

39
00:02:27,900 --> 00:02:38,350
Nhưng nếu nó chỉ là cấu trúc máy chủ echo thì nó không chiếm bất kỳ bộ nhớ nào hoặc ít bộ nhớ hơn vì khi tôi khởi tạo.

40
00:02:38,520 --> 00:02:44,670
Vì vậy, nếu tôi đã viết dòng 28 ở đó về các dấu ngoặc nhọn hoặc chỉ nói phục vụ như dấu hai chấm bằng con trỏ

41
00:02:44,670 --> 00:02:48,070
đến một máy chủ tiếng vang không hoạt động.

42
00:02:48,080 --> 00:02:55,100
Nhưng tôi có thể làm var phục vụ máy chủ echo con trỏ và điều đó sẽ khai báo Savi mà chúng tôi nhập vào.

43
00:02:55,160 --> 00:03:01,070
Bạn có thể nhập nó vào var serve và trỏ tới máy chủ tiếng vang không.

44
00:03:01,080 --> 00:03:01,510
Được rồi.

45
00:03:02,080 --> 00:03:05,440
Và sau đó điều đó rất giống nhau.

46
00:03:05,630 --> 00:03:12,170
Và điều đó tuyên bố rằng biến s Savi là kiểu con trỏ tới một máy chủ tiếng vang.

47
00:03:12,170 --> 00:03:19,590
Nhưng tôi chưa cấp phát bất kỳ bộ nhớ nào nên nó được khai báo là bộ nhớ cho S hoặc V là một con trỏ.

48
00:03:19,580 --> 00:03:20,090
Vâng vậy.

49
00:03:20,250 --> 00:03:24,000
Vì vậy, về mặt kỹ thuật, bộ nhớ cho một con trỏ nhưng điểm đó là không.

50
00:03:24,020 --> 00:03:31,490
Được rồi, đây là điều tương tự ngoại trừ con trỏ không bình thường nhưng dù sao thì nó cũng không trỏ đến bộ nhớ vì

51
00:03:31,520 --> 00:03:36,350
loại bên dưới không chiếm bộ nhớ hoặc những gì nó trỏ đến.

52
00:03:36,530 --> 00:03:42,980
Vì vậy, nếu bạn tiếp tục, tôi nghĩ rằng điều này sẽ hoạt động như hiện tại vì chúng tôi không thực sự sử dụng e ở đây.

53
00:03:42,980 --> 00:03:52,640
Vì vậy, thực tế là anh ấy không, nó sẽ thực sự chạy nhưng nó không thực sự là vấn đề lớn hay bất cứ điều gì.

54
00:03:53,180 --> 00:03:53,350
Vâng.

55
00:03:53,360 --> 00:03:58,010
Không, tôi chỉ đang khám phá khái niệm cấp phát bộ nhớ này và khi nào thì bộ nhớ được cấp phát.

56
00:03:58,010 --> 00:03:59,520
Không khởi tạo.

57
00:03:59,810 --> 00:04:06,920
Và sau đó bạn biết rằng có các dấu ngoặc nhọn ở cuối thực sự khởi tạo đúng không.

58
00:04:06,920 --> 00:04:10,740
Vì vậy, bạn có bộ nhớ được phân bổ tại thời điểm đó.

59
00:04:10,780 --> 00:04:16,470
Vì vậy, điều này cũng phân bổ bộ nhớ nhưng nó đặt thành giá trị 0 mà đối với một con trỏ là null.

60
00:04:16,480 --> 00:04:17,240
Được rồi.

61
00:04:17,350 --> 00:04:19,330
Hoặc hoặc không.

62
00:04:19,340 --> 00:04:24,270
Được rồi, không hoàn toàn rõ ràng về việc bạn có điều gì muốn nói thêm về nó không.

63
00:04:24,290 --> 00:04:26,360
Điều đó giống như một chủ đề lớn hơn một chút.

64
00:04:26,420 --> 00:04:27,340
Vâng.

65
00:04:27,530 --> 00:04:34,160
Có lẽ không rơi vào nó ngay bây giờ và sau đó điều cuối cùng nổi bật với tôi là mọi thứ

66
00:04:34,160 --> 00:04:36,100
đã có ý nghĩa cho đến dòng 26.

67
00:04:36,100 --> 00:04:44,540
Vậy dòng 21 bạn làm TCB không nghe rồi dòng 26 bạn tạo server GOP mới rồi dòng

68
00:04:44,560 --> 00:04:45,520
hai mươi tám.

69
00:04:45,590 --> 00:04:50,090
Cũng giống như bạn có phương pháp này cần được thực hiện.

70
00:04:50,120 --> 00:04:52,770
Làm thế nào mà bạn biết để kết nối phương pháp đó.

71
00:04:52,850 --> 00:04:57,410
Bạn biết phương thức echo với máy chủ mà bạn phải nói với máy chủ về điều đó.

72
00:04:57,410 --> 00:05:01,050
Đó là tìm kiếm trong mã được tạo mà bạn biết rằng bạn phải kết nối với chúng.

73
00:05:01,070 --> 00:05:01,600
Đúng.

74
00:05:01,670 --> 00:05:02,080
Đúng.

75
00:05:02,080 --> 00:05:09,470
Họ hoặc tạo mã có thanh ghi đó, loại gần như khớp với việc phải thiết lập một muck cho

76
00:05:09,470 --> 00:05:10,130
HDP.

77
00:05:10,130 --> 00:05:15,920
Bạn phải nói với họ rằng bạn phải sử dụng handle func để báo cho máy chủ biết điểm cuối của bạn ở đâu và

78
00:05:15,920 --> 00:05:20,840
sau đó xem hướng dẫn về tài liệu gypsy.

79
00:05:20,840 --> 00:05:28,680
Có một ví dụ để bắt đầu một máy chủ bao gồm loại điều đó hoàn toàn tốt.

80
00:05:28,690 --> 00:05:39,310
Vì vậy, đó là quy trình công việc mà bạn sẽ tạo ra một giá trị biến kiểu con trỏ tới một

81
00:05:39,310 --> 00:05:47,710
máy chủ echo bạn đăng ký để máy chủ của bạn máy chủ GMP của bạn bây giờ nhận thức được giá trị đó với điều đó

82
00:05:47,740 --> 00:05:50,320
echo và nó có thể sử dụng nó.

83
00:05:50,320 --> 00:05:55,910
Và sau đó bạn phục vụ và nó sẵn sàng phục vụ người nghe đó.

84
00:05:56,290 --> 00:05:56,920
Mát mẻ.

85
00:05:56,920 --> 00:05:57,220
Tuyệt vời.

86
00:05:57,220 --> 00:06:01,360
Đó là những suy nghĩ của tôi và chúng tôi sẽ cung cấp thêm cho bạn trong các video tiếp theo.