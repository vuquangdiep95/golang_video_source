1
00:00:00,330 --> 00:00:06,930
Well another one of the benefits of keeping the video short is that you know it's like OK got that one

2
00:00:06,930 --> 00:00:10,790
good in the can stop there before you mess it up.

3
00:00:11,460 --> 00:00:14,810
And so now we're going to take a look at compiling the service.

4
00:00:14,820 --> 00:00:17,040
And Daniel you got some more stuff to share with us.

5
00:00:17,040 --> 00:00:18,020
Let's see it.

6
00:00:18,030 --> 00:00:18,260
Yeah.

7
00:00:18,300 --> 00:00:24,870
So I will just keep in this oh one product for here because this is very I'm not actually writing any

8
00:00:24,870 --> 00:00:26,280
code in this one.

9
00:00:26,280 --> 00:00:33,930
So here we are just going to convert this stop profile into a dot go package that you can import that

10
00:00:34,380 --> 00:00:38,410
actually can do stuff.

11
00:00:38,760 --> 00:00:40,260
So my fair kind of code.

12
00:00:40,350 --> 00:00:41,260
Yes.

13
00:00:42,090 --> 00:00:49,280
So the command to do it is proto C which we just installed previously along with its extension and there's

14
00:00:49,290 --> 00:00:52,650
a number of command line arguments that you have to add into this.

15
00:00:52,650 --> 00:00:59,200
So I need to make sure I am in my 0 1 product folder and so I am one level above that.

16
00:00:59,220 --> 00:01:01,070
I've got the echo folder in there.

17
00:01:01,140 --> 00:01:04,410
Inside echo folders the Echo Dot protocol.

18
00:01:04,640 --> 00:01:05,750
So.

19
00:01:05,770 --> 00:01:14,470
So I'm basically in the base of this particular project and so I may use Potosi.

20
00:01:14,870 --> 00:01:19,250
There's a dash I can dash capital I argument and you get this.

21
00:01:19,250 --> 00:01:24,110
This is this should be the folder where your dot profiles in.

22
00:01:24,650 --> 00:01:31,720
So my dot profiles in The Echo folder so debt dash capital echo then you give the full path to the DOT

23
00:01:31,730 --> 00:01:32,350
profile.

24
00:01:32,390 --> 00:01:35,260
So that's echo echoed out Proto.

25
00:01:35,450 --> 00:01:40,730
And if you're on Unix posits Linux type machines it's going to look slightly different.

26
00:01:40,730 --> 00:01:41,030
Yeah.

27
00:01:41,100 --> 00:01:43,170
It'll just be forwards to the backslash.

28
00:01:43,540 --> 00:01:44,330
Yeah same thing.

29
00:01:45,770 --> 00:01:52,710
And then finally because we want to use make a go of this we want this to be a go package.

30
00:01:52,760 --> 00:01:57,530
We use Dash Dash go underscore out equals.

31
00:01:57,770 --> 00:02:03,380
And now there's kind of two kind of sections and so I will I'll do the first one first.

32
00:02:03,730 --> 00:02:12,780
Just call it echo again which is just the the name of that folder again and if we look here we can now

33
00:02:12,780 --> 00:02:13,980
see the sights echoed out Proto.

34
00:02:13,980 --> 00:02:20,220
We now have an echo dot PDB 4 protocol buffer dot go to click in there.

35
00:02:20,220 --> 00:02:25,800
This has are two messages echo request and echo response

36
00:02:28,380 --> 00:02:28,640
so.

37
00:02:28,650 --> 00:02:33,470
But this is not this is not have echo server listed in it.

38
00:02:33,520 --> 00:02:35,880
It's just the protocol buffer part of it.

39
00:02:35,970 --> 00:02:38,170
Echo request echo response.

40
00:02:38,280 --> 00:02:45,630
So if you do the same command except go back to the Goda out or go underscore out equals echo instead

41
00:02:45,630 --> 00:02:52,170
of putting echo you put plug ins equals G or C colon.

42
00:02:52,170 --> 00:03:02,640
Echo so in between the go out in the echo you put in a plug in equal to your P.C. run that when you

43
00:03:02,640 --> 00:03:07,400
go back here to the Echo PBT go it's

44
00:03:10,830 --> 00:03:11,800
it's not running it

45
00:03:14,720 --> 00:03:22,550
delete that it's plug ins plural plug ins that's funny.

46
00:03:22,880 --> 00:03:30,200
Now you can see it's importing G.P.S. and if we scroll down past the echo request echo response we now

47
00:03:30,200 --> 00:03:38,740
have some stuff about Echo server client and echo server server so the first one where you just did

48
00:03:38,740 --> 00:03:43,390
the echo that didn't create the protocol buffer is that right.

49
00:03:43,390 --> 00:03:46,590
So so that just created the protocol buffer messages.

50
00:03:46,870 --> 00:03:49,060
Did not give extra code about service.

51
00:03:49,120 --> 00:03:50,050
OK.

52
00:03:50,140 --> 00:03:52,930
And then when you included the second commands it create the service.

53
00:03:52,930 --> 00:04:01,060
So that was just to illustrate what the different different different flags are doing in the command

54
00:04:01,090 --> 00:04:01,270
here.

55
00:04:01,270 --> 00:04:02,620
That's what you want to illustrate.

56
00:04:02,620 --> 00:04:03,040
Yes.

57
00:04:03,090 --> 00:04:03,740
OK.

58
00:04:03,980 --> 00:04:11,740
Say one thing to check when you're doing this make sure your package is matching your folder name just

59
00:04:11,740 --> 00:04:16,010
to just for convenience sake.

60
00:04:16,110 --> 00:04:17,330
Good.

61
00:04:17,350 --> 00:04:19,690
Anything else to compiling the service.

62
00:04:19,700 --> 00:04:19,930
No.

63
00:04:20,140 --> 00:04:24,680
So now you've got to go file you can import it and be used.

64
00:04:24,700 --> 00:04:29,820
All right see the next video where it's going to be a surprise for me even it's going to happen.
